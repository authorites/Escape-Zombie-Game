
final_project_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f20  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080050c0  080050c0  000150c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005158  08005158  000211a4  2**0
                  CONTENTS
  4 .ARM          00000008  08005158  08005158  00015158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005160  08005160  000211a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005160  08005160  00015160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005164  08005164  00015164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000011a4  20000000  08005168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  200011a4  0800630c  000211a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000137c  0800630c  0002137c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000211a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b66  00000000  00000000  000211d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001690  00000000  00000000  00028d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000738  00000000  00000000  0002a3d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006e0  00000000  00000000  0002ab08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014bbf  00000000  00000000  0002b1e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006451  00000000  00000000  0003fda7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008538c  00000000  00000000  000461f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cb584  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002080  00000000  00000000  000cb600  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  000cd680  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000cd6a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200011a4 	.word	0x200011a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080050a8 	.word	0x080050a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200011a8 	.word	0x200011a8
 80001dc:	080050a8 	.word	0x080050a8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <set_cur_to>:
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */


void set_cur_to(int row, int col){
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
	uint8_t buffer[10] = "";
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	f107 0310 	add.w	r3, r7, #16
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	809a      	strh	r2, [r3, #4]
	sprintf(buffer, "\x1b[%d;%dH", row, col);
 8000598:	f107 000c 	add.w	r0, r7, #12
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	4907      	ldr	r1, [pc, #28]	; (80005c0 <set_cur_to+0x40>)
 80005a2:	f004 f93f 	bl	8004824 <siprintf>
	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
 80005a6:	f107 010c 	add.w	r1, r7, #12
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295
 80005ae:	220a      	movs	r2, #10
 80005b0:	4804      	ldr	r0, [pc, #16]	; (80005c4 <set_cur_to+0x44>)
 80005b2:	f003 f9c2 	bl	800393a <HAL_UART_Transmit>
}
 80005b6:	bf00      	nop
 80005b8:	3718      	adds	r7, #24
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	080050c0 	.word	0x080050c0
 80005c4:	2000132c 	.word	0x2000132c

080005c8 <clear_screen>:

void clear_screen(){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, _clear_screen, sizeof(_clear_screen), HAL_MAX_DELAY);
 80005cc:	f04f 33ff 	mov.w	r3, #4294967295
 80005d0:	220a      	movs	r2, #10
 80005d2:	4903      	ldr	r1, [pc, #12]	; (80005e0 <clear_screen+0x18>)
 80005d4:	4803      	ldr	r0, [pc, #12]	; (80005e4 <clear_screen+0x1c>)
 80005d6:	f003 f9b0 	bl	800393a <HAL_UART_Transmit>
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000000 	.word	0x20000000
 80005e4:	2000132c 	.word	0x2000132c

080005e8 <animation_E>:

void animation_E(int row, int col) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
	for(int i = 4; i > 0; i--) {
 80005f2:	2304      	movs	r3, #4
 80005f4:	617b      	str	r3, [r7, #20]
 80005f6:	e014      	b.n	8000622 <animation_E+0x3a>
		set_cur_to(1+row, i+col);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	1c58      	adds	r0, r3, #1
 80005fc:	697a      	ldr	r2, [r7, #20]
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	4413      	add	r3, r2
 8000602:	4619      	mov	r1, r3
 8000604:	f7ff ffbc 	bl	8000580 <set_cur_to>
		HAL_UART_Transmit(&huart2, o, sizeof(o), HAL_MAX_DELAY);
 8000608:	f04f 33ff 	mov.w	r3, #4294967295
 800060c:	2201      	movs	r2, #1
 800060e:	4931      	ldr	r1, [pc, #196]	; (80006d4 <animation_E+0xec>)
 8000610:	4831      	ldr	r0, [pc, #196]	; (80006d8 <animation_E+0xf0>)
 8000612:	f003 f992 	bl	800393a <HAL_UART_Transmit>
		HAL_Delay(150);
 8000616:	2096      	movs	r0, #150	; 0x96
 8000618:	f001 ff06 	bl	8002428 <HAL_Delay>
	for(int i = 4; i > 0; i--) {
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	3b01      	subs	r3, #1
 8000620:	617b      	str	r3, [r7, #20]
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	2b00      	cmp	r3, #0
 8000626:	dce7      	bgt.n	80005f8 <animation_E+0x10>
	}
	for(int i = 2; i < 6; i++) {
 8000628:	2302      	movs	r3, #2
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	e015      	b.n	800065a <animation_E+0x72>
			set_cur_to(i+row, 1+col);
 800062e:	693a      	ldr	r2, [r7, #16]
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	441a      	add	r2, r3
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	3301      	adds	r3, #1
 8000638:	4619      	mov	r1, r3
 800063a:	4610      	mov	r0, r2
 800063c:	f7ff ffa0 	bl	8000580 <set_cur_to>
			HAL_UART_Transmit(&huart2, o, sizeof(o), HAL_MAX_DELAY);
 8000640:	f04f 33ff 	mov.w	r3, #4294967295
 8000644:	2201      	movs	r2, #1
 8000646:	4923      	ldr	r1, [pc, #140]	; (80006d4 <animation_E+0xec>)
 8000648:	4823      	ldr	r0, [pc, #140]	; (80006d8 <animation_E+0xf0>)
 800064a:	f003 f976 	bl	800393a <HAL_UART_Transmit>
			HAL_Delay(150);
 800064e:	2096      	movs	r0, #150	; 0x96
 8000650:	f001 feea 	bl	8002428 <HAL_Delay>
	for(int i = 2; i < 6; i++) {
 8000654:	693b      	ldr	r3, [r7, #16]
 8000656:	3301      	adds	r3, #1
 8000658:	613b      	str	r3, [r7, #16]
 800065a:	693b      	ldr	r3, [r7, #16]
 800065c:	2b05      	cmp	r3, #5
 800065e:	dde6      	ble.n	800062e <animation_E+0x46>
	}
	for(int i = 2; i < 5; i++) {
 8000660:	2302      	movs	r3, #2
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	e014      	b.n	8000690 <animation_E+0xa8>
			set_cur_to(5+row, i+col);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	1d58      	adds	r0, r3, #5
 800066a:	68fa      	ldr	r2, [r7, #12]
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	4413      	add	r3, r2
 8000670:	4619      	mov	r1, r3
 8000672:	f7ff ff85 	bl	8000580 <set_cur_to>
			HAL_UART_Transmit(&huart2, o, sizeof(o), HAL_MAX_DELAY);
 8000676:	f04f 33ff 	mov.w	r3, #4294967295
 800067a:	2201      	movs	r2, #1
 800067c:	4915      	ldr	r1, [pc, #84]	; (80006d4 <animation_E+0xec>)
 800067e:	4816      	ldr	r0, [pc, #88]	; (80006d8 <animation_E+0xf0>)
 8000680:	f003 f95b 	bl	800393a <HAL_UART_Transmit>
			HAL_Delay(150);
 8000684:	2096      	movs	r0, #150	; 0x96
 8000686:	f001 fecf 	bl	8002428 <HAL_Delay>
	for(int i = 2; i < 5; i++) {
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	3301      	adds	r3, #1
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	2b04      	cmp	r3, #4
 8000694:	dde7      	ble.n	8000666 <animation_E+0x7e>
	}
	for(int i = 2; i < 5; i++) {
 8000696:	2302      	movs	r3, #2
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	e014      	b.n	80006c6 <animation_E+0xde>
			set_cur_to(3+row, i+col);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	1cd8      	adds	r0, r3, #3
 80006a0:	68ba      	ldr	r2, [r7, #8]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	4413      	add	r3, r2
 80006a6:	4619      	mov	r1, r3
 80006a8:	f7ff ff6a 	bl	8000580 <set_cur_to>
			HAL_UART_Transmit(&huart2, o, sizeof(o), HAL_MAX_DELAY);
 80006ac:	f04f 33ff 	mov.w	r3, #4294967295
 80006b0:	2201      	movs	r2, #1
 80006b2:	4908      	ldr	r1, [pc, #32]	; (80006d4 <animation_E+0xec>)
 80006b4:	4808      	ldr	r0, [pc, #32]	; (80006d8 <animation_E+0xf0>)
 80006b6:	f003 f940 	bl	800393a <HAL_UART_Transmit>
			HAL_Delay(150);
 80006ba:	2096      	movs	r0, #150	; 0x96
 80006bc:	f001 feb4 	bl	8002428 <HAL_Delay>
	for(int i = 2; i < 5; i++) {
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	3301      	adds	r3, #1
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	2b04      	cmp	r3, #4
 80006ca:	dde7      	ble.n	800069c <animation_E+0xb4>
	}

}
 80006cc:	bf00      	nop
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	2000000c 	.word	0x2000000c
 80006d8:	2000132c 	.word	0x2000132c

080006dc <animation_C>:

void animation_C(int row, int col) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
	for(int i = 4; i > 0; i--) {
 80006e6:	2304      	movs	r3, #4
 80006e8:	617b      	str	r3, [r7, #20]
 80006ea:	e014      	b.n	8000716 <animation_C+0x3a>
		set_cur_to(1+row, i+col);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	1c58      	adds	r0, r3, #1
 80006f0:	697a      	ldr	r2, [r7, #20]
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	4413      	add	r3, r2
 80006f6:	4619      	mov	r1, r3
 80006f8:	f7ff ff42 	bl	8000580 <set_cur_to>
		HAL_UART_Transmit(&huart2, o, sizeof(o), HAL_MAX_DELAY);
 80006fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000700:	2201      	movs	r2, #1
 8000702:	4924      	ldr	r1, [pc, #144]	; (8000794 <animation_C+0xb8>)
 8000704:	4824      	ldr	r0, [pc, #144]	; (8000798 <animation_C+0xbc>)
 8000706:	f003 f918 	bl	800393a <HAL_UART_Transmit>
		HAL_Delay(150);
 800070a:	2096      	movs	r0, #150	; 0x96
 800070c:	f001 fe8c 	bl	8002428 <HAL_Delay>
	for(int i = 4; i > 0; i--) {
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	3b01      	subs	r3, #1
 8000714:	617b      	str	r3, [r7, #20]
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	2b00      	cmp	r3, #0
 800071a:	dce7      	bgt.n	80006ec <animation_C+0x10>
	}
	for(int i = 2; i < 6; i++) {
 800071c:	2302      	movs	r3, #2
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	e015      	b.n	800074e <animation_C+0x72>
			set_cur_to(i+row, 1+col);
 8000722:	693a      	ldr	r2, [r7, #16]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	441a      	add	r2, r3
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	3301      	adds	r3, #1
 800072c:	4619      	mov	r1, r3
 800072e:	4610      	mov	r0, r2
 8000730:	f7ff ff26 	bl	8000580 <set_cur_to>
			HAL_UART_Transmit(&huart2, o, sizeof(o), HAL_MAX_DELAY);
 8000734:	f04f 33ff 	mov.w	r3, #4294967295
 8000738:	2201      	movs	r2, #1
 800073a:	4916      	ldr	r1, [pc, #88]	; (8000794 <animation_C+0xb8>)
 800073c:	4816      	ldr	r0, [pc, #88]	; (8000798 <animation_C+0xbc>)
 800073e:	f003 f8fc 	bl	800393a <HAL_UART_Transmit>
			HAL_Delay(150);
 8000742:	2096      	movs	r0, #150	; 0x96
 8000744:	f001 fe70 	bl	8002428 <HAL_Delay>
	for(int i = 2; i < 6; i++) {
 8000748:	693b      	ldr	r3, [r7, #16]
 800074a:	3301      	adds	r3, #1
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	693b      	ldr	r3, [r7, #16]
 8000750:	2b05      	cmp	r3, #5
 8000752:	dde6      	ble.n	8000722 <animation_C+0x46>
	}
	for(int i = 2; i < 5; i++) {
 8000754:	2302      	movs	r3, #2
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	e014      	b.n	8000784 <animation_C+0xa8>
			set_cur_to(5+row, i+col);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	1d58      	adds	r0, r3, #5
 800075e:	68fa      	ldr	r2, [r7, #12]
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	4413      	add	r3, r2
 8000764:	4619      	mov	r1, r3
 8000766:	f7ff ff0b 	bl	8000580 <set_cur_to>
			HAL_UART_Transmit(&huart2, o, sizeof(o), HAL_MAX_DELAY);
 800076a:	f04f 33ff 	mov.w	r3, #4294967295
 800076e:	2201      	movs	r2, #1
 8000770:	4908      	ldr	r1, [pc, #32]	; (8000794 <animation_C+0xb8>)
 8000772:	4809      	ldr	r0, [pc, #36]	; (8000798 <animation_C+0xbc>)
 8000774:	f003 f8e1 	bl	800393a <HAL_UART_Transmit>
			HAL_Delay(150);
 8000778:	2096      	movs	r0, #150	; 0x96
 800077a:	f001 fe55 	bl	8002428 <HAL_Delay>
	for(int i = 2; i < 5; i++) {
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	3301      	adds	r3, #1
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	2b04      	cmp	r3, #4
 8000788:	dde7      	ble.n	800075a <animation_C+0x7e>
	}
}
 800078a:	bf00      	nop
 800078c:	3718      	adds	r7, #24
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	2000000c 	.word	0x2000000c
 8000798:	2000132c 	.word	0x2000132c

0800079c <animation_A>:

void animation_A(int row, int col) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	6039      	str	r1, [r7, #0]
	for(int i = 5; i > 0; i--) {
 80007a6:	2305      	movs	r3, #5
 80007a8:	617b      	str	r3, [r7, #20]
 80007aa:	e015      	b.n	80007d8 <animation_A+0x3c>
			set_cur_to(i+row, 1+col);
 80007ac:	697a      	ldr	r2, [r7, #20]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	441a      	add	r2, r3
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	3301      	adds	r3, #1
 80007b6:	4619      	mov	r1, r3
 80007b8:	4610      	mov	r0, r2
 80007ba:	f7ff fee1 	bl	8000580 <set_cur_to>
			HAL_UART_Transmit(&huart2, o, sizeof(o), HAL_MAX_DELAY);
 80007be:	f04f 33ff 	mov.w	r3, #4294967295
 80007c2:	2201      	movs	r2, #1
 80007c4:	4931      	ldr	r1, [pc, #196]	; (800088c <animation_A+0xf0>)
 80007c6:	4832      	ldr	r0, [pc, #200]	; (8000890 <animation_A+0xf4>)
 80007c8:	f003 f8b7 	bl	800393a <HAL_UART_Transmit>
			HAL_Delay(150);
 80007cc:	2096      	movs	r0, #150	; 0x96
 80007ce:	f001 fe2b 	bl	8002428 <HAL_Delay>
	for(int i = 5; i > 0; i--) {
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	3b01      	subs	r3, #1
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	dce6      	bgt.n	80007ac <animation_A+0x10>
	}
	for(int i = 2; i < 5; i++) {
 80007de:	2302      	movs	r3, #2
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	e014      	b.n	800080e <animation_A+0x72>
			set_cur_to(1+row, i+col);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	1c58      	adds	r0, r3, #1
 80007e8:	693a      	ldr	r2, [r7, #16]
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	4413      	add	r3, r2
 80007ee:	4619      	mov	r1, r3
 80007f0:	f7ff fec6 	bl	8000580 <set_cur_to>
			HAL_UART_Transmit(&huart2, o, sizeof(o), HAL_MAX_DELAY);
 80007f4:	f04f 33ff 	mov.w	r3, #4294967295
 80007f8:	2201      	movs	r2, #1
 80007fa:	4924      	ldr	r1, [pc, #144]	; (800088c <animation_A+0xf0>)
 80007fc:	4824      	ldr	r0, [pc, #144]	; (8000890 <animation_A+0xf4>)
 80007fe:	f003 f89c 	bl	800393a <HAL_UART_Transmit>
			HAL_Delay(150);
 8000802:	2096      	movs	r0, #150	; 0x96
 8000804:	f001 fe10 	bl	8002428 <HAL_Delay>
	for(int i = 2; i < 5; i++) {
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	3301      	adds	r3, #1
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	2b04      	cmp	r3, #4
 8000812:	dde7      	ble.n	80007e4 <animation_A+0x48>
	}
	for(int i = 2; i < 6; i++) {
 8000814:	2302      	movs	r3, #2
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	e015      	b.n	8000846 <animation_A+0xaa>
			set_cur_to(i+row, 4+col);
 800081a:	68fa      	ldr	r2, [r7, #12]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	441a      	add	r2, r3
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	3304      	adds	r3, #4
 8000824:	4619      	mov	r1, r3
 8000826:	4610      	mov	r0, r2
 8000828:	f7ff feaa 	bl	8000580 <set_cur_to>
			HAL_UART_Transmit(&huart2, o, sizeof(o), HAL_MAX_DELAY);
 800082c:	f04f 33ff 	mov.w	r3, #4294967295
 8000830:	2201      	movs	r2, #1
 8000832:	4916      	ldr	r1, [pc, #88]	; (800088c <animation_A+0xf0>)
 8000834:	4816      	ldr	r0, [pc, #88]	; (8000890 <animation_A+0xf4>)
 8000836:	f003 f880 	bl	800393a <HAL_UART_Transmit>
			HAL_Delay(150);
 800083a:	2096      	movs	r0, #150	; 0x96
 800083c:	f001 fdf4 	bl	8002428 <HAL_Delay>
	for(int i = 2; i < 6; i++) {
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	3301      	adds	r3, #1
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	2b05      	cmp	r3, #5
 800084a:	dde6      	ble.n	800081a <animation_A+0x7e>
	}
	for(int i = 2; i < 5; i++) {
 800084c:	2302      	movs	r3, #2
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	e014      	b.n	800087c <animation_A+0xe0>
			set_cur_to(3+row, i+col);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	1cd8      	adds	r0, r3, #3
 8000856:	68ba      	ldr	r2, [r7, #8]
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	4413      	add	r3, r2
 800085c:	4619      	mov	r1, r3
 800085e:	f7ff fe8f 	bl	8000580 <set_cur_to>
			HAL_UART_Transmit(&huart2, o, sizeof(o), HAL_MAX_DELAY);
 8000862:	f04f 33ff 	mov.w	r3, #4294967295
 8000866:	2201      	movs	r2, #1
 8000868:	4908      	ldr	r1, [pc, #32]	; (800088c <animation_A+0xf0>)
 800086a:	4809      	ldr	r0, [pc, #36]	; (8000890 <animation_A+0xf4>)
 800086c:	f003 f865 	bl	800393a <HAL_UART_Transmit>
			HAL_Delay(150);
 8000870:	2096      	movs	r0, #150	; 0x96
 8000872:	f001 fdd9 	bl	8002428 <HAL_Delay>
	for(int i = 2; i < 5; i++) {
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	3301      	adds	r3, #1
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	2b04      	cmp	r3, #4
 8000880:	dde7      	ble.n	8000852 <animation_A+0xb6>
	}

}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	2000000c 	.word	0x2000000c
 8000890:	2000132c 	.word	0x2000132c

08000894 <animation_P>:

void animation_P(int row, int col) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
	for(int i = 5; i > 0; i--) {
 800089e:	2305      	movs	r3, #5
 80008a0:	617b      	str	r3, [r7, #20]
 80008a2:	e015      	b.n	80008d0 <animation_P+0x3c>
			set_cur_to(i+row, 1+col);
 80008a4:	697a      	ldr	r2, [r7, #20]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	441a      	add	r2, r3
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	3301      	adds	r3, #1
 80008ae:	4619      	mov	r1, r3
 80008b0:	4610      	mov	r0, r2
 80008b2:	f7ff fe65 	bl	8000580 <set_cur_to>
			HAL_UART_Transmit(&huart2, o, sizeof(o), HAL_MAX_DELAY);
 80008b6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ba:	2201      	movs	r2, #1
 80008bc:	4931      	ldr	r1, [pc, #196]	; (8000984 <animation_P+0xf0>)
 80008be:	4832      	ldr	r0, [pc, #200]	; (8000988 <animation_P+0xf4>)
 80008c0:	f003 f83b 	bl	800393a <HAL_UART_Transmit>
			HAL_Delay(150);
 80008c4:	2096      	movs	r0, #150	; 0x96
 80008c6:	f001 fdaf 	bl	8002428 <HAL_Delay>
	for(int i = 5; i > 0; i--) {
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	3b01      	subs	r3, #1
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	dce6      	bgt.n	80008a4 <animation_P+0x10>
	}
	for(int i = 2; i < 5; i++) {
 80008d6:	2302      	movs	r3, #2
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	e014      	b.n	8000906 <animation_P+0x72>
			set_cur_to(1+row, i+col);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	1c58      	adds	r0, r3, #1
 80008e0:	693a      	ldr	r2, [r7, #16]
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	4413      	add	r3, r2
 80008e6:	4619      	mov	r1, r3
 80008e8:	f7ff fe4a 	bl	8000580 <set_cur_to>
			HAL_UART_Transmit(&huart2, o, sizeof(o), HAL_MAX_DELAY);
 80008ec:	f04f 33ff 	mov.w	r3, #4294967295
 80008f0:	2201      	movs	r2, #1
 80008f2:	4924      	ldr	r1, [pc, #144]	; (8000984 <animation_P+0xf0>)
 80008f4:	4824      	ldr	r0, [pc, #144]	; (8000988 <animation_P+0xf4>)
 80008f6:	f003 f820 	bl	800393a <HAL_UART_Transmit>
			HAL_Delay(150);
 80008fa:	2096      	movs	r0, #150	; 0x96
 80008fc:	f001 fd94 	bl	8002428 <HAL_Delay>
	for(int i = 2; i < 5; i++) {
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	3301      	adds	r3, #1
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	2b04      	cmp	r3, #4
 800090a:	dde7      	ble.n	80008dc <animation_P+0x48>
	}
	for(int i = 2; i < 4; i++) {
 800090c:	2302      	movs	r3, #2
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	e015      	b.n	800093e <animation_P+0xaa>
			set_cur_to(i+row, 4+col);
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	441a      	add	r2, r3
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	3304      	adds	r3, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4610      	mov	r0, r2
 8000920:	f7ff fe2e 	bl	8000580 <set_cur_to>
			HAL_UART_Transmit(&huart2, o, sizeof(o), HAL_MAX_DELAY);
 8000924:	f04f 33ff 	mov.w	r3, #4294967295
 8000928:	2201      	movs	r2, #1
 800092a:	4916      	ldr	r1, [pc, #88]	; (8000984 <animation_P+0xf0>)
 800092c:	4816      	ldr	r0, [pc, #88]	; (8000988 <animation_P+0xf4>)
 800092e:	f003 f804 	bl	800393a <HAL_UART_Transmit>
			HAL_Delay(150);
 8000932:	2096      	movs	r0, #150	; 0x96
 8000934:	f001 fd78 	bl	8002428 <HAL_Delay>
	for(int i = 2; i < 4; i++) {
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	3301      	adds	r3, #1
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	2b03      	cmp	r3, #3
 8000942:	dde6      	ble.n	8000912 <animation_P+0x7e>
	}
	for(int i = 4; i > 1; i--) {
 8000944:	2304      	movs	r3, #4
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	e014      	b.n	8000974 <animation_P+0xe0>
			set_cur_to(3+row, i+col);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	1cd8      	adds	r0, r3, #3
 800094e:	68ba      	ldr	r2, [r7, #8]
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	4413      	add	r3, r2
 8000954:	4619      	mov	r1, r3
 8000956:	f7ff fe13 	bl	8000580 <set_cur_to>
			HAL_UART_Transmit(&huart2, o, sizeof(o), HAL_MAX_DELAY);
 800095a:	f04f 33ff 	mov.w	r3, #4294967295
 800095e:	2201      	movs	r2, #1
 8000960:	4908      	ldr	r1, [pc, #32]	; (8000984 <animation_P+0xf0>)
 8000962:	4809      	ldr	r0, [pc, #36]	; (8000988 <animation_P+0xf4>)
 8000964:	f002 ffe9 	bl	800393a <HAL_UART_Transmit>
			HAL_Delay(150);
 8000968:	2096      	movs	r0, #150	; 0x96
 800096a:	f001 fd5d 	bl	8002428 <HAL_Delay>
	for(int i = 4; i > 1; i--) {
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	3b01      	subs	r3, #1
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	2b01      	cmp	r3, #1
 8000978:	dce7      	bgt.n	800094a <animation_P+0xb6>
	}

}
 800097a:	bf00      	nop
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	2000000c 	.word	0x2000000c
 8000988:	2000132c 	.word	0x2000132c

0800098c <animation_S>:

void animation_S(int row, int col) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	6039      	str	r1, [r7, #0]
	for(int i = 4; i > 0; i--) {
 8000996:	2304      	movs	r3, #4
 8000998:	61fb      	str	r3, [r7, #28]
 800099a:	e014      	b.n	80009c6 <animation_S+0x3a>
			set_cur_to(1+row, i+col);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	1c58      	adds	r0, r3, #1
 80009a0:	69fa      	ldr	r2, [r7, #28]
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	4413      	add	r3, r2
 80009a6:	4619      	mov	r1, r3
 80009a8:	f7ff fdea 	bl	8000580 <set_cur_to>
			HAL_UART_Transmit(&huart2, o, sizeof(o), HAL_MAX_DELAY);
 80009ac:	f04f 33ff 	mov.w	r3, #4294967295
 80009b0:	2201      	movs	r2, #1
 80009b2:	493f      	ldr	r1, [pc, #252]	; (8000ab0 <animation_S+0x124>)
 80009b4:	483f      	ldr	r0, [pc, #252]	; (8000ab4 <animation_S+0x128>)
 80009b6:	f002 ffc0 	bl	800393a <HAL_UART_Transmit>
			HAL_Delay(150);
 80009ba:	2096      	movs	r0, #150	; 0x96
 80009bc:	f001 fd34 	bl	8002428 <HAL_Delay>
	for(int i = 4; i > 0; i--) {
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	3b01      	subs	r3, #1
 80009c4:	61fb      	str	r3, [r7, #28]
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	dce7      	bgt.n	800099c <animation_S+0x10>
	}
	for(int i = 2; i < 4; i++) {
 80009cc:	2302      	movs	r3, #2
 80009ce:	61bb      	str	r3, [r7, #24]
 80009d0:	e015      	b.n	80009fe <animation_S+0x72>
			set_cur_to(i+row, 1+col);
 80009d2:	69ba      	ldr	r2, [r7, #24]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	441a      	add	r2, r3
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	3301      	adds	r3, #1
 80009dc:	4619      	mov	r1, r3
 80009de:	4610      	mov	r0, r2
 80009e0:	f7ff fdce 	bl	8000580 <set_cur_to>
			HAL_UART_Transmit(&huart2, o, sizeof(o), HAL_MAX_DELAY);
 80009e4:	f04f 33ff 	mov.w	r3, #4294967295
 80009e8:	2201      	movs	r2, #1
 80009ea:	4931      	ldr	r1, [pc, #196]	; (8000ab0 <animation_S+0x124>)
 80009ec:	4831      	ldr	r0, [pc, #196]	; (8000ab4 <animation_S+0x128>)
 80009ee:	f002 ffa4 	bl	800393a <HAL_UART_Transmit>
			HAL_Delay(150);
 80009f2:	2096      	movs	r0, #150	; 0x96
 80009f4:	f001 fd18 	bl	8002428 <HAL_Delay>
	for(int i = 2; i < 4; i++) {
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	3301      	adds	r3, #1
 80009fc:	61bb      	str	r3, [r7, #24]
 80009fe:	69bb      	ldr	r3, [r7, #24]
 8000a00:	2b03      	cmp	r3, #3
 8000a02:	dde6      	ble.n	80009d2 <animation_S+0x46>
	}
	for(int i = 2; i < 5; i++) {
 8000a04:	2302      	movs	r3, #2
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	e014      	b.n	8000a34 <animation_S+0xa8>
			set_cur_to(3+row, i+col);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	1cd8      	adds	r0, r3, #3
 8000a0e:	697a      	ldr	r2, [r7, #20]
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	f7ff fdb3 	bl	8000580 <set_cur_to>
			HAL_UART_Transmit(&huart2, o, sizeof(o), HAL_MAX_DELAY);
 8000a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1e:	2201      	movs	r2, #1
 8000a20:	4923      	ldr	r1, [pc, #140]	; (8000ab0 <animation_S+0x124>)
 8000a22:	4824      	ldr	r0, [pc, #144]	; (8000ab4 <animation_S+0x128>)
 8000a24:	f002 ff89 	bl	800393a <HAL_UART_Transmit>
			HAL_Delay(150);
 8000a28:	2096      	movs	r0, #150	; 0x96
 8000a2a:	f001 fcfd 	bl	8002428 <HAL_Delay>
	for(int i = 2; i < 5; i++) {
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	3301      	adds	r3, #1
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	2b04      	cmp	r3, #4
 8000a38:	dde7      	ble.n	8000a0a <animation_S+0x7e>
	}
	for(int i = 4; i < 6; i++) {
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	e015      	b.n	8000a6c <animation_S+0xe0>
			set_cur_to(i+row, 4+col);
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	441a      	add	r2, r3
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	3304      	adds	r3, #4
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4610      	mov	r0, r2
 8000a4e:	f7ff fd97 	bl	8000580 <set_cur_to>
			HAL_UART_Transmit(&huart2, o, sizeof(o), HAL_MAX_DELAY);
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
 8000a56:	2201      	movs	r2, #1
 8000a58:	4915      	ldr	r1, [pc, #84]	; (8000ab0 <animation_S+0x124>)
 8000a5a:	4816      	ldr	r0, [pc, #88]	; (8000ab4 <animation_S+0x128>)
 8000a5c:	f002 ff6d 	bl	800393a <HAL_UART_Transmit>
			HAL_Delay(150);
 8000a60:	2096      	movs	r0, #150	; 0x96
 8000a62:	f001 fce1 	bl	8002428 <HAL_Delay>
	for(int i = 4; i < 6; i++) {
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	2b05      	cmp	r3, #5
 8000a70:	dde6      	ble.n	8000a40 <animation_S+0xb4>
	}
	for(int i = 4; i > 0; i--) {
 8000a72:	2304      	movs	r3, #4
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	e014      	b.n	8000aa2 <animation_S+0x116>
			set_cur_to(5+row, i+col);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	1d58      	adds	r0, r3, #5
 8000a7c:	68fa      	ldr	r2, [r7, #12]
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	4413      	add	r3, r2
 8000a82:	4619      	mov	r1, r3
 8000a84:	f7ff fd7c 	bl	8000580 <set_cur_to>
			HAL_UART_Transmit(&huart2, o, sizeof(o), HAL_MAX_DELAY);
 8000a88:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	4908      	ldr	r1, [pc, #32]	; (8000ab0 <animation_S+0x124>)
 8000a90:	4808      	ldr	r0, [pc, #32]	; (8000ab4 <animation_S+0x128>)
 8000a92:	f002 ff52 	bl	800393a <HAL_UART_Transmit>
			HAL_Delay(150);
 8000a96:	2096      	movs	r0, #150	; 0x96
 8000a98:	f001 fcc6 	bl	8002428 <HAL_Delay>
	for(int i = 4; i > 0; i--) {
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	dce7      	bgt.n	8000a78 <animation_S+0xec>
	}
}
 8000aa8:	bf00      	nop
 8000aaa:	3720      	adds	r7, #32
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	2000000c 	.word	0x2000000c
 8000ab4:	2000132c 	.word	0x2000132c

08000ab8 <disp_start_scene>:

void disp_start_scene() {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	clear_screen();
 8000abc:	f7ff fd84 	bl	80005c8 <clear_screen>
	animation_E(2,25);
 8000ac0:	2119      	movs	r1, #25
 8000ac2:	2002      	movs	r0, #2
 8000ac4:	f7ff fd90 	bl	80005e8 <animation_E>
	animation_S(2,30);
 8000ac8:	211e      	movs	r1, #30
 8000aca:	2002      	movs	r0, #2
 8000acc:	f7ff ff5e 	bl	800098c <animation_S>
	animation_C(2,35);
 8000ad0:	2123      	movs	r1, #35	; 0x23
 8000ad2:	2002      	movs	r0, #2
 8000ad4:	f7ff fe02 	bl	80006dc <animation_C>
	animation_A(2,40);
 8000ad8:	2128      	movs	r1, #40	; 0x28
 8000ada:	2002      	movs	r0, #2
 8000adc:	f7ff fe5e 	bl	800079c <animation_A>
	animation_P(2,45);
 8000ae0:	212d      	movs	r1, #45	; 0x2d
 8000ae2:	2002      	movs	r0, #2
 8000ae4:	f7ff fed6 	bl	8000894 <animation_P>
	animation_E(2,50);
 8000ae8:	2132      	movs	r1, #50	; 0x32
 8000aea:	2002      	movs	r0, #2
 8000aec:	f7ff fd7c 	bl	80005e8 <animation_E>
	set_cur_to(9, 26);
 8000af0:	211a      	movs	r1, #26
 8000af2:	2009      	movs	r0, #9
 8000af4:	f7ff fd44 	bl	8000580 <set_cur_to>
	HAL_UART_Transmit(&huart2, _player, sizeof(_player), HAL_MAX_DELAY);
 8000af8:	f04f 33ff 	mov.w	r3, #4294967295
 8000afc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b00:	492a      	ldr	r1, [pc, #168]	; (8000bac <disp_start_scene+0xf4>)
 8000b02:	482b      	ldr	r0, [pc, #172]	; (8000bb0 <disp_start_scene+0xf8>)
 8000b04:	f002 ff19 	bl	800393a <HAL_UART_Transmit>

	set_cur_to(18, 30);
 8000b08:	211e      	movs	r1, #30
 8000b0a:	2012      	movs	r0, #18
 8000b0c:	f7ff fd38 	bl	8000580 <set_cur_to>
	HAL_UART_Transmit(&huart2, start, sizeof(start), HAL_MAX_DELAY);
 8000b10:	f04f 33ff 	mov.w	r3, #4294967295
 8000b14:	2264      	movs	r2, #100	; 0x64
 8000b16:	4927      	ldr	r1, [pc, #156]	; (8000bb4 <disp_start_scene+0xfc>)
 8000b18:	4825      	ldr	r0, [pc, #148]	; (8000bb0 <disp_start_scene+0xf8>)
 8000b1a:	f002 ff0e 	bl	800393a <HAL_UART_Transmit>

	set_cur_to(22, 18);
 8000b1e:	2112      	movs	r1, #18
 8000b20:	2016      	movs	r0, #22
 8000b22:	f7ff fd2d 	bl	8000580 <set_cur_to>
	HAL_UART_Transmit(&huart2, name, sizeof(name), HAL_MAX_DELAY);
 8000b26:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2a:	2264      	movs	r2, #100	; 0x64
 8000b2c:	4922      	ldr	r1, [pc, #136]	; (8000bb8 <disp_start_scene+0x100>)
 8000b2e:	4820      	ldr	r0, [pc, #128]	; (8000bb0 <disp_start_scene+0xf8>)
 8000b30:	f002 ff03 	bl	800393a <HAL_UART_Transmit>

	count = 0;
 8000b34:	4b21      	ldr	r3, [pc, #132]	; (8000bbc <disp_start_scene+0x104>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
	key_input = 0;
 8000b3a:	4b21      	ldr	r3, [pc, #132]	; (8000bc0 <disp_start_scene+0x108>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
	while(key_input == 0) {
 8000b40:	e02c      	b.n	8000b9c <disp_start_scene+0xe4>
		HAL_Delay(10);
 8000b42:	200a      	movs	r0, #10
 8000b44:	f001 fc70 	bl	8002428 <HAL_Delay>
		if(count == 70) {
 8000b48:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <disp_start_scene+0x104>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b46      	cmp	r3, #70	; 0x46
 8000b4e:	d10a      	bne.n	8000b66 <disp_start_scene+0xae>
			set_cur_to(18, 52);
 8000b50:	2134      	movs	r1, #52	; 0x34
 8000b52:	2012      	movs	r0, #18
 8000b54:	f7ff fd14 	bl	8000580 <set_cur_to>
			HAL_UART_Transmit(&huart2, clear_line, sizeof(clear_line), HAL_MAX_DELAY);
 8000b58:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5c:	220a      	movs	r2, #10
 8000b5e:	4919      	ldr	r1, [pc, #100]	; (8000bc4 <disp_start_scene+0x10c>)
 8000b60:	4813      	ldr	r0, [pc, #76]	; (8000bb0 <disp_start_scene+0xf8>)
 8000b62:	f002 feea 	bl	800393a <HAL_UART_Transmit>
		}
		if(count == 90) {
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <disp_start_scene+0x104>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2b5a      	cmp	r3, #90	; 0x5a
 8000b6c:	d10d      	bne.n	8000b8a <disp_start_scene+0xd2>
			set_cur_to(18, 30);
 8000b6e:	211e      	movs	r1, #30
 8000b70:	2012      	movs	r0, #18
 8000b72:	f7ff fd05 	bl	8000580 <set_cur_to>
			HAL_UART_Transmit(&huart2, start, sizeof(start), HAL_MAX_DELAY);
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7a:	2264      	movs	r2, #100	; 0x64
 8000b7c:	490d      	ldr	r1, [pc, #52]	; (8000bb4 <disp_start_scene+0xfc>)
 8000b7e:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <disp_start_scene+0xf8>)
 8000b80:	f002 fedb 	bl	800393a <HAL_UART_Transmit>
			count = 0;
 8000b84:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <disp_start_scene+0x104>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
		}
		count++;
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <disp_start_scene+0x104>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <disp_start_scene+0x104>)
 8000b92:	6013      	str	r3, [r2, #0]
		set_cur_to(25, 80);
 8000b94:	2150      	movs	r1, #80	; 0x50
 8000b96:	2019      	movs	r0, #25
 8000b98:	f7ff fcf2 	bl	8000580 <set_cur_to>
	while(key_input == 0) {
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <disp_start_scene+0x108>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d0ce      	beq.n	8000b42 <disp_start_scene+0x8a>
	}
	clear_screen();
 8000ba4:	f7ff fd10 	bl	80005c8 <clear_screen>
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000010 	.word	0x20000010
 8000bb0:	2000132c 	.word	0x2000132c
 8000bb4:	200003f8 	.word	0x200003f8
 8000bb8:	2000045c 	.word	0x2000045c
 8000bbc:	20001324 	.word	0x20001324
 8000bc0:	200012b0 	.word	0x200012b0
 8000bc4:	200004c0 	.word	0x200004c0

08000bc8 <disp_map>:

void disp_map() {
 8000bc8:	b5b0      	push	{r4, r5, r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
	uint8_t box[1] = {177};
 8000bce:	23b1      	movs	r3, #177	; 0xb1
 8000bd0:	733b      	strb	r3, [r7, #12]
	uint8_t space[10] = "\40";
 8000bd2:	2320      	movs	r3, #32
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	809a      	strh	r2, [r3, #4]
	set_cur_to(3, 3);
 8000bde:	2103      	movs	r1, #3
 8000be0:	2003      	movs	r0, #3
 8000be2:	f7ff fccd 	bl	8000580 <set_cur_to>
	for(int r = 3;r < 24; r++) {
 8000be6:	2303      	movs	r3, #3
 8000be8:	617b      	str	r3, [r7, #20]
 8000bea:	e030      	b.n	8000c4e <disp_map+0x86>
		for(int c = 3; c < 79; c++) {
 8000bec:	2303      	movs	r3, #3
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	e027      	b.n	8000c42 <disp_map+0x7a>
				set_cur_to(r, c);
 8000bf2:	6939      	ldr	r1, [r7, #16]
 8000bf4:	6978      	ldr	r0, [r7, #20]
 8000bf6:	f7ff fcc3 	bl	8000580 <set_cur_to>
			  	if(map[((r-3)*85)+(c-3)] == 35) {
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	1eda      	subs	r2, r3, #3
 8000bfe:	4613      	mov	r3, r2
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	4413      	add	r3, r2
 8000c04:	011a      	lsls	r2, r3, #4
 8000c06:	441a      	add	r2, r3
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	3b03      	subs	r3, #3
 8000c0c:	4413      	add	r3, r2
 8000c0e:	4a2f      	ldr	r2, [pc, #188]	; (8000ccc <disp_map+0x104>)
 8000c10:	5cd3      	ldrb	r3, [r2, r3]
 8000c12:	2b23      	cmp	r3, #35	; 0x23
 8000c14:	d108      	bne.n	8000c28 <disp_map+0x60>
			  		HAL_UART_Transmit(&huart2, box, sizeof(box), HAL_MAX_DELAY);
 8000c16:	f107 010c 	add.w	r1, r7, #12
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1e:	2201      	movs	r2, #1
 8000c20:	482b      	ldr	r0, [pc, #172]	; (8000cd0 <disp_map+0x108>)
 8000c22:	f002 fe8a 	bl	800393a <HAL_UART_Transmit>
 8000c26:	e006      	b.n	8000c36 <disp_map+0x6e>
			  	} else {
			  		HAL_UART_Transmit(&huart2, space, sizeof(space), HAL_MAX_DELAY);
 8000c28:	4639      	mov	r1, r7
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2e:	220a      	movs	r2, #10
 8000c30:	4827      	ldr	r0, [pc, #156]	; (8000cd0 <disp_map+0x108>)
 8000c32:	f002 fe82 	bl	800393a <HAL_UART_Transmit>
			  	}
			  	HAL_Delay(2);
 8000c36:	2002      	movs	r0, #2
 8000c38:	f001 fbf6 	bl	8002428 <HAL_Delay>
		for(int c = 3; c < 79; c++) {
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	2b4e      	cmp	r3, #78	; 0x4e
 8000c46:	ddd4      	ble.n	8000bf2 <disp_map+0x2a>
	for(int r = 3;r < 24; r++) {
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	2b17      	cmp	r3, #23
 8000c52:	ddcb      	ble.n	8000bec <disp_map+0x24>
		}

	}
	key_input = 0;
 8000c54:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <disp_map+0x10c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	701a      	strb	r2, [r3, #0]
	cha_c = 20;
 8000c5a:	4b1f      	ldr	r3, [pc, #124]	; (8000cd8 <disp_map+0x110>)
 8000c5c:	2214      	movs	r2, #20
 8000c5e:	601a      	str	r2, [r3, #0]
	cha_r = 13;
 8000c60:	4b1e      	ldr	r3, [pc, #120]	; (8000cdc <disp_map+0x114>)
 8000c62:	220d      	movs	r2, #13
 8000c64:	601a      	str	r2, [r3, #0]
	set_cur_to(cha_r, cha_c);
 8000c66:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <disp_map+0x114>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <disp_map+0x110>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4610      	mov	r0, r2
 8000c72:	f7ff fc85 	bl	8000580 <set_cur_to>
	HAL_UART_Transmit(&huart2, player, sizeof(player), HAL_MAX_DELAY);
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	4918      	ldr	r1, [pc, #96]	; (8000ce0 <disp_map+0x118>)
 8000c7e:	4814      	ldr	r0, [pc, #80]	; (8000cd0 <disp_map+0x108>)
 8000c80:	f002 fe5b 	bl	800393a <HAL_UART_Transmit>
	score_inintial();
 8000c84:	f001 f80e 	bl	8001ca4 <score_inintial>
	zom_current = 1;
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <disp_map+0x11c>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	601a      	str	r2, [r3, #0]
	zombie_generate();
 8000c8e:	f000 f9fd 	bl	800108c <zombie_generate>
//	HAL_UART_Transmit(&huart2, map, sizeof(map), HAL_MAX_DELAY);
		sprintf(test_text, "press W(up) A(left) S(down) D(Right)" );
 8000c92:	4a15      	ldr	r2, [pc, #84]	; (8000ce8 <disp_map+0x120>)
 8000c94:	4b15      	ldr	r3, [pc, #84]	; (8000cec <disp_map+0x124>)
 8000c96:	4614      	mov	r4, r2
 8000c98:	461d      	mov	r5, r3
 8000c9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ca0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ca2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ca6:	6020      	str	r0, [r4, #0]
 8000ca8:	3404      	adds	r4, #4
 8000caa:	7021      	strb	r1, [r4, #0]
		set_cur_to(2, 3);
 8000cac:	2103      	movs	r1, #3
 8000cae:	2002      	movs	r0, #2
 8000cb0:	f7ff fc66 	bl	8000580 <set_cur_to>
		HAL_UART_Transmit(&huart2, test_text, sizeof(test_text), HAL_MAX_DELAY);
 8000cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb8:	2264      	movs	r2, #100	; 0x64
 8000cba:	490b      	ldr	r1, [pc, #44]	; (8000ce8 <disp_map+0x120>)
 8000cbc:	4804      	ldr	r0, [pc, #16]	; (8000cd0 <disp_map+0x108>)
 8000cbe:	f002 fe3c 	bl	800393a <HAL_UART_Transmit>
}
 8000cc2:	bf00      	nop
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bdb0      	pop	{r4, r5, r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	2000057c 	.word	0x2000057c
 8000cd0:	2000132c 	.word	0x2000132c
 8000cd4:	200012b0 	.word	0x200012b0
 8000cd8:	20001328 	.word	0x20001328
 8000cdc:	20001294 	.word	0x20001294
 8000ce0:	20000538 	.word	0x20000538
 8000ce4:	200012b4 	.word	0x200012b4
 8000ce8:	20001224 	.word	0x20001224
 8000cec:	080050cc 	.word	0x080050cc

08000cf0 <move>:

void move(uint8_t input,int who) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	71fb      	strb	r3, [r7, #7]
	if(who == 1) { //zombie
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d115      	bne.n	8000d2e <move+0x3e>
		m_r = *zom_r;
 8000d02:	4ba2      	ldr	r3, [pc, #648]	; (8000f8c <move+0x29c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4aa1      	ldr	r2, [pc, #644]	; (8000f90 <move+0x2a0>)
 8000d0a:	6013      	str	r3, [r2, #0]
		m_c = *zom_c;
 8000d0c:	4ba1      	ldr	r3, [pc, #644]	; (8000f94 <move+0x2a4>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4aa1      	ldr	r2, [pc, #644]	; (8000f98 <move+0x2a8>)
 8000d14:	6013      	str	r3, [r2, #0]
		p_r = zom_r;
 8000d16:	4b9d      	ldr	r3, [pc, #628]	; (8000f8c <move+0x29c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4aa0      	ldr	r2, [pc, #640]	; (8000f9c <move+0x2ac>)
 8000d1c:	6013      	str	r3, [r2, #0]
		p_c = zom_c;
 8000d1e:	4b9d      	ldr	r3, [pc, #628]	; (8000f94 <move+0x2a4>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a9f      	ldr	r2, [pc, #636]	; (8000fa0 <move+0x2b0>)
 8000d24:	6013      	str	r3, [r2, #0]
		charector = zombie;
 8000d26:	4b9f      	ldr	r3, [pc, #636]	; (8000fa4 <move+0x2b4>)
 8000d28:	4a9f      	ldr	r2, [pc, #636]	; (8000fa8 <move+0x2b8>)
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	e010      	b.n	8000d50 <move+0x60>
	} else {
		m_r = cha_r;
 8000d2e:	4b9f      	ldr	r3, [pc, #636]	; (8000fac <move+0x2bc>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a97      	ldr	r2, [pc, #604]	; (8000f90 <move+0x2a0>)
 8000d34:	6013      	str	r3, [r2, #0]
		m_c = cha_c;
 8000d36:	4b9e      	ldr	r3, [pc, #632]	; (8000fb0 <move+0x2c0>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a97      	ldr	r2, [pc, #604]	; (8000f98 <move+0x2a8>)
 8000d3c:	6013      	str	r3, [r2, #0]
		p_r = &cha_r;
 8000d3e:	4b97      	ldr	r3, [pc, #604]	; (8000f9c <move+0x2ac>)
 8000d40:	4a9a      	ldr	r2, [pc, #616]	; (8000fac <move+0x2bc>)
 8000d42:	601a      	str	r2, [r3, #0]
		p_c = &cha_c;
 8000d44:	4b96      	ldr	r3, [pc, #600]	; (8000fa0 <move+0x2b0>)
 8000d46:	4a9a      	ldr	r2, [pc, #616]	; (8000fb0 <move+0x2c0>)
 8000d48:	601a      	str	r2, [r3, #0]
		charector = player;
 8000d4a:	4b96      	ldr	r3, [pc, #600]	; (8000fa4 <move+0x2b4>)
 8000d4c:	4a99      	ldr	r2, [pc, #612]	; (8000fb4 <move+0x2c4>)
 8000d4e:	601a      	str	r2, [r3, #0]
	}

	switch (input)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	3b61      	subs	r3, #97	; 0x61
 8000d54:	2b16      	cmp	r3, #22
 8000d56:	f200 815c 	bhi.w	8001012 <move+0x322>
 8000d5a:	a201      	add	r2, pc, #4	; (adr r2, 8000d60 <move+0x70>)
 8000d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d60:	08000dbd 	.word	0x08000dbd
 8000d64:	08001013 	.word	0x08001013
 8000d68:	08001013 	.word	0x08001013
 8000d6c:	08000e45 	.word	0x08000e45
 8000d70:	08001013 	.word	0x08001013
 8000d74:	08001013 	.word	0x08001013
 8000d78:	08001013 	.word	0x08001013
 8000d7c:	08001013 	.word	0x08001013
 8000d80:	08001013 	.word	0x08001013
 8000d84:	08001013 	.word	0x08001013
 8000d88:	08001013 	.word	0x08001013
 8000d8c:	08001013 	.word	0x08001013
 8000d90:	08001013 	.word	0x08001013
 8000d94:	08001013 	.word	0x08001013
 8000d98:	08001013 	.word	0x08001013
 8000d9c:	08001013 	.word	0x08001013
 8000da0:	08001013 	.word	0x08001013
 8000da4:	08001013 	.word	0x08001013
 8000da8:	08000ecd 	.word	0x08000ecd
 8000dac:	08001013 	.word	0x08001013
 8000db0:	08001013 	.word	0x08001013
 8000db4:	08001013 	.word	0x08001013
 8000db8:	08000f55 	.word	0x08000f55
	{
	    case 97:// a
	    	if(!moveable(m_r, m_c-1)) break;
 8000dbc:	4b74      	ldr	r3, [pc, #464]	; (8000f90 <move+0x2a0>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4b75      	ldr	r3, [pc, #468]	; (8000f98 <move+0x2a8>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4610      	mov	r0, r2
 8000dca:	f000 f941 	bl	8001050 <moveable>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	f000 8120 	beq.w	8001016 <move+0x326>
	    	if(collision(m_r, m_c-1,who)) {
 8000dd6:	4b6e      	ldr	r3, [pc, #440]	; (8000f90 <move+0x2a0>)
 8000dd8:	6818      	ldr	r0, [r3, #0]
 8000dda:	4b6f      	ldr	r3, [pc, #444]	; (8000f98 <move+0x2a8>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	683a      	ldr	r2, [r7, #0]
 8000de2:	4619      	mov	r1, r3
 8000de4:	f000 fefe 	bl	8001be4 <collision>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d003      	beq.n	8000df6 <move+0x106>
	    		is_game_over = 1;
 8000dee:	4b72      	ldr	r3, [pc, #456]	; (8000fb8 <move+0x2c8>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	601a      	str	r2, [r3, #0]
	    		break;
 8000df4:	e116      	b.n	8001024 <move+0x334>
	    	}
	    	set_cur_to(m_r, m_c);
 8000df6:	4b66      	ldr	r3, [pc, #408]	; (8000f90 <move+0x2a0>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	4b67      	ldr	r3, [pc, #412]	; (8000f98 <move+0x2a8>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4610      	mov	r0, r2
 8000e02:	f7ff fbbd 	bl	8000580 <set_cur_to>
	    	HAL_UART_Transmit(&huart2, clear_charector, sizeof(clear_charector), HAL_MAX_DELAY);
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	496b      	ldr	r1, [pc, #428]	; (8000fbc <move+0x2cc>)
 8000e0e:	486c      	ldr	r0, [pc, #432]	; (8000fc0 <move+0x2d0>)
 8000e10:	f002 fd93 	bl	800393a <HAL_UART_Transmit>
	    	(*p_c)--;
 8000e14:	4b62      	ldr	r3, [pc, #392]	; (8000fa0 <move+0x2b0>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	3a01      	subs	r2, #1
 8000e1c:	601a      	str	r2, [r3, #0]
	    	set_cur_to(*p_r, *p_c);
 8000e1e:	4b5f      	ldr	r3, [pc, #380]	; (8000f9c <move+0x2ac>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b5e      	ldr	r3, [pc, #376]	; (8000fa0 <move+0x2b0>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	f7ff fba7 	bl	8000580 <set_cur_to>
	    	HAL_UART_Transmit(&huart2, charector, sizeof(charector), HAL_MAX_DELAY);
 8000e32:	4b5c      	ldr	r3, [pc, #368]	; (8000fa4 <move+0x2b4>)
 8000e34:	6819      	ldr	r1, [r3, #0]
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3a:	2204      	movs	r2, #4
 8000e3c:	4860      	ldr	r0, [pc, #384]	; (8000fc0 <move+0x2d0>)
 8000e3e:	f002 fd7c 	bl	800393a <HAL_UART_Transmit>
	    	break;
 8000e42:	e0ef      	b.n	8001024 <move+0x334>

	    case 100:// d
	    	if(!moveable(m_r, m_c+1)) break;
 8000e44:	4b52      	ldr	r3, [pc, #328]	; (8000f90 <move+0x2a0>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b53      	ldr	r3, [pc, #332]	; (8000f98 <move+0x2a8>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4610      	mov	r0, r2
 8000e52:	f000 f8fd 	bl	8001050 <moveable>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	f000 80de 	beq.w	800101a <move+0x32a>
	    	if(collision(m_r, m_c+1,who)) {
 8000e5e:	4b4c      	ldr	r3, [pc, #304]	; (8000f90 <move+0x2a0>)
 8000e60:	6818      	ldr	r0, [r3, #0]
 8000e62:	4b4d      	ldr	r3, [pc, #308]	; (8000f98 <move+0x2a8>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	3301      	adds	r3, #1
 8000e68:	683a      	ldr	r2, [r7, #0]
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f000 feba 	bl	8001be4 <collision>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <move+0x18e>
	    		is_game_over = 1;
 8000e76:	4b50      	ldr	r3, [pc, #320]	; (8000fb8 <move+0x2c8>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	601a      	str	r2, [r3, #0]
	    		break;
 8000e7c:	e0d2      	b.n	8001024 <move+0x334>
	    	}
	    	set_cur_to(m_r, m_c);
 8000e7e:	4b44      	ldr	r3, [pc, #272]	; (8000f90 <move+0x2a0>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	4b45      	ldr	r3, [pc, #276]	; (8000f98 <move+0x2a8>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4619      	mov	r1, r3
 8000e88:	4610      	mov	r0, r2
 8000e8a:	f7ff fb79 	bl	8000580 <set_cur_to>
	    	HAL_UART_Transmit(&huart2, clear_charector, sizeof(clear_charector), HAL_MAX_DELAY);
 8000e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e92:	2201      	movs	r2, #1
 8000e94:	4949      	ldr	r1, [pc, #292]	; (8000fbc <move+0x2cc>)
 8000e96:	484a      	ldr	r0, [pc, #296]	; (8000fc0 <move+0x2d0>)
 8000e98:	f002 fd4f 	bl	800393a <HAL_UART_Transmit>
	    	(*p_c)++;
 8000e9c:	4b40      	ldr	r3, [pc, #256]	; (8000fa0 <move+0x2b0>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	3201      	adds	r2, #1
 8000ea4:	601a      	str	r2, [r3, #0]
	    	set_cur_to(*p_r, *p_c);
 8000ea6:	4b3d      	ldr	r3, [pc, #244]	; (8000f9c <move+0x2ac>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b3c      	ldr	r3, [pc, #240]	; (8000fa0 <move+0x2b0>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	f7ff fb63 	bl	8000580 <set_cur_to>
	    	HAL_UART_Transmit(&huart2, charector, sizeof(charector), HAL_MAX_DELAY);
 8000eba:	4b3a      	ldr	r3, [pc, #232]	; (8000fa4 <move+0x2b4>)
 8000ebc:	6819      	ldr	r1, [r3, #0]
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec2:	2204      	movs	r2, #4
 8000ec4:	483e      	ldr	r0, [pc, #248]	; (8000fc0 <move+0x2d0>)
 8000ec6:	f002 fd38 	bl	800393a <HAL_UART_Transmit>
	    	break;
 8000eca:	e0ab      	b.n	8001024 <move+0x334>

	    case 115:// s
	    	if(!moveable(m_r+1, m_c)) break;
 8000ecc:	4b30      	ldr	r3, [pc, #192]	; (8000f90 <move+0x2a0>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	1c5a      	adds	r2, r3, #1
 8000ed2:	4b31      	ldr	r3, [pc, #196]	; (8000f98 <move+0x2a8>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4610      	mov	r0, r2
 8000eda:	f000 f8b9 	bl	8001050 <moveable>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	f000 809c 	beq.w	800101e <move+0x32e>
	    	if(collision(m_r+1, m_c,who)) {
 8000ee6:	4b2a      	ldr	r3, [pc, #168]	; (8000f90 <move+0x2a0>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	1c58      	adds	r0, r3, #1
 8000eec:	4b2a      	ldr	r3, [pc, #168]	; (8000f98 <move+0x2a8>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	683a      	ldr	r2, [r7, #0]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f000 fe76 	bl	8001be4 <collision>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <move+0x216>
	    		is_game_over = 1;
 8000efe:	4b2e      	ldr	r3, [pc, #184]	; (8000fb8 <move+0x2c8>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	601a      	str	r2, [r3, #0]
	    		break;
 8000f04:	e08e      	b.n	8001024 <move+0x334>
	    	}
	    	set_cur_to(m_r, m_c);
 8000f06:	4b22      	ldr	r3, [pc, #136]	; (8000f90 <move+0x2a0>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	4b23      	ldr	r3, [pc, #140]	; (8000f98 <move+0x2a8>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4610      	mov	r0, r2
 8000f12:	f7ff fb35 	bl	8000580 <set_cur_to>
	    	HAL_UART_Transmit(&huart2, clear_charector, sizeof(clear_charector), HAL_MAX_DELAY);
 8000f16:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	4927      	ldr	r1, [pc, #156]	; (8000fbc <move+0x2cc>)
 8000f1e:	4828      	ldr	r0, [pc, #160]	; (8000fc0 <move+0x2d0>)
 8000f20:	f002 fd0b 	bl	800393a <HAL_UART_Transmit>
	    	(*p_r)++;
 8000f24:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <move+0x2ac>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	3201      	adds	r2, #1
 8000f2c:	601a      	str	r2, [r3, #0]
	    	set_cur_to(*p_r, *p_c);
 8000f2e:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <move+0x2ac>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <move+0x2b0>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	f7ff fb1f 	bl	8000580 <set_cur_to>
	    	HAL_UART_Transmit(&huart2, charector, sizeof(charector), HAL_MAX_DELAY);
 8000f42:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <move+0x2b4>)
 8000f44:	6819      	ldr	r1, [r3, #0]
 8000f46:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4a:	2204      	movs	r2, #4
 8000f4c:	481c      	ldr	r0, [pc, #112]	; (8000fc0 <move+0x2d0>)
 8000f4e:	f002 fcf4 	bl	800393a <HAL_UART_Transmit>
	    	break;
 8000f52:	e067      	b.n	8001024 <move+0x334>

	    case 119:// w
	    	if(!moveable(m_r-1, m_c)) break;
 8000f54:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <move+0x2a0>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	1e5a      	subs	r2, r3, #1
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <move+0x2a8>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4610      	mov	r0, r2
 8000f62:	f000 f875 	bl	8001050 <moveable>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d05a      	beq.n	8001022 <move+0x332>
	    	if(collision(m_r-1, m_c,who)) {
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <move+0x2a0>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	1e58      	subs	r0, r3, #1
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <move+0x2a8>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	683a      	ldr	r2, [r7, #0]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f000 fe33 	bl	8001be4 <collision>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d01f      	beq.n	8000fc4 <move+0x2d4>
	    		is_game_over = 1;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <move+0x2c8>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	601a      	str	r2, [r3, #0]
	    		break;
 8000f8a:	e04b      	b.n	8001024 <move+0x334>
 8000f8c:	200012a8 	.word	0x200012a8
 8000f90:	200012a0 	.word	0x200012a0
 8000f94:	200012ac 	.word	0x200012ac
 8000f98:	2000136c 	.word	0x2000136c
 8000f9c:	20001320 	.word	0x20001320
 8000fa0:	20001298 	.word	0x20001298
 8000fa4:	20001370 	.word	0x20001370
 8000fa8:	20000534 	.word	0x20000534
 8000fac:	20001294 	.word	0x20001294
 8000fb0:	20001328 	.word	0x20001328
 8000fb4:	20000538 	.word	0x20000538
 8000fb8:	20001318 	.word	0x20001318
 8000fbc:	20000530 	.word	0x20000530
 8000fc0:	2000132c 	.word	0x2000132c
	    	}
	    	set_cur_to(m_r, m_c);
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <move+0x344>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <move+0x348>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4610      	mov	r0, r2
 8000fd0:	f7ff fad6 	bl	8000580 <set_cur_to>
	    	HAL_UART_Transmit(&huart2, clear_charector, sizeof(clear_charector), HAL_MAX_DELAY);
 8000fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd8:	2201      	movs	r2, #1
 8000fda:	4918      	ldr	r1, [pc, #96]	; (800103c <move+0x34c>)
 8000fdc:	4818      	ldr	r0, [pc, #96]	; (8001040 <move+0x350>)
 8000fde:	f002 fcac 	bl	800393a <HAL_UART_Transmit>
	    	(*p_r)--;
 8000fe2:	4b18      	ldr	r3, [pc, #96]	; (8001044 <move+0x354>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	3a01      	subs	r2, #1
 8000fea:	601a      	str	r2, [r3, #0]
	    	set_cur_to(*p_r, *p_c);
 8000fec:	4b15      	ldr	r3, [pc, #84]	; (8001044 <move+0x354>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <move+0x358>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4610      	mov	r0, r2
 8000ffc:	f7ff fac0 	bl	8000580 <set_cur_to>
	    	HAL_UART_Transmit(&huart2, charector, sizeof(charector), HAL_MAX_DELAY);
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <move+0x35c>)
 8001002:	6819      	ldr	r1, [r3, #0]
 8001004:	f04f 33ff 	mov.w	r3, #4294967295
 8001008:	2204      	movs	r2, #4
 800100a:	480d      	ldr	r0, [pc, #52]	; (8001040 <move+0x350>)
 800100c:	f002 fc95 	bl	800393a <HAL_UART_Transmit>
	    	break;
 8001010:	e008      	b.n	8001024 <move+0x334>

	    default:
	    	break;
 8001012:	bf00      	nop
 8001014:	e006      	b.n	8001024 <move+0x334>
	    	if(!moveable(m_r, m_c-1)) break;
 8001016:	bf00      	nop
 8001018:	e004      	b.n	8001024 <move+0x334>
	    	if(!moveable(m_r, m_c+1)) break;
 800101a:	bf00      	nop
 800101c:	e002      	b.n	8001024 <move+0x334>
	    	if(!moveable(m_r+1, m_c)) break;
 800101e:	bf00      	nop
 8001020:	e000      	b.n	8001024 <move+0x334>
	    	if(!moveable(m_r-1, m_c)) break;
 8001022:	bf00      	nop

	}
	set_cur_to(25, 80);
 8001024:	2150      	movs	r1, #80	; 0x50
 8001026:	2019      	movs	r0, #25
 8001028:	f7ff faaa 	bl	8000580 <set_cur_to>
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200012a0 	.word	0x200012a0
 8001038:	2000136c 	.word	0x2000136c
 800103c:	20000530 	.word	0x20000530
 8001040:	2000132c 	.word	0x2000132c
 8001044:	20001320 	.word	0x20001320
 8001048:	20001298 	.word	0x20001298
 800104c:	20001370 	.word	0x20001370

08001050 <moveable>:

int moveable(int row, int col) {
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
//	set_cur_to(1, 1);
//	HAL_UART_Transmit(&huart2, test_text, sizeof(test_text), HAL_MAX_DELAY);
//	HAL_Delay(1000);
//	set_cur_to(1, 30);
//	HAL_UART_Transmit(&huart2, clear_line, sizeof(clear_line), HAL_MAX_DELAY);
	if(map[((row-3)*85)+(col-3)] == 35) return 0;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	1eda      	subs	r2, r3, #3
 800105e:	4613      	mov	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	011a      	lsls	r2, r3, #4
 8001066:	441a      	add	r2, r3
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	3b03      	subs	r3, #3
 800106c:	4413      	add	r3, r2
 800106e:	4a06      	ldr	r2, [pc, #24]	; (8001088 <moveable+0x38>)
 8001070:	5cd3      	ldrb	r3, [r2, r3]
 8001072:	2b23      	cmp	r3, #35	; 0x23
 8001074:	d101      	bne.n	800107a <moveable+0x2a>
 8001076:	2300      	movs	r3, #0
 8001078:	e000      	b.n	800107c <moveable+0x2c>
	return 1;
 800107a:	2301      	movs	r3, #1
}
 800107c:	4618      	mov	r0, r3
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	2000057c 	.word	0x2000057c

0800108c <zombie_generate>:

void zombie_generate() {
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
	int z = zom_current-1;
 8001092:	4b23      	ldr	r3, [pc, #140]	; (8001120 <zombie_generate+0x94>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	3b01      	subs	r3, #1
 8001098:	607b      	str	r3, [r7, #4]
	if(z%2 == 1) {
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	bfb8      	it	lt
 80010a4:	425b      	neglt	r3, r3
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d11a      	bne.n	80010e0 <zombie_generate+0x54>
		zombie_pos[(z*3)] = 22;
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	4613      	mov	r3, r2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	4413      	add	r3, r2
 80010b2:	4a1c      	ldr	r2, [pc, #112]	; (8001124 <zombie_generate+0x98>)
 80010b4:	2116      	movs	r1, #22
 80010b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		zombie_pos[(z*3)+1] = 22;
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	4613      	mov	r3, r2
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	4413      	add	r3, r2
 80010c2:	3301      	adds	r3, #1
 80010c4:	4a17      	ldr	r2, [pc, #92]	; (8001124 <zombie_generate+0x98>)
 80010c6:	2116      	movs	r1, #22
 80010c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		zombie_pos[(z*3)+2] = 8;
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	4613      	mov	r3, r2
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	4413      	add	r3, r2
 80010d4:	3302      	adds	r3, #2
 80010d6:	4a13      	ldr	r2, [pc, #76]	; (8001124 <zombie_generate+0x98>)
 80010d8:	2108      	movs	r1, #8
 80010da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	} else {
		zombie_pos[(z*3)] = 4;
		zombie_pos[(z*3)+1] = 22;
		zombie_pos[(z*3)+2] = 5;
	}
}
 80010de:	e019      	b.n	8001114 <zombie_generate+0x88>
		zombie_pos[(z*3)] = 4;
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	4613      	mov	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	4a0e      	ldr	r2, [pc, #56]	; (8001124 <zombie_generate+0x98>)
 80010ea:	2104      	movs	r1, #4
 80010ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		zombie_pos[(z*3)+1] = 22;
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	4613      	mov	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	4413      	add	r3, r2
 80010f8:	3301      	adds	r3, #1
 80010fa:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <zombie_generate+0x98>)
 80010fc:	2116      	movs	r1, #22
 80010fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		zombie_pos[(z*3)+2] = 5;
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	4613      	mov	r3, r2
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	4413      	add	r3, r2
 800110a:	3302      	adds	r3, #2
 800110c:	4a05      	ldr	r2, [pc, #20]	; (8001124 <zombie_generate+0x98>)
 800110e:	2105      	movs	r1, #5
 8001110:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	200012b4 	.word	0x200012b4
 8001124:	2000053c 	.word	0x2000053c

08001128 <zombie_update>:

void zombie_update() {
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0

	if(zom_current <= scores/60 && zom_current < zom_max) {
 800112e:	4bb9      	ldr	r3, [pc, #740]	; (8001414 <zombie_update+0x2ec>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4ab9      	ldr	r2, [pc, #740]	; (8001418 <zombie_update+0x2f0>)
 8001134:	fb82 1203 	smull	r1, r2, r2, r3
 8001138:	441a      	add	r2, r3
 800113a:	1152      	asrs	r2, r2, #5
 800113c:	17db      	asrs	r3, r3, #31
 800113e:	1ad2      	subs	r2, r2, r3
 8001140:	4bb6      	ldr	r3, [pc, #728]	; (800141c <zombie_update+0x2f4>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	429a      	cmp	r2, r3
 8001146:	db0c      	blt.n	8001162 <zombie_update+0x3a>
 8001148:	4bb4      	ldr	r3, [pc, #720]	; (800141c <zombie_update+0x2f4>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4bb4      	ldr	r3, [pc, #720]	; (8001420 <zombie_update+0x2f8>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	429a      	cmp	r2, r3
 8001152:	da06      	bge.n	8001162 <zombie_update+0x3a>
		zom_current++;
 8001154:	4bb1      	ldr	r3, [pc, #708]	; (800141c <zombie_update+0x2f4>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	3301      	adds	r3, #1
 800115a:	4ab0      	ldr	r2, [pc, #704]	; (800141c <zombie_update+0x2f4>)
 800115c:	6013      	str	r3, [r2, #0]
		zombie_generate();
 800115e:	f7ff ff95 	bl	800108c <zombie_generate>

	}

	for(int z = 0; z < zom_current; z++) {
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	f000 bd27 	b.w	8001bb8 <zombie_update+0xa90>
		zom_r = &zombie_pos[(z*3)];
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	4613      	mov	r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	4413      	add	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4aab      	ldr	r2, [pc, #684]	; (8001424 <zombie_update+0x2fc>)
 8001176:	4413      	add	r3, r2
 8001178:	4aab      	ldr	r2, [pc, #684]	; (8001428 <zombie_update+0x300>)
 800117a:	6013      	str	r3, [r2, #0]
		zom_c = &zombie_pos[(z*3)+1];
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	4613      	mov	r3, r2
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	4413      	add	r3, r2
 8001184:	3301      	adds	r3, #1
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4aa6      	ldr	r2, [pc, #664]	; (8001424 <zombie_update+0x2fc>)
 800118a:	4413      	add	r3, r2
 800118c:	4aa7      	ldr	r2, [pc, #668]	; (800142c <zombie_update+0x304>)
 800118e:	6013      	str	r3, [r2, #0]
		zom_d = zombie_pos[(z*3)+2];
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	4613      	mov	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4413      	add	r3, r2
 8001198:	3302      	adds	r3, #2
 800119a:	4aa2      	ldr	r2, [pc, #648]	; (8001424 <zombie_update+0x2fc>)
 800119c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a0:	4aa3      	ldr	r2, [pc, #652]	; (8001430 <zombie_update+0x308>)
 80011a2:	6013      	str	r3, [r2, #0]
		switch (zom_d)
 80011a4:	4ba2      	ldr	r3, [pc, #648]	; (8001430 <zombie_update+0x308>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	3b04      	subs	r3, #4
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	f200 8500 	bhi.w	8001bb0 <zombie_update+0xa88>
 80011b0:	a201      	add	r2, pc, #4	; (adr r2, 80011b8 <zombie_update+0x90>)
 80011b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b6:	bf00      	nop
 80011b8:	0800145b 	.word	0x0800145b
 80011bc:	080016d5 	.word	0x080016d5
 80011c0:	0800194d 	.word	0x0800194d
 80011c4:	08001bb1 	.word	0x08001bb1
 80011c8:	080011cd 	.word	0x080011cd
		{
			case 8:
				if(moveable(*zom_r-1, *zom_c)) {
 80011cc:	4b96      	ldr	r3, [pc, #600]	; (8001428 <zombie_update+0x300>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	1e5a      	subs	r2, r3, #1
 80011d4:	4b95      	ldr	r3, [pc, #596]	; (800142c <zombie_update+0x304>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4619      	mov	r1, r3
 80011dc:	4610      	mov	r0, r2
 80011de:	f7ff ff37 	bl	8001050 <moveable>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f000 8093 	beq.w	8001310 <zombie_update+0x1e8>
					if(moveable(*zom_r, *zom_c-1)||moveable(*zom_r, *zom_c+1)) {
 80011ea:	4b8f      	ldr	r3, [pc, #572]	; (8001428 <zombie_update+0x300>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b8e      	ldr	r3, [pc, #568]	; (800142c <zombie_update+0x304>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	4619      	mov	r1, r3
 80011fa:	4610      	mov	r0, r2
 80011fc:	f7ff ff28 	bl	8001050 <moveable>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d10d      	bne.n	8001222 <zombie_update+0xfa>
 8001206:	4b88      	ldr	r3, [pc, #544]	; (8001428 <zombie_update+0x300>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b87      	ldr	r3, [pc, #540]	; (800142c <zombie_update+0x304>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	3301      	adds	r3, #1
 8001214:	4619      	mov	r1, r3
 8001216:	4610      	mov	r0, r2
 8001218:	f7ff ff1a 	bl	8001050 <moveable>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d070      	beq.n	8001304 <zombie_update+0x1dc>
						destination = rand()%3;
 8001222:	f003 facb 	bl	80047bc <rand>
 8001226:	4601      	mov	r1, r0
 8001228:	4b82      	ldr	r3, [pc, #520]	; (8001434 <zombie_update+0x30c>)
 800122a:	fb83 3201 	smull	r3, r2, r3, r1
 800122e:	17cb      	asrs	r3, r1, #31
 8001230:	1ad2      	subs	r2, r2, r3
 8001232:	4613      	mov	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4413      	add	r3, r2
 8001238:	1aca      	subs	r2, r1, r3
 800123a:	4b7f      	ldr	r3, [pc, #508]	; (8001438 <zombie_update+0x310>)
 800123c:	601a      	str	r2, [r3, #0]
						switch (destination)
 800123e:	4b7e      	ldr	r3, [pc, #504]	; (8001438 <zombie_update+0x310>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d009      	beq.n	800125a <zombie_update+0x132>
 8001246:	2b02      	cmp	r3, #2
 8001248:	d031      	beq.n	80012ae <zombie_update+0x186>
 800124a:	2b00      	cmp	r3, #0
 800124c:	d000      	beq.n	8001250 <zombie_update+0x128>
									move(97,1);
									zombie_pos[(z*3)+2] = 4;
								}
								break;
							default:
								break;
 800124e:	e058      	b.n	8001302 <zombie_update+0x1da>
								move(119,1);
 8001250:	2101      	movs	r1, #1
 8001252:	2077      	movs	r0, #119	; 0x77
 8001254:	f7ff fd4c 	bl	8000cf0 <move>
								break;
 8001258:	e053      	b.n	8001302 <zombie_update+0x1da>
								if(moveable(*zom_r, *zom_c-1)) {
 800125a:	4b73      	ldr	r3, [pc, #460]	; (8001428 <zombie_update+0x300>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4b72      	ldr	r3, [pc, #456]	; (800142c <zombie_update+0x304>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	3b01      	subs	r3, #1
 8001268:	4619      	mov	r1, r3
 800126a:	4610      	mov	r0, r2
 800126c:	f7ff fef0 	bl	8001050 <moveable>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d00d      	beq.n	8001292 <zombie_update+0x16a>
									move(97,1);
 8001276:	2101      	movs	r1, #1
 8001278:	2061      	movs	r0, #97	; 0x61
 800127a:	f7ff fd39 	bl	8000cf0 <move>
									zombie_pos[(z*3)+2] = 4;
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	4613      	mov	r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	4413      	add	r3, r2
 8001286:	3302      	adds	r3, #2
 8001288:	4a66      	ldr	r2, [pc, #408]	; (8001424 <zombie_update+0x2fc>)
 800128a:	2104      	movs	r1, #4
 800128c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								break;
 8001290:	e037      	b.n	8001302 <zombie_update+0x1da>
									move(100,1);
 8001292:	2101      	movs	r1, #1
 8001294:	2064      	movs	r0, #100	; 0x64
 8001296:	f7ff fd2b 	bl	8000cf0 <move>
									zombie_pos[(z*3)+2] = 6;
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	4613      	mov	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4413      	add	r3, r2
 80012a2:	3302      	adds	r3, #2
 80012a4:	4a5f      	ldr	r2, [pc, #380]	; (8001424 <zombie_update+0x2fc>)
 80012a6:	2106      	movs	r1, #6
 80012a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								break;
 80012ac:	e029      	b.n	8001302 <zombie_update+0x1da>
								if(moveable(*zom_r, *zom_c+1)) {
 80012ae:	4b5e      	ldr	r3, [pc, #376]	; (8001428 <zombie_update+0x300>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4b5d      	ldr	r3, [pc, #372]	; (800142c <zombie_update+0x304>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	3301      	adds	r3, #1
 80012bc:	4619      	mov	r1, r3
 80012be:	4610      	mov	r0, r2
 80012c0:	f7ff fec6 	bl	8001050 <moveable>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d00d      	beq.n	80012e6 <zombie_update+0x1be>
									move(100,1);
 80012ca:	2101      	movs	r1, #1
 80012cc:	2064      	movs	r0, #100	; 0x64
 80012ce:	f7ff fd0f 	bl	8000cf0 <move>
									zombie_pos[(z*3)+2] = 6;
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	4613      	mov	r3, r2
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	4413      	add	r3, r2
 80012da:	3302      	adds	r3, #2
 80012dc:	4a51      	ldr	r2, [pc, #324]	; (8001424 <zombie_update+0x2fc>)
 80012de:	2106      	movs	r1, #6
 80012e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								break;
 80012e4:	e00c      	b.n	8001300 <zombie_update+0x1d8>
									move(97,1);
 80012e6:	2101      	movs	r1, #1
 80012e8:	2061      	movs	r0, #97	; 0x61
 80012ea:	f7ff fd01 	bl	8000cf0 <move>
									zombie_pos[(z*3)+2] = 4;
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	4613      	mov	r3, r2
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	4413      	add	r3, r2
 80012f6:	3302      	adds	r3, #2
 80012f8:	4a4a      	ldr	r2, [pc, #296]	; (8001424 <zombie_update+0x2fc>)
 80012fa:	2104      	movs	r1, #4
 80012fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								break;
 8001300:	bf00      	nop
					if(moveable(*zom_r, *zom_c-1)||moveable(*zom_r, *zom_c+1)) {
 8001302:	e0a9      	b.n	8001458 <zombie_update+0x330>
						}
					} else {
						move(119,1);
 8001304:	2101      	movs	r1, #1
 8001306:	2077      	movs	r0, #119	; 0x77
 8001308:	f7ff fcf2 	bl	8000cf0 <move>
					} else {
						move(115,1);
						zombie_pos[(z*3)+2] = 5;
					}
				}
				break;
 800130c:	f000 bc51 	b.w	8001bb2 <zombie_update+0xa8a>
					if(moveable(*zom_r, *zom_c-1)||moveable(*zom_r, *zom_c+1)) {
 8001310:	4b45      	ldr	r3, [pc, #276]	; (8001428 <zombie_update+0x300>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	4b45      	ldr	r3, [pc, #276]	; (800142c <zombie_update+0x304>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	3b01      	subs	r3, #1
 800131e:	4619      	mov	r1, r3
 8001320:	4610      	mov	r0, r2
 8001322:	f7ff fe95 	bl	8001050 <moveable>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d10d      	bne.n	8001348 <zombie_update+0x220>
 800132c:	4b3e      	ldr	r3, [pc, #248]	; (8001428 <zombie_update+0x300>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	4b3e      	ldr	r3, [pc, #248]	; (800142c <zombie_update+0x304>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	3301      	adds	r3, #1
 800133a:	4619      	mov	r1, r3
 800133c:	4610      	mov	r0, r2
 800133e:	f7ff fe87 	bl	8001050 <moveable>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d079      	beq.n	800143c <zombie_update+0x314>
						destination = rand()%2;
 8001348:	f003 fa38 	bl	80047bc <rand>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	bfb8      	it	lt
 8001356:	425b      	neglt	r3, r3
 8001358:	4a37      	ldr	r2, [pc, #220]	; (8001438 <zombie_update+0x310>)
 800135a:	6013      	str	r3, [r2, #0]
						switch (destination)
 800135c:	4b36      	ldr	r3, [pc, #216]	; (8001438 <zombie_update+0x310>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d002      	beq.n	800136a <zombie_update+0x242>
 8001364:	2b01      	cmp	r3, #1
 8001366:	d02a      	beq.n	80013be <zombie_update+0x296>
								break;
 8001368:	e053      	b.n	8001412 <zombie_update+0x2ea>
								if(moveable(*zom_r, *zom_c+1)) {
 800136a:	4b2f      	ldr	r3, [pc, #188]	; (8001428 <zombie_update+0x300>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b2e      	ldr	r3, [pc, #184]	; (800142c <zombie_update+0x304>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	3301      	adds	r3, #1
 8001378:	4619      	mov	r1, r3
 800137a:	4610      	mov	r0, r2
 800137c:	f7ff fe68 	bl	8001050 <moveable>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d00d      	beq.n	80013a2 <zombie_update+0x27a>
									move(100,1);
 8001386:	2101      	movs	r1, #1
 8001388:	2064      	movs	r0, #100	; 0x64
 800138a:	f7ff fcb1 	bl	8000cf0 <move>
									zombie_pos[(z*3)+2] = 6;
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	4613      	mov	r3, r2
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	4413      	add	r3, r2
 8001396:	3302      	adds	r3, #2
 8001398:	4a22      	ldr	r2, [pc, #136]	; (8001424 <zombie_update+0x2fc>)
 800139a:	2106      	movs	r1, #6
 800139c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								break;
 80013a0:	e037      	b.n	8001412 <zombie_update+0x2ea>
									move(97,1);
 80013a2:	2101      	movs	r1, #1
 80013a4:	2061      	movs	r0, #97	; 0x61
 80013a6:	f7ff fca3 	bl	8000cf0 <move>
									zombie_pos[(z*3)+2] = 4;
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	4613      	mov	r3, r2
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4413      	add	r3, r2
 80013b2:	3302      	adds	r3, #2
 80013b4:	4a1b      	ldr	r2, [pc, #108]	; (8001424 <zombie_update+0x2fc>)
 80013b6:	2104      	movs	r1, #4
 80013b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								break;
 80013bc:	e029      	b.n	8001412 <zombie_update+0x2ea>
								if(moveable(*zom_r, *zom_c-1)) {
 80013be:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <zombie_update+0x300>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b19      	ldr	r3, [pc, #100]	; (800142c <zombie_update+0x304>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	4619      	mov	r1, r3
 80013ce:	4610      	mov	r0, r2
 80013d0:	f7ff fe3e 	bl	8001050 <moveable>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00d      	beq.n	80013f6 <zombie_update+0x2ce>
									move(97,1);
 80013da:	2101      	movs	r1, #1
 80013dc:	2061      	movs	r0, #97	; 0x61
 80013de:	f7ff fc87 	bl	8000cf0 <move>
									zombie_pos[(z*3)+2] = 4;
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	4613      	mov	r3, r2
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	4413      	add	r3, r2
 80013ea:	3302      	adds	r3, #2
 80013ec:	4a0d      	ldr	r2, [pc, #52]	; (8001424 <zombie_update+0x2fc>)
 80013ee:	2104      	movs	r1, #4
 80013f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								break;
 80013f4:	e00c      	b.n	8001410 <zombie_update+0x2e8>
									move(100,1);
 80013f6:	2101      	movs	r1, #1
 80013f8:	2064      	movs	r0, #100	; 0x64
 80013fa:	f7ff fc79 	bl	8000cf0 <move>
									zombie_pos[(z*3)+2] = 6;
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	4613      	mov	r3, r2
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	4413      	add	r3, r2
 8001406:	3302      	adds	r3, #2
 8001408:	4a06      	ldr	r2, [pc, #24]	; (8001424 <zombie_update+0x2fc>)
 800140a:	2106      	movs	r1, #6
 800140c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								break;
 8001410:	bf00      	nop
					if(moveable(*zom_r, *zom_c-1)||moveable(*zom_r, *zom_c+1)) {
 8001412:	e021      	b.n	8001458 <zombie_update+0x330>
 8001414:	2000129c 	.word	0x2000129c
 8001418:	88888889 	.word	0x88888889
 800141c:	200012b4 	.word	0x200012b4
 8001420:	20000578 	.word	0x20000578
 8001424:	2000053c 	.word	0x2000053c
 8001428:	200012a8 	.word	0x200012a8
 800142c:	200012ac 	.word	0x200012ac
 8001430:	2000131c 	.word	0x2000131c
 8001434:	55555556 	.word	0x55555556
 8001438:	200012a4 	.word	0x200012a4
						move(115,1);
 800143c:	2101      	movs	r1, #1
 800143e:	2073      	movs	r0, #115	; 0x73
 8001440:	f7ff fc56 	bl	8000cf0 <move>
						zombie_pos[(z*3)+2] = 5;
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	4613      	mov	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4413      	add	r3, r2
 800144c:	3302      	adds	r3, #2
 800144e:	4a9c      	ldr	r2, [pc, #624]	; (80016c0 <zombie_update+0x598>)
 8001450:	2105      	movs	r1, #5
 8001452:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8001456:	e3ac      	b.n	8001bb2 <zombie_update+0xa8a>
 8001458:	e3ab      	b.n	8001bb2 <zombie_update+0xa8a>
			case 4:
				if(moveable(*zom_r, *zom_c-1)) {
 800145a:	4b9a      	ldr	r3, [pc, #616]	; (80016c4 <zombie_update+0x59c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b99      	ldr	r3, [pc, #612]	; (80016c8 <zombie_update+0x5a0>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	3b01      	subs	r3, #1
 8001468:	4619      	mov	r1, r3
 800146a:	4610      	mov	r0, r2
 800146c:	f7ff fdf0 	bl	8001050 <moveable>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 8092 	beq.w	800159c <zombie_update+0x474>
					if(moveable(*zom_r-1, *zom_c)||moveable(*zom_r+1, *zom_c)) {
 8001478:	4b92      	ldr	r3, [pc, #584]	; (80016c4 <zombie_update+0x59c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	1e5a      	subs	r2, r3, #1
 8001480:	4b91      	ldr	r3, [pc, #580]	; (80016c8 <zombie_update+0x5a0>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4619      	mov	r1, r3
 8001488:	4610      	mov	r0, r2
 800148a:	f7ff fde1 	bl	8001050 <moveable>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d10d      	bne.n	80014b0 <zombie_update+0x388>
 8001494:	4b8b      	ldr	r3, [pc, #556]	; (80016c4 <zombie_update+0x59c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	4b8a      	ldr	r3, [pc, #552]	; (80016c8 <zombie_update+0x5a0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4619      	mov	r1, r3
 80014a4:	4610      	mov	r0, r2
 80014a6:	f7ff fdd3 	bl	8001050 <moveable>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d070      	beq.n	8001592 <zombie_update+0x46a>
						destination = rand()%3;
 80014b0:	f003 f984 	bl	80047bc <rand>
 80014b4:	4601      	mov	r1, r0
 80014b6:	4b85      	ldr	r3, [pc, #532]	; (80016cc <zombie_update+0x5a4>)
 80014b8:	fb83 3201 	smull	r3, r2, r3, r1
 80014bc:	17cb      	asrs	r3, r1, #31
 80014be:	1ad2      	subs	r2, r2, r3
 80014c0:	4613      	mov	r3, r2
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	4413      	add	r3, r2
 80014c6:	1aca      	subs	r2, r1, r3
 80014c8:	4b81      	ldr	r3, [pc, #516]	; (80016d0 <zombie_update+0x5a8>)
 80014ca:	601a      	str	r2, [r3, #0]
						switch (destination)
 80014cc:	4b80      	ldr	r3, [pc, #512]	; (80016d0 <zombie_update+0x5a8>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d009      	beq.n	80014e8 <zombie_update+0x3c0>
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d031      	beq.n	800153c <zombie_update+0x414>
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d000      	beq.n	80014de <zombie_update+0x3b6>
									move(119,1);
									zombie_pos[(z*3)+2] = 8;
								}
								break;
							default:
								break;
 80014dc:	e058      	b.n	8001590 <zombie_update+0x468>
								move(97,1);
 80014de:	2101      	movs	r1, #1
 80014e0:	2061      	movs	r0, #97	; 0x61
 80014e2:	f7ff fc05 	bl	8000cf0 <move>
								break;
 80014e6:	e053      	b.n	8001590 <zombie_update+0x468>
								if(moveable(*zom_r-1, *zom_c)) {
 80014e8:	4b76      	ldr	r3, [pc, #472]	; (80016c4 <zombie_update+0x59c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	1e5a      	subs	r2, r3, #1
 80014f0:	4b75      	ldr	r3, [pc, #468]	; (80016c8 <zombie_update+0x5a0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4619      	mov	r1, r3
 80014f8:	4610      	mov	r0, r2
 80014fa:	f7ff fda9 	bl	8001050 <moveable>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d00d      	beq.n	8001520 <zombie_update+0x3f8>
									move(119,1);
 8001504:	2101      	movs	r1, #1
 8001506:	2077      	movs	r0, #119	; 0x77
 8001508:	f7ff fbf2 	bl	8000cf0 <move>
									zombie_pos[(z*3)+2] = 8;
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4413      	add	r3, r2
 8001514:	3302      	adds	r3, #2
 8001516:	4a6a      	ldr	r2, [pc, #424]	; (80016c0 <zombie_update+0x598>)
 8001518:	2108      	movs	r1, #8
 800151a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								break;
 800151e:	e037      	b.n	8001590 <zombie_update+0x468>
									move(115,1);
 8001520:	2101      	movs	r1, #1
 8001522:	2073      	movs	r0, #115	; 0x73
 8001524:	f7ff fbe4 	bl	8000cf0 <move>
									zombie_pos[(z*3)+2] = 5;
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	4613      	mov	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	4413      	add	r3, r2
 8001530:	3302      	adds	r3, #2
 8001532:	4a63      	ldr	r2, [pc, #396]	; (80016c0 <zombie_update+0x598>)
 8001534:	2105      	movs	r1, #5
 8001536:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								break;
 800153a:	e029      	b.n	8001590 <zombie_update+0x468>
								if(moveable(*zom_r+1, *zom_c)) {
 800153c:	4b61      	ldr	r3, [pc, #388]	; (80016c4 <zombie_update+0x59c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	1c5a      	adds	r2, r3, #1
 8001544:	4b60      	ldr	r3, [pc, #384]	; (80016c8 <zombie_update+0x5a0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4619      	mov	r1, r3
 800154c:	4610      	mov	r0, r2
 800154e:	f7ff fd7f 	bl	8001050 <moveable>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d00d      	beq.n	8001574 <zombie_update+0x44c>
									move(115,1);
 8001558:	2101      	movs	r1, #1
 800155a:	2073      	movs	r0, #115	; 0x73
 800155c:	f7ff fbc8 	bl	8000cf0 <move>
									zombie_pos[(z*3)+2] = 5;
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	4413      	add	r3, r2
 8001568:	3302      	adds	r3, #2
 800156a:	4a55      	ldr	r2, [pc, #340]	; (80016c0 <zombie_update+0x598>)
 800156c:	2105      	movs	r1, #5
 800156e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								break;
 8001572:	e00c      	b.n	800158e <zombie_update+0x466>
									move(119,1);
 8001574:	2101      	movs	r1, #1
 8001576:	2077      	movs	r0, #119	; 0x77
 8001578:	f7ff fbba 	bl	8000cf0 <move>
									zombie_pos[(z*3)+2] = 8;
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	4613      	mov	r3, r2
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	4413      	add	r3, r2
 8001584:	3302      	adds	r3, #2
 8001586:	4a4e      	ldr	r2, [pc, #312]	; (80016c0 <zombie_update+0x598>)
 8001588:	2108      	movs	r1, #8
 800158a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								break;
 800158e:	bf00      	nop
					if(moveable(*zom_r-1, *zom_c)||moveable(*zom_r+1, *zom_c)) {
 8001590:	e094      	b.n	80016bc <zombie_update+0x594>
						}
					} else {
						move(97,1);
 8001592:	2101      	movs	r1, #1
 8001594:	2061      	movs	r0, #97	; 0x61
 8001596:	f7ff fbab 	bl	8000cf0 <move>
					} else {
						move(100,1);
						zombie_pos[(z*3)+2] = 6;
					}
				}
				break;
 800159a:	e30a      	b.n	8001bb2 <zombie_update+0xa8a>
					if(moveable(*zom_r-1, *zom_c)||moveable(*zom_r+1, *zom_c)) {
 800159c:	4b49      	ldr	r3, [pc, #292]	; (80016c4 <zombie_update+0x59c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	1e5a      	subs	r2, r3, #1
 80015a4:	4b48      	ldr	r3, [pc, #288]	; (80016c8 <zombie_update+0x5a0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4619      	mov	r1, r3
 80015ac:	4610      	mov	r0, r2
 80015ae:	f7ff fd4f 	bl	8001050 <moveable>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d10d      	bne.n	80015d4 <zombie_update+0x4ac>
 80015b8:	4b42      	ldr	r3, [pc, #264]	; (80016c4 <zombie_update+0x59c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	4b41      	ldr	r3, [pc, #260]	; (80016c8 <zombie_update+0x5a0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4619      	mov	r1, r3
 80015c8:	4610      	mov	r0, r2
 80015ca:	f7ff fd41 	bl	8001050 <moveable>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d065      	beq.n	80016a0 <zombie_update+0x578>
						destination = rand()%2;
 80015d4:	f003 f8f2 	bl	80047bc <rand>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	bfb8      	it	lt
 80015e2:	425b      	neglt	r3, r3
 80015e4:	4a3a      	ldr	r2, [pc, #232]	; (80016d0 <zombie_update+0x5a8>)
 80015e6:	6013      	str	r3, [r2, #0]
						switch (destination)
 80015e8:	4b39      	ldr	r3, [pc, #228]	; (80016d0 <zombie_update+0x5a8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d002      	beq.n	80015f6 <zombie_update+0x4ce>
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d02a      	beq.n	800164a <zombie_update+0x522>
								break;
 80015f4:	e053      	b.n	800169e <zombie_update+0x576>
								if(moveable(*zom_r-1, *zom_c)) {
 80015f6:	4b33      	ldr	r3, [pc, #204]	; (80016c4 <zombie_update+0x59c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	1e5a      	subs	r2, r3, #1
 80015fe:	4b32      	ldr	r3, [pc, #200]	; (80016c8 <zombie_update+0x5a0>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4619      	mov	r1, r3
 8001606:	4610      	mov	r0, r2
 8001608:	f7ff fd22 	bl	8001050 <moveable>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00d      	beq.n	800162e <zombie_update+0x506>
									move(119,1);
 8001612:	2101      	movs	r1, #1
 8001614:	2077      	movs	r0, #119	; 0x77
 8001616:	f7ff fb6b 	bl	8000cf0 <move>
									zombie_pos[(z*3)+2] = 8;
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	4413      	add	r3, r2
 8001622:	3302      	adds	r3, #2
 8001624:	4a26      	ldr	r2, [pc, #152]	; (80016c0 <zombie_update+0x598>)
 8001626:	2108      	movs	r1, #8
 8001628:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								break;
 800162c:	e037      	b.n	800169e <zombie_update+0x576>
									move(115,1);
 800162e:	2101      	movs	r1, #1
 8001630:	2073      	movs	r0, #115	; 0x73
 8001632:	f7ff fb5d 	bl	8000cf0 <move>
									zombie_pos[(z*3)+2] = 5;
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	4413      	add	r3, r2
 800163e:	3302      	adds	r3, #2
 8001640:	4a1f      	ldr	r2, [pc, #124]	; (80016c0 <zombie_update+0x598>)
 8001642:	2105      	movs	r1, #5
 8001644:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								break;
 8001648:	e029      	b.n	800169e <zombie_update+0x576>
								if(moveable(*zom_r+1, *zom_c)) {
 800164a:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <zombie_update+0x59c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	1c5a      	adds	r2, r3, #1
 8001652:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <zombie_update+0x5a0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4619      	mov	r1, r3
 800165a:	4610      	mov	r0, r2
 800165c:	f7ff fcf8 	bl	8001050 <moveable>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00d      	beq.n	8001682 <zombie_update+0x55a>
									move(115,1);
 8001666:	2101      	movs	r1, #1
 8001668:	2073      	movs	r0, #115	; 0x73
 800166a:	f7ff fb41 	bl	8000cf0 <move>
									zombie_pos[(z*3)+2] = 5;
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	4413      	add	r3, r2
 8001676:	3302      	adds	r3, #2
 8001678:	4a11      	ldr	r2, [pc, #68]	; (80016c0 <zombie_update+0x598>)
 800167a:	2105      	movs	r1, #5
 800167c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								break;
 8001680:	e00c      	b.n	800169c <zombie_update+0x574>
									move(119,1);
 8001682:	2101      	movs	r1, #1
 8001684:	2077      	movs	r0, #119	; 0x77
 8001686:	f7ff fb33 	bl	8000cf0 <move>
									zombie_pos[(z*3)+2] = 8;
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	4613      	mov	r3, r2
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	4413      	add	r3, r2
 8001692:	3302      	adds	r3, #2
 8001694:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <zombie_update+0x598>)
 8001696:	2108      	movs	r1, #8
 8001698:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								break;
 800169c:	bf00      	nop
					if(moveable(*zom_r-1, *zom_c)||moveable(*zom_r+1, *zom_c)) {
 800169e:	e00d      	b.n	80016bc <zombie_update+0x594>
						move(100,1);
 80016a0:	2101      	movs	r1, #1
 80016a2:	2064      	movs	r0, #100	; 0x64
 80016a4:	f7ff fb24 	bl	8000cf0 <move>
						zombie_pos[(z*3)+2] = 6;
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4413      	add	r3, r2
 80016b0:	3302      	adds	r3, #2
 80016b2:	4a03      	ldr	r2, [pc, #12]	; (80016c0 <zombie_update+0x598>)
 80016b4:	2106      	movs	r1, #6
 80016b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 80016ba:	e27a      	b.n	8001bb2 <zombie_update+0xa8a>
 80016bc:	e279      	b.n	8001bb2 <zombie_update+0xa8a>
 80016be:	bf00      	nop
 80016c0:	2000053c 	.word	0x2000053c
 80016c4:	200012a8 	.word	0x200012a8
 80016c8:	200012ac 	.word	0x200012ac
 80016cc:	55555556 	.word	0x55555556
 80016d0:	200012a4 	.word	0x200012a4
			case 5:
				if(moveable(*zom_r+1, *zom_c)) {
 80016d4:	4b98      	ldr	r3, [pc, #608]	; (8001938 <zombie_update+0x810>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	4b97      	ldr	r3, [pc, #604]	; (800193c <zombie_update+0x814>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4619      	mov	r1, r3
 80016e4:	4610      	mov	r0, r2
 80016e6:	f7ff fcb3 	bl	8001050 <moveable>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 8092 	beq.w	8001816 <zombie_update+0x6ee>
					if(moveable(*zom_r, *zom_c-1)||moveable(*zom_r, *zom_c+1)) {
 80016f2:	4b91      	ldr	r3, [pc, #580]	; (8001938 <zombie_update+0x810>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b90      	ldr	r3, [pc, #576]	; (800193c <zombie_update+0x814>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	3b01      	subs	r3, #1
 8001700:	4619      	mov	r1, r3
 8001702:	4610      	mov	r0, r2
 8001704:	f7ff fca4 	bl	8001050 <moveable>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10d      	bne.n	800172a <zombie_update+0x602>
 800170e:	4b8a      	ldr	r3, [pc, #552]	; (8001938 <zombie_update+0x810>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b89      	ldr	r3, [pc, #548]	; (800193c <zombie_update+0x814>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	3301      	adds	r3, #1
 800171c:	4619      	mov	r1, r3
 800171e:	4610      	mov	r0, r2
 8001720:	f7ff fc96 	bl	8001050 <moveable>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d070      	beq.n	800180c <zombie_update+0x6e4>
						destination = rand()%3;
 800172a:	f003 f847 	bl	80047bc <rand>
 800172e:	4601      	mov	r1, r0
 8001730:	4b83      	ldr	r3, [pc, #524]	; (8001940 <zombie_update+0x818>)
 8001732:	fb83 3201 	smull	r3, r2, r3, r1
 8001736:	17cb      	asrs	r3, r1, #31
 8001738:	1ad2      	subs	r2, r2, r3
 800173a:	4613      	mov	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	4413      	add	r3, r2
 8001740:	1aca      	subs	r2, r1, r3
 8001742:	4b80      	ldr	r3, [pc, #512]	; (8001944 <zombie_update+0x81c>)
 8001744:	601a      	str	r2, [r3, #0]
						switch (destination)
 8001746:	4b7f      	ldr	r3, [pc, #508]	; (8001944 <zombie_update+0x81c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d009      	beq.n	8001762 <zombie_update+0x63a>
 800174e:	2b02      	cmp	r3, #2
 8001750:	d031      	beq.n	80017b6 <zombie_update+0x68e>
 8001752:	2b00      	cmp	r3, #0
 8001754:	d000      	beq.n	8001758 <zombie_update+0x630>
									move(97,1);
									zombie_pos[(z*3)+2] = 4;
								}
								break;
							default:
								break;
 8001756:	e058      	b.n	800180a <zombie_update+0x6e2>
								move(115,1);
 8001758:	2101      	movs	r1, #1
 800175a:	2073      	movs	r0, #115	; 0x73
 800175c:	f7ff fac8 	bl	8000cf0 <move>
								break;
 8001760:	e053      	b.n	800180a <zombie_update+0x6e2>
								if(moveable(*zom_r, *zom_c-1)) {
 8001762:	4b75      	ldr	r3, [pc, #468]	; (8001938 <zombie_update+0x810>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b74      	ldr	r3, [pc, #464]	; (800193c <zombie_update+0x814>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	3b01      	subs	r3, #1
 8001770:	4619      	mov	r1, r3
 8001772:	4610      	mov	r0, r2
 8001774:	f7ff fc6c 	bl	8001050 <moveable>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00d      	beq.n	800179a <zombie_update+0x672>
									move(97,1);
 800177e:	2101      	movs	r1, #1
 8001780:	2061      	movs	r0, #97	; 0x61
 8001782:	f7ff fab5 	bl	8000cf0 <move>
									zombie_pos[(z*3)+2] = 4;
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	4613      	mov	r3, r2
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	4413      	add	r3, r2
 800178e:	3302      	adds	r3, #2
 8001790:	4a6d      	ldr	r2, [pc, #436]	; (8001948 <zombie_update+0x820>)
 8001792:	2104      	movs	r1, #4
 8001794:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								break;
 8001798:	e037      	b.n	800180a <zombie_update+0x6e2>
									move(100,1);
 800179a:	2101      	movs	r1, #1
 800179c:	2064      	movs	r0, #100	; 0x64
 800179e:	f7ff faa7 	bl	8000cf0 <move>
									zombie_pos[(z*3)+2] = 6;
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	4613      	mov	r3, r2
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	4413      	add	r3, r2
 80017aa:	3302      	adds	r3, #2
 80017ac:	4a66      	ldr	r2, [pc, #408]	; (8001948 <zombie_update+0x820>)
 80017ae:	2106      	movs	r1, #6
 80017b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								break;
 80017b4:	e029      	b.n	800180a <zombie_update+0x6e2>
								if(moveable(*zom_r, *zom_c+1)) {
 80017b6:	4b60      	ldr	r3, [pc, #384]	; (8001938 <zombie_update+0x810>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b5f      	ldr	r3, [pc, #380]	; (800193c <zombie_update+0x814>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	3301      	adds	r3, #1
 80017c4:	4619      	mov	r1, r3
 80017c6:	4610      	mov	r0, r2
 80017c8:	f7ff fc42 	bl	8001050 <moveable>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00d      	beq.n	80017ee <zombie_update+0x6c6>
									move(100,1);
 80017d2:	2101      	movs	r1, #1
 80017d4:	2064      	movs	r0, #100	; 0x64
 80017d6:	f7ff fa8b 	bl	8000cf0 <move>
									zombie_pos[(z*3)+2] = 6;
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	4413      	add	r3, r2
 80017e2:	3302      	adds	r3, #2
 80017e4:	4a58      	ldr	r2, [pc, #352]	; (8001948 <zombie_update+0x820>)
 80017e6:	2106      	movs	r1, #6
 80017e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								break;
 80017ec:	e00c      	b.n	8001808 <zombie_update+0x6e0>
									move(97,1);
 80017ee:	2101      	movs	r1, #1
 80017f0:	2061      	movs	r0, #97	; 0x61
 80017f2:	f7ff fa7d 	bl	8000cf0 <move>
									zombie_pos[(z*3)+2] = 4;
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	4613      	mov	r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4413      	add	r3, r2
 80017fe:	3302      	adds	r3, #2
 8001800:	4a51      	ldr	r2, [pc, #324]	; (8001948 <zombie_update+0x820>)
 8001802:	2104      	movs	r1, #4
 8001804:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								break;
 8001808:	bf00      	nop
					if(moveable(*zom_r, *zom_c-1)||moveable(*zom_r, *zom_c+1)) {
 800180a:	e094      	b.n	8001936 <zombie_update+0x80e>
						}
					} else {
						move(115,1);
 800180c:	2101      	movs	r1, #1
 800180e:	2073      	movs	r0, #115	; 0x73
 8001810:	f7ff fa6e 	bl	8000cf0 <move>
					} else {
						move(119,1);
						zombie_pos[(z*3)+2] = 8;
					}
				}
				break;
 8001814:	e1cd      	b.n	8001bb2 <zombie_update+0xa8a>
					if(moveable(*zom_r, *zom_c-1)||moveable(*zom_r, *zom_c+1)) {
 8001816:	4b48      	ldr	r3, [pc, #288]	; (8001938 <zombie_update+0x810>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b47      	ldr	r3, [pc, #284]	; (800193c <zombie_update+0x814>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	3b01      	subs	r3, #1
 8001824:	4619      	mov	r1, r3
 8001826:	4610      	mov	r0, r2
 8001828:	f7ff fc12 	bl	8001050 <moveable>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10d      	bne.n	800184e <zombie_update+0x726>
 8001832:	4b41      	ldr	r3, [pc, #260]	; (8001938 <zombie_update+0x810>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b40      	ldr	r3, [pc, #256]	; (800193c <zombie_update+0x814>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	3301      	adds	r3, #1
 8001840:	4619      	mov	r1, r3
 8001842:	4610      	mov	r0, r2
 8001844:	f7ff fc04 	bl	8001050 <moveable>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d065      	beq.n	800191a <zombie_update+0x7f2>
						destination = rand()%2;
 800184e:	f002 ffb5 	bl	80047bc <rand>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	bfb8      	it	lt
 800185c:	425b      	neglt	r3, r3
 800185e:	4a39      	ldr	r2, [pc, #228]	; (8001944 <zombie_update+0x81c>)
 8001860:	6013      	str	r3, [r2, #0]
						switch (destination)
 8001862:	4b38      	ldr	r3, [pc, #224]	; (8001944 <zombie_update+0x81c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d002      	beq.n	8001870 <zombie_update+0x748>
 800186a:	2b01      	cmp	r3, #1
 800186c:	d02a      	beq.n	80018c4 <zombie_update+0x79c>
								break;
 800186e:	e053      	b.n	8001918 <zombie_update+0x7f0>
								if(moveable(*zom_r, *zom_c+1)) {
 8001870:	4b31      	ldr	r3, [pc, #196]	; (8001938 <zombie_update+0x810>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	4b31      	ldr	r3, [pc, #196]	; (800193c <zombie_update+0x814>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	3301      	adds	r3, #1
 800187e:	4619      	mov	r1, r3
 8001880:	4610      	mov	r0, r2
 8001882:	f7ff fbe5 	bl	8001050 <moveable>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00d      	beq.n	80018a8 <zombie_update+0x780>
									move(100,1);
 800188c:	2101      	movs	r1, #1
 800188e:	2064      	movs	r0, #100	; 0x64
 8001890:	f7ff fa2e 	bl	8000cf0 <move>
									zombie_pos[(z*3)+2] = 6;
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	4613      	mov	r3, r2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4413      	add	r3, r2
 800189c:	3302      	adds	r3, #2
 800189e:	4a2a      	ldr	r2, [pc, #168]	; (8001948 <zombie_update+0x820>)
 80018a0:	2106      	movs	r1, #6
 80018a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								break;
 80018a6:	e037      	b.n	8001918 <zombie_update+0x7f0>
									move(97,1);
 80018a8:	2101      	movs	r1, #1
 80018aa:	2061      	movs	r0, #97	; 0x61
 80018ac:	f7ff fa20 	bl	8000cf0 <move>
									zombie_pos[(z*3)+2] = 4;
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4413      	add	r3, r2
 80018b8:	3302      	adds	r3, #2
 80018ba:	4a23      	ldr	r2, [pc, #140]	; (8001948 <zombie_update+0x820>)
 80018bc:	2104      	movs	r1, #4
 80018be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								break;
 80018c2:	e029      	b.n	8001918 <zombie_update+0x7f0>
								if(moveable(*zom_r, *zom_c-1)) {
 80018c4:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <zombie_update+0x810>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	4b1c      	ldr	r3, [pc, #112]	; (800193c <zombie_update+0x814>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	4619      	mov	r1, r3
 80018d4:	4610      	mov	r0, r2
 80018d6:	f7ff fbbb 	bl	8001050 <moveable>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d00d      	beq.n	80018fc <zombie_update+0x7d4>
									move(97,1);
 80018e0:	2101      	movs	r1, #1
 80018e2:	2061      	movs	r0, #97	; 0x61
 80018e4:	f7ff fa04 	bl	8000cf0 <move>
									zombie_pos[(z*3)+2] = 4;
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	4413      	add	r3, r2
 80018f0:	3302      	adds	r3, #2
 80018f2:	4a15      	ldr	r2, [pc, #84]	; (8001948 <zombie_update+0x820>)
 80018f4:	2104      	movs	r1, #4
 80018f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								break;
 80018fa:	e00c      	b.n	8001916 <zombie_update+0x7ee>
									move(100,1);
 80018fc:	2101      	movs	r1, #1
 80018fe:	2064      	movs	r0, #100	; 0x64
 8001900:	f7ff f9f6 	bl	8000cf0 <move>
									zombie_pos[(z*3)+2] = 6;
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4413      	add	r3, r2
 800190c:	3302      	adds	r3, #2
 800190e:	4a0e      	ldr	r2, [pc, #56]	; (8001948 <zombie_update+0x820>)
 8001910:	2106      	movs	r1, #6
 8001912:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								break;
 8001916:	bf00      	nop
					if(moveable(*zom_r, *zom_c-1)||moveable(*zom_r, *zom_c+1)) {
 8001918:	e00d      	b.n	8001936 <zombie_update+0x80e>
						move(119,1);
 800191a:	2101      	movs	r1, #1
 800191c:	2077      	movs	r0, #119	; 0x77
 800191e:	f7ff f9e7 	bl	8000cf0 <move>
						zombie_pos[(z*3)+2] = 8;
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4413      	add	r3, r2
 800192a:	3302      	adds	r3, #2
 800192c:	4a06      	ldr	r2, [pc, #24]	; (8001948 <zombie_update+0x820>)
 800192e:	2108      	movs	r1, #8
 8001930:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8001934:	e13d      	b.n	8001bb2 <zombie_update+0xa8a>
 8001936:	e13c      	b.n	8001bb2 <zombie_update+0xa8a>
 8001938:	200012a8 	.word	0x200012a8
 800193c:	200012ac 	.word	0x200012ac
 8001940:	55555556 	.word	0x55555556
 8001944:	200012a4 	.word	0x200012a4
 8001948:	2000053c 	.word	0x2000053c
			case 6:
				if(moveable(*zom_r, *zom_c+1)) {
 800194c:	4b9f      	ldr	r3, [pc, #636]	; (8001bcc <zombie_update+0xaa4>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	4b9f      	ldr	r3, [pc, #636]	; (8001bd0 <zombie_update+0xaa8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	3301      	adds	r3, #1
 800195a:	4619      	mov	r1, r3
 800195c:	4610      	mov	r0, r2
 800195e:	f7ff fb77 	bl	8001050 <moveable>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 8092 	beq.w	8001a8e <zombie_update+0x966>
					if(moveable(*zom_r-1, *zom_c)||moveable(*zom_r+1, *zom_c)) {
 800196a:	4b98      	ldr	r3, [pc, #608]	; (8001bcc <zombie_update+0xaa4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	1e5a      	subs	r2, r3, #1
 8001972:	4b97      	ldr	r3, [pc, #604]	; (8001bd0 <zombie_update+0xaa8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4619      	mov	r1, r3
 800197a:	4610      	mov	r0, r2
 800197c:	f7ff fb68 	bl	8001050 <moveable>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10d      	bne.n	80019a2 <zombie_update+0x87a>
 8001986:	4b91      	ldr	r3, [pc, #580]	; (8001bcc <zombie_update+0xaa4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	1c5a      	adds	r2, r3, #1
 800198e:	4b90      	ldr	r3, [pc, #576]	; (8001bd0 <zombie_update+0xaa8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4619      	mov	r1, r3
 8001996:	4610      	mov	r0, r2
 8001998:	f7ff fb5a 	bl	8001050 <moveable>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d070      	beq.n	8001a84 <zombie_update+0x95c>
						destination = rand()%3;
 80019a2:	f002 ff0b 	bl	80047bc <rand>
 80019a6:	4601      	mov	r1, r0
 80019a8:	4b8a      	ldr	r3, [pc, #552]	; (8001bd4 <zombie_update+0xaac>)
 80019aa:	fb83 3201 	smull	r3, r2, r3, r1
 80019ae:	17cb      	asrs	r3, r1, #31
 80019b0:	1ad2      	subs	r2, r2, r3
 80019b2:	4613      	mov	r3, r2
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	4413      	add	r3, r2
 80019b8:	1aca      	subs	r2, r1, r3
 80019ba:	4b87      	ldr	r3, [pc, #540]	; (8001bd8 <zombie_update+0xab0>)
 80019bc:	601a      	str	r2, [r3, #0]
						switch (destination)
 80019be:	4b86      	ldr	r3, [pc, #536]	; (8001bd8 <zombie_update+0xab0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d009      	beq.n	80019da <zombie_update+0x8b2>
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d031      	beq.n	8001a2e <zombie_update+0x906>
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d000      	beq.n	80019d0 <zombie_update+0x8a8>
									move(119,1);
									zombie_pos[(z*3)+2] = 8;
								}
								break;
							default:
								break;
 80019ce:	e058      	b.n	8001a82 <zombie_update+0x95a>
								move(100,1);
 80019d0:	2101      	movs	r1, #1
 80019d2:	2064      	movs	r0, #100	; 0x64
 80019d4:	f7ff f98c 	bl	8000cf0 <move>
								break;
 80019d8:	e053      	b.n	8001a82 <zombie_update+0x95a>
								if(moveable(*zom_r-1, *zom_c)) {
 80019da:	4b7c      	ldr	r3, [pc, #496]	; (8001bcc <zombie_update+0xaa4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	1e5a      	subs	r2, r3, #1
 80019e2:	4b7b      	ldr	r3, [pc, #492]	; (8001bd0 <zombie_update+0xaa8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4619      	mov	r1, r3
 80019ea:	4610      	mov	r0, r2
 80019ec:	f7ff fb30 	bl	8001050 <moveable>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d00d      	beq.n	8001a12 <zombie_update+0x8ea>
									move(119,1);
 80019f6:	2101      	movs	r1, #1
 80019f8:	2077      	movs	r0, #119	; 0x77
 80019fa:	f7ff f979 	bl	8000cf0 <move>
									zombie_pos[(z*3)+2] = 8;
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	4413      	add	r3, r2
 8001a06:	3302      	adds	r3, #2
 8001a08:	4a74      	ldr	r2, [pc, #464]	; (8001bdc <zombie_update+0xab4>)
 8001a0a:	2108      	movs	r1, #8
 8001a0c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								break;
 8001a10:	e037      	b.n	8001a82 <zombie_update+0x95a>
									move(115,1);
 8001a12:	2101      	movs	r1, #1
 8001a14:	2073      	movs	r0, #115	; 0x73
 8001a16:	f7ff f96b 	bl	8000cf0 <move>
									zombie_pos[(z*3)+2] = 5;
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	4413      	add	r3, r2
 8001a22:	3302      	adds	r3, #2
 8001a24:	4a6d      	ldr	r2, [pc, #436]	; (8001bdc <zombie_update+0xab4>)
 8001a26:	2105      	movs	r1, #5
 8001a28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								break;
 8001a2c:	e029      	b.n	8001a82 <zombie_update+0x95a>
								if(moveable(*zom_r+1, *zom_c)) {
 8001a2e:	4b67      	ldr	r3, [pc, #412]	; (8001bcc <zombie_update+0xaa4>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	1c5a      	adds	r2, r3, #1
 8001a36:	4b66      	ldr	r3, [pc, #408]	; (8001bd0 <zombie_update+0xaa8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4610      	mov	r0, r2
 8001a40:	f7ff fb06 	bl	8001050 <moveable>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00d      	beq.n	8001a66 <zombie_update+0x93e>
									move(115,1);
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	2073      	movs	r0, #115	; 0x73
 8001a4e:	f7ff f94f 	bl	8000cf0 <move>
									zombie_pos[(z*3)+2] = 5;
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	4613      	mov	r3, r2
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	4413      	add	r3, r2
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	4a5f      	ldr	r2, [pc, #380]	; (8001bdc <zombie_update+0xab4>)
 8001a5e:	2105      	movs	r1, #5
 8001a60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								break;
 8001a64:	e00c      	b.n	8001a80 <zombie_update+0x958>
									move(119,1);
 8001a66:	2101      	movs	r1, #1
 8001a68:	2077      	movs	r0, #119	; 0x77
 8001a6a:	f7ff f941 	bl	8000cf0 <move>
									zombie_pos[(z*3)+2] = 8;
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	4613      	mov	r3, r2
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4413      	add	r3, r2
 8001a76:	3302      	adds	r3, #2
 8001a78:	4a58      	ldr	r2, [pc, #352]	; (8001bdc <zombie_update+0xab4>)
 8001a7a:	2108      	movs	r1, #8
 8001a7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								break;
 8001a80:	bf00      	nop
					if(moveable(*zom_r-1, *zom_c)||moveable(*zom_r+1, *zom_c)) {
 8001a82:	e094      	b.n	8001bae <zombie_update+0xa86>
						}
					} else {
						move(100,1);
 8001a84:	2101      	movs	r1, #1
 8001a86:	2064      	movs	r0, #100	; 0x64
 8001a88:	f7ff f932 	bl	8000cf0 <move>
					} else {
						move(97,1);
						zombie_pos[(z*3)+2] = 4;
					}
				}
				break;
 8001a8c:	e091      	b.n	8001bb2 <zombie_update+0xa8a>
					if(moveable(*zom_r-1, *zom_c)||moveable(*zom_r+1, *zom_c)) {
 8001a8e:	4b4f      	ldr	r3, [pc, #316]	; (8001bcc <zombie_update+0xaa4>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	1e5a      	subs	r2, r3, #1
 8001a96:	4b4e      	ldr	r3, [pc, #312]	; (8001bd0 <zombie_update+0xaa8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	f7ff fad6 	bl	8001050 <moveable>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10d      	bne.n	8001ac6 <zombie_update+0x99e>
 8001aaa:	4b48      	ldr	r3, [pc, #288]	; (8001bcc <zombie_update+0xaa4>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	4b47      	ldr	r3, [pc, #284]	; (8001bd0 <zombie_update+0xaa8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4610      	mov	r0, r2
 8001abc:	f7ff fac8 	bl	8001050 <moveable>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d065      	beq.n	8001b92 <zombie_update+0xa6a>
						destination = rand()%2;
 8001ac6:	f002 fe79 	bl	80047bc <rand>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	bfb8      	it	lt
 8001ad4:	425b      	neglt	r3, r3
 8001ad6:	4a40      	ldr	r2, [pc, #256]	; (8001bd8 <zombie_update+0xab0>)
 8001ad8:	6013      	str	r3, [r2, #0]
						switch (destination)
 8001ada:	4b3f      	ldr	r3, [pc, #252]	; (8001bd8 <zombie_update+0xab0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d002      	beq.n	8001ae8 <zombie_update+0x9c0>
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d02a      	beq.n	8001b3c <zombie_update+0xa14>
								break;
 8001ae6:	e053      	b.n	8001b90 <zombie_update+0xa68>
								if(moveable(*zom_r-1, *zom_c)) {
 8001ae8:	4b38      	ldr	r3, [pc, #224]	; (8001bcc <zombie_update+0xaa4>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	1e5a      	subs	r2, r3, #1
 8001af0:	4b37      	ldr	r3, [pc, #220]	; (8001bd0 <zombie_update+0xaa8>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4619      	mov	r1, r3
 8001af8:	4610      	mov	r0, r2
 8001afa:	f7ff faa9 	bl	8001050 <moveable>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00d      	beq.n	8001b20 <zombie_update+0x9f8>
									move(119,1);
 8001b04:	2101      	movs	r1, #1
 8001b06:	2077      	movs	r0, #119	; 0x77
 8001b08:	f7ff f8f2 	bl	8000cf0 <move>
									zombie_pos[(z*3)+2] = 8;
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	4413      	add	r3, r2
 8001b14:	3302      	adds	r3, #2
 8001b16:	4a31      	ldr	r2, [pc, #196]	; (8001bdc <zombie_update+0xab4>)
 8001b18:	2108      	movs	r1, #8
 8001b1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								break;
 8001b1e:	e037      	b.n	8001b90 <zombie_update+0xa68>
									move(115,1);
 8001b20:	2101      	movs	r1, #1
 8001b22:	2073      	movs	r0, #115	; 0x73
 8001b24:	f7ff f8e4 	bl	8000cf0 <move>
									zombie_pos[(z*3)+2] = 5;
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	4413      	add	r3, r2
 8001b30:	3302      	adds	r3, #2
 8001b32:	4a2a      	ldr	r2, [pc, #168]	; (8001bdc <zombie_update+0xab4>)
 8001b34:	2105      	movs	r1, #5
 8001b36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								break;
 8001b3a:	e029      	b.n	8001b90 <zombie_update+0xa68>
								if(moveable(*zom_r+1, *zom_c)) {
 8001b3c:	4b23      	ldr	r3, [pc, #140]	; (8001bcc <zombie_update+0xaa4>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	4b22      	ldr	r3, [pc, #136]	; (8001bd0 <zombie_update+0xaa8>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	f7ff fa7f 	bl	8001050 <moveable>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00d      	beq.n	8001b74 <zombie_update+0xa4c>
									move(115,1);
 8001b58:	2101      	movs	r1, #1
 8001b5a:	2073      	movs	r0, #115	; 0x73
 8001b5c:	f7ff f8c8 	bl	8000cf0 <move>
									zombie_pos[(z*3)+2] = 5;
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	4613      	mov	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	4413      	add	r3, r2
 8001b68:	3302      	adds	r3, #2
 8001b6a:	4a1c      	ldr	r2, [pc, #112]	; (8001bdc <zombie_update+0xab4>)
 8001b6c:	2105      	movs	r1, #5
 8001b6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								break;
 8001b72:	e00c      	b.n	8001b8e <zombie_update+0xa66>
									move(119,1);
 8001b74:	2101      	movs	r1, #1
 8001b76:	2077      	movs	r0, #119	; 0x77
 8001b78:	f7ff f8ba 	bl	8000cf0 <move>
									zombie_pos[(z*3)+2] = 8;
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	4413      	add	r3, r2
 8001b84:	3302      	adds	r3, #2
 8001b86:	4a15      	ldr	r2, [pc, #84]	; (8001bdc <zombie_update+0xab4>)
 8001b88:	2108      	movs	r1, #8
 8001b8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
								break;
 8001b8e:	bf00      	nop
					if(moveable(*zom_r-1, *zom_c)||moveable(*zom_r+1, *zom_c)) {
 8001b90:	e00d      	b.n	8001bae <zombie_update+0xa86>
						move(97,1);
 8001b92:	2101      	movs	r1, #1
 8001b94:	2061      	movs	r0, #97	; 0x61
 8001b96:	f7ff f8ab 	bl	8000cf0 <move>
						zombie_pos[(z*3)+2] = 4;
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3302      	adds	r3, #2
 8001ba4:	4a0d      	ldr	r2, [pc, #52]	; (8001bdc <zombie_update+0xab4>)
 8001ba6:	2104      	movs	r1, #4
 8001ba8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8001bac:	e001      	b.n	8001bb2 <zombie_update+0xa8a>
 8001bae:	e000      	b.n	8001bb2 <zombie_update+0xa8a>
			default:
				break;
 8001bb0:	bf00      	nop
	for(int z = 0; z < zom_current; z++) {
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <zombie_update+0xab8>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	f6ff aad3 	blt.w	800116a <zombie_update+0x42>
//	 set_cur_to(2, 1);
//	 HAL_UART_Transmit(&huart2, out, sizeof(out), HAL_MAX_DELAY);
//	 HAL_Delay(400);
//	 set_cur_to(2, 30);
//	 HAL_UART_Transmit(&huart2, clear_line, sizeof(clear_line), HAL_MAX_DELAY);
}
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	200012a8 	.word	0x200012a8
 8001bd0:	200012ac 	.word	0x200012ac
 8001bd4:	55555556 	.word	0x55555556
 8001bd8:	200012a4 	.word	0x200012a4
 8001bdc:	2000053c 	.word	0x2000053c
 8001be0:	200012b4 	.word	0x200012b4

08001be4 <collision>:

int collision(int row, int col,int who) {
 8001be4:	b480      	push	{r7}
 8001be6:	b087      	sub	sp, #28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
	if(who == 1) {
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d10b      	bne.n	8001c0e <collision+0x2a>
		if(row == cha_r && col == cha_c) return 1;
 8001bf6:	4b1e      	ldr	r3, [pc, #120]	; (8001c70 <collision+0x8c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d130      	bne.n	8001c62 <collision+0x7e>
 8001c00:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <collision+0x90>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68ba      	ldr	r2, [r7, #8]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d12b      	bne.n	8001c62 <collision+0x7e>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e02a      	b.n	8001c64 <collision+0x80>
	} else {
		for(int z = 0; z < zom_current; z++) {
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	e021      	b.n	8001c58 <collision+0x74>
				zom_r = &zombie_pos[(z*3)];
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	4613      	mov	r3, r2
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	4413      	add	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4a16      	ldr	r2, [pc, #88]	; (8001c78 <collision+0x94>)
 8001c20:	4413      	add	r3, r2
 8001c22:	4a16      	ldr	r2, [pc, #88]	; (8001c7c <collision+0x98>)
 8001c24:	6013      	str	r3, [r2, #0]
				zom_c = &zombie_pos[(z*3)+1];
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3301      	adds	r3, #1
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4a11      	ldr	r2, [pc, #68]	; (8001c78 <collision+0x94>)
 8001c34:	4413      	add	r3, r2
 8001c36:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <collision+0x9c>)
 8001c38:	6013      	str	r3, [r2, #0]
				if(row == zom_r && col == zom_c) return 1;
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <collision+0x98>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d106      	bne.n	8001c52 <collision+0x6e>
 8001c44:	68ba      	ldr	r2, [r7, #8]
 8001c46:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <collision+0x9c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d101      	bne.n	8001c52 <collision+0x6e>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e008      	b.n	8001c64 <collision+0x80>
		for(int z = 0; z < zom_current; z++) {
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	3301      	adds	r3, #1
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <collision+0xa0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	dbd8      	blt.n	8001c14 <collision+0x30>
		}
	}
	return 0;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	371c      	adds	r7, #28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	20001294 	.word	0x20001294
 8001c74:	20001328 	.word	0x20001328
 8001c78:	2000053c 	.word	0x2000053c
 8001c7c:	200012a8 	.word	0x200012a8
 8001c80:	200012ac 	.word	0x200012ac
 8001c84:	200012b4 	.word	0x200012b4

08001c88 <player_update>:

void player_update(uint8_t input) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
	move(input,0);
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	2100      	movs	r1, #0
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff f82a 	bl	8000cf0 <move>
}
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <score_inintial>:

void score_inintial() {
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
	scores = 0;
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <score_inintial+0x14>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	2000129c 	.word	0x2000129c

08001cbc <score_update>:

void score_update() {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
	sprintf(score_current,"SCORES : %d  ", scores);
 8001cc0:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <score_update+0x40>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	490e      	ldr	r1, [pc, #56]	; (8001d00 <score_update+0x44>)
 8001cc8:	480e      	ldr	r0, [pc, #56]	; (8001d04 <score_update+0x48>)
 8001cca:	f002 fdab 	bl	8004824 <siprintf>
	scores++;
 8001cce:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <score_update+0x40>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	4a09      	ldr	r2, [pc, #36]	; (8001cfc <score_update+0x40>)
 8001cd6:	6013      	str	r3, [r2, #0]
	set_cur_to(2, 66);
 8001cd8:	2142      	movs	r1, #66	; 0x42
 8001cda:	2002      	movs	r0, #2
 8001cdc:	f7fe fc50 	bl	8000580 <set_cur_to>
	HAL_UART_Transmit(&huart2, score_current, sizeof(score_current), HAL_MAX_DELAY);
 8001ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce4:	2264      	movs	r2, #100	; 0x64
 8001ce6:	4907      	ldr	r1, [pc, #28]	; (8001d04 <score_update+0x48>)
 8001ce8:	4807      	ldr	r0, [pc, #28]	; (8001d08 <score_update+0x4c>)
 8001cea:	f001 fe26 	bl	800393a <HAL_UART_Transmit>
	set_cur_to(25, 80);
 8001cee:	2150      	movs	r1, #80	; 0x50
 8001cf0:	2019      	movs	r0, #25
 8001cf2:	f7fe fc45 	bl	8000580 <set_cur_to>
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	2000129c 	.word	0x2000129c
 8001d00:	080050f4 	.word	0x080050f4
 8001d04:	200011c0 	.word	0x200011c0
 8001d08:	2000132c 	.word	0x2000132c

08001d0c <gameOver>:

void gameOver() {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
	key_input = 0;
 8001d10:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <gameOver+0x44>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]
	set_cur_to(10, 34);
 8001d16:	2122      	movs	r1, #34	; 0x22
 8001d18:	200a      	movs	r0, #10
 8001d1a:	f7fe fc31 	bl	8000580 <set_cur_to>
	HAL_UART_Transmit(&huart2, game_over, sizeof(game_over), HAL_MAX_DELAY);
 8001d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d22:	2264      	movs	r2, #100	; 0x64
 8001d24:	490b      	ldr	r1, [pc, #44]	; (8001d54 <gameOver+0x48>)
 8001d26:	480c      	ldr	r0, [pc, #48]	; (8001d58 <gameOver+0x4c>)
 8001d28:	f001 fe07 	bl	800393a <HAL_UART_Transmit>
	set_cur_to(25, 80);
 8001d2c:	2150      	movs	r1, #80	; 0x50
 8001d2e:	2019      	movs	r0, #25
 8001d30:	f7fe fc26 	bl	8000580 <set_cur_to>
	HAL_Delay(3000);
 8001d34:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001d38:	f000 fb76 	bl	8002428 <HAL_Delay>
	while(key_input == 0) {
 8001d3c:	bf00      	nop
 8001d3e:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <gameOver+0x44>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0fb      	beq.n	8001d3e <gameOver+0x32>
	}
	clear_screen();
 8001d46:	f7fe fc3f 	bl	80005c8 <clear_screen>
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200012b0 	.word	0x200012b0
 8001d54:	200004cc 	.word	0x200004cc
 8001d58:	2000132c 	.word	0x2000132c

08001d5c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, &key_input, sizeof(key_input));
 8001d64:	2201      	movs	r2, #1
 8001d66:	4904      	ldr	r1, [pc, #16]	; (8001d78 <HAL_UART_RxCpltCallback+0x1c>)
 8001d68:	4804      	ldr	r0, [pc, #16]	; (8001d7c <HAL_UART_RxCpltCallback+0x20>)
 8001d6a:	f001 fe7f 	bl	8003a6c <HAL_UART_Receive_IT>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	200012b0 	.word	0x200012b0
 8001d7c:	2000132c 	.word	0x2000132c

08001d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d86:	f000 fadd 	bl	8002344 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d8a:	f000 f857 	bl	8001e3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d8e:	f000 f909 	bl	8001fa4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d92:	f000 f8e7 	bl	8001f64 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001d96:	f000 f8bb 	bl	8001f10 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  int frame = 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	607b      	str	r3, [r7, #4]
  int frame_rate = 300000;
 8001d9e:	4b22      	ldr	r3, [pc, #136]	; (8001e28 <main+0xa8>)
 8001da0:	603b      	str	r3, [r7, #0]
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_Delay(2000);
 8001da2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001da6:	f000 fb3f 	bl	8002428 <HAL_Delay>
  srand(time(0));
 8001daa:	2000      	movs	r0, #0
 8001dac:	f002 fd5a 	bl	8004864 <time>
 8001db0:	4603      	mov	r3, r0
 8001db2:	4618      	mov	r0, r3
 8001db4:	f002 fcde 	bl	8004774 <srand>
  HAL_UART_Receive_IT(&huart2, &key_input, sizeof(key_input));
 8001db8:	2201      	movs	r2, #1
 8001dba:	491c      	ldr	r1, [pc, #112]	; (8001e2c <main+0xac>)
 8001dbc:	481c      	ldr	r0, [pc, #112]	; (8001e30 <main+0xb0>)
 8001dbe:	f001 fe55 	bl	8003a6c <HAL_UART_Receive_IT>

  while (1)
  {
		is_game_over = 0;
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <main+0xb4>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
		disp_start_scene();
 8001dc8:	f7fe fe76 	bl	8000ab8 <disp_start_scene>
		disp_map();
 8001dcc:	f7fe fefc 	bl	8000bc8 <disp_map>

		while(!is_game_over) {
 8001dd0:	e022      	b.n	8001e18 <main+0x98>
			if(frame%10000 == 0) {
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <main+0xb8>)
 8001dd6:	fb83 1302 	smull	r1, r3, r3, r2
 8001dda:	1319      	asrs	r1, r3, #12
 8001ddc:	17d3      	asrs	r3, r2, #31
 8001dde:	1acb      	subs	r3, r1, r3
 8001de0:	f242 7110 	movw	r1, #10000	; 0x2710
 8001de4:	fb01 f303 	mul.w	r3, r1, r3
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d107      	bne.n	8001dfe <main+0x7e>
				player_update(key_input);
 8001dee:	4b0f      	ldr	r3, [pc, #60]	; (8001e2c <main+0xac>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff ff48 	bl	8001c88 <player_update>
				key_input = 0;
 8001df8:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <main+0xac>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
			}
			if(frame == frame_rate) {
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d105      	bne.n	8001e12 <main+0x92>
				zombie_update();
 8001e06:	f7ff f98f 	bl	8001128 <zombie_update>
				score_update();
 8001e0a:	f7ff ff57 	bl	8001cbc <score_update>
				frame = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	607b      	str	r3, [r7, #4]
			}
			frame++;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3301      	adds	r3, #1
 8001e16:	607b      	str	r3, [r7, #4]
		while(!is_game_over) {
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <main+0xb4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0d8      	beq.n	8001dd2 <main+0x52>
		}

		gameOver();
 8001e20:	f7ff ff74 	bl	8001d0c <gameOver>
		is_game_over = 0;
 8001e24:	e7cd      	b.n	8001dc2 <main+0x42>
 8001e26:	bf00      	nop
 8001e28:	000493e0 	.word	0x000493e0
 8001e2c:	200012b0 	.word	0x200012b0
 8001e30:	2000132c 	.word	0x2000132c
 8001e34:	20001318 	.word	0x20001318
 8001e38:	68db8bad 	.word	0x68db8bad

08001e3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b094      	sub	sp, #80	; 0x50
 8001e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e42:	f107 0320 	add.w	r3, r7, #32
 8001e46:	2230      	movs	r2, #48	; 0x30
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f002 fc8a 	bl	8004764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e50:	f107 030c 	add.w	r3, r7, #12
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e60:	2300      	movs	r3, #0
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	4b28      	ldr	r3, [pc, #160]	; (8001f08 <SystemClock_Config+0xcc>)
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	4a27      	ldr	r2, [pc, #156]	; (8001f08 <SystemClock_Config+0xcc>)
 8001e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e70:	4b25      	ldr	r3, [pc, #148]	; (8001f08 <SystemClock_Config+0xcc>)
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	607b      	str	r3, [r7, #4]
 8001e80:	4b22      	ldr	r3, [pc, #136]	; (8001f0c <SystemClock_Config+0xd0>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a21      	ldr	r2, [pc, #132]	; (8001f0c <SystemClock_Config+0xd0>)
 8001e86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e8a:	6013      	str	r3, [r2, #0]
 8001e8c:	4b1f      	ldr	r3, [pc, #124]	; (8001f0c <SystemClock_Config+0xd0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ea0:	2310      	movs	r3, #16
 8001ea2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001eac:	2310      	movs	r3, #16
 8001eae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001eb0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001eb4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001eba:	2304      	movs	r3, #4
 8001ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ebe:	f107 0320 	add.w	r3, r7, #32
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f001 f88a 	bl	8002fdc <HAL_RCC_OscConfig>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001ece:	f000 f8d9 	bl	8002084 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ed2:	230f      	movs	r3, #15
 8001ed4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ede:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ee2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ee8:	f107 030c 	add.w	r3, r7, #12
 8001eec:	2102      	movs	r1, #2
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f001 fae4 	bl	80034bc <HAL_RCC_ClockConfig>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001efa:	f000 f8c3 	bl	8002084 <Error_Handler>
  }
}
 8001efe:	bf00      	nop
 8001f00:	3750      	adds	r7, #80	; 0x50
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40007000 	.word	0x40007000

08001f10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f16:	4a12      	ldr	r2, [pc, #72]	; (8001f60 <MX_USART2_UART_Init+0x50>)
 8001f18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f1a:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f22:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f36:	220c      	movs	r2, #12
 8001f38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f3a:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f46:	4805      	ldr	r0, [pc, #20]	; (8001f5c <MX_USART2_UART_Init+0x4c>)
 8001f48:	f001 fcaa 	bl	80038a0 <HAL_UART_Init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f52:	f000 f897 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	2000132c 	.word	0x2000132c
 8001f60:	40004400 	.word	0x40004400

08001f64 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	607b      	str	r3, [r7, #4]
 8001f6e:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <MX_DMA_Init+0x3c>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	4a0b      	ldr	r2, [pc, #44]	; (8001fa0 <MX_DMA_Init+0x3c>)
 8001f74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f78:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7a:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <MX_DMA_Init+0x3c>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f82:	607b      	str	r3, [r7, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2011      	movs	r0, #17
 8001f8c:	f000 fb49 	bl	8002622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001f90:	2011      	movs	r0, #17
 8001f92:	f000 fb62 	bl	800265a <HAL_NVIC_EnableIRQ>

}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40023800 	.word	0x40023800

08001fa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08a      	sub	sp, #40	; 0x28
 8001fa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001faa:	f107 0314 	add.w	r3, r7, #20
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
 8001fb6:	60da      	str	r2, [r3, #12]
 8001fb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	4b2d      	ldr	r3, [pc, #180]	; (8002074 <MX_GPIO_Init+0xd0>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	4a2c      	ldr	r2, [pc, #176]	; (8002074 <MX_GPIO_Init+0xd0>)
 8001fc4:	f043 0304 	orr.w	r3, r3, #4
 8001fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fca:	4b2a      	ldr	r3, [pc, #168]	; (8002074 <MX_GPIO_Init+0xd0>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	4b26      	ldr	r3, [pc, #152]	; (8002074 <MX_GPIO_Init+0xd0>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	4a25      	ldr	r2, [pc, #148]	; (8002074 <MX_GPIO_Init+0xd0>)
 8001fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe6:	4b23      	ldr	r3, [pc, #140]	; (8002074 <MX_GPIO_Init+0xd0>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	4b1f      	ldr	r3, [pc, #124]	; (8002074 <MX_GPIO_Init+0xd0>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	4a1e      	ldr	r2, [pc, #120]	; (8002074 <MX_GPIO_Init+0xd0>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6313      	str	r3, [r2, #48]	; 0x30
 8002002:	4b1c      	ldr	r3, [pc, #112]	; (8002074 <MX_GPIO_Init+0xd0>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	607b      	str	r3, [r7, #4]
 8002012:	4b18      	ldr	r3, [pc, #96]	; (8002074 <MX_GPIO_Init+0xd0>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a17      	ldr	r2, [pc, #92]	; (8002074 <MX_GPIO_Init+0xd0>)
 8002018:	f043 0302 	orr.w	r3, r3, #2
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b15      	ldr	r3, [pc, #84]	; (8002074 <MX_GPIO_Init+0xd0>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	607b      	str	r3, [r7, #4]
 8002028:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800202a:	2200      	movs	r2, #0
 800202c:	2120      	movs	r1, #32
 800202e:	4812      	ldr	r0, [pc, #72]	; (8002078 <MX_GPIO_Init+0xd4>)
 8002030:	f000 ffba 	bl	8002fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002034:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800203a:	4b10      	ldr	r3, [pc, #64]	; (800207c <MX_GPIO_Init+0xd8>)
 800203c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	4619      	mov	r1, r3
 8002048:	480d      	ldr	r0, [pc, #52]	; (8002080 <MX_GPIO_Init+0xdc>)
 800204a:	f000 fe2b 	bl	8002ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800204e:	2320      	movs	r3, #32
 8002050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002052:	2301      	movs	r3, #1
 8002054:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205a:	2300      	movs	r3, #0
 800205c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800205e:	f107 0314 	add.w	r3, r7, #20
 8002062:	4619      	mov	r1, r3
 8002064:	4804      	ldr	r0, [pc, #16]	; (8002078 <MX_GPIO_Init+0xd4>)
 8002066:	f000 fe1d 	bl	8002ca4 <HAL_GPIO_Init>

}
 800206a:	bf00      	nop
 800206c:	3728      	adds	r7, #40	; 0x28
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40023800 	.word	0x40023800
 8002078:	40020000 	.word	0x40020000
 800207c:	10210000 	.word	0x10210000
 8002080:	40020800 	.word	0x40020800

08002084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
	...

08002094 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	607b      	str	r3, [r7, #4]
 800209e:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <HAL_MspInit+0x4c>)
 80020a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a2:	4a0f      	ldr	r2, [pc, #60]	; (80020e0 <HAL_MspInit+0x4c>)
 80020a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020a8:	6453      	str	r3, [r2, #68]	; 0x44
 80020aa:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <HAL_MspInit+0x4c>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b2:	607b      	str	r3, [r7, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	603b      	str	r3, [r7, #0]
 80020ba:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <HAL_MspInit+0x4c>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	4a08      	ldr	r2, [pc, #32]	; (80020e0 <HAL_MspInit+0x4c>)
 80020c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c4:	6413      	str	r3, [r2, #64]	; 0x40
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <HAL_MspInit+0x4c>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ce:	603b      	str	r3, [r7, #0]
 80020d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80020d2:	2007      	movs	r0, #7
 80020d4:	f000 fa9a 	bl	800260c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40023800 	.word	0x40023800

080020e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08a      	sub	sp, #40	; 0x28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ec:	f107 0314 	add.w	r3, r7, #20
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a34      	ldr	r2, [pc, #208]	; (80021d4 <HAL_UART_MspInit+0xf0>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d161      	bne.n	80021ca <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	4b33      	ldr	r3, [pc, #204]	; (80021d8 <HAL_UART_MspInit+0xf4>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	4a32      	ldr	r2, [pc, #200]	; (80021d8 <HAL_UART_MspInit+0xf4>)
 8002110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002114:	6413      	str	r3, [r2, #64]	; 0x40
 8002116:	4b30      	ldr	r3, [pc, #192]	; (80021d8 <HAL_UART_MspInit+0xf4>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	4b2c      	ldr	r3, [pc, #176]	; (80021d8 <HAL_UART_MspInit+0xf4>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	4a2b      	ldr	r2, [pc, #172]	; (80021d8 <HAL_UART_MspInit+0xf4>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6313      	str	r3, [r2, #48]	; 0x30
 8002132:	4b29      	ldr	r3, [pc, #164]	; (80021d8 <HAL_UART_MspInit+0xf4>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800213e:	230c      	movs	r3, #12
 8002140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002142:	2302      	movs	r3, #2
 8002144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214a:	2303      	movs	r3, #3
 800214c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800214e:	2307      	movs	r3, #7
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002152:	f107 0314 	add.w	r3, r7, #20
 8002156:	4619      	mov	r1, r3
 8002158:	4820      	ldr	r0, [pc, #128]	; (80021dc <HAL_UART_MspInit+0xf8>)
 800215a:	f000 fda3 	bl	8002ca4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800215e:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <HAL_UART_MspInit+0xfc>)
 8002160:	4a20      	ldr	r2, [pc, #128]	; (80021e4 <HAL_UART_MspInit+0x100>)
 8002162:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002164:	4b1e      	ldr	r3, [pc, #120]	; (80021e0 <HAL_UART_MspInit+0xfc>)
 8002166:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800216a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800216c:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <HAL_UART_MspInit+0xfc>)
 800216e:	2240      	movs	r2, #64	; 0x40
 8002170:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002172:	4b1b      	ldr	r3, [pc, #108]	; (80021e0 <HAL_UART_MspInit+0xfc>)
 8002174:	2200      	movs	r2, #0
 8002176:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002178:	4b19      	ldr	r3, [pc, #100]	; (80021e0 <HAL_UART_MspInit+0xfc>)
 800217a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800217e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002180:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <HAL_UART_MspInit+0xfc>)
 8002182:	2200      	movs	r2, #0
 8002184:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002186:	4b16      	ldr	r3, [pc, #88]	; (80021e0 <HAL_UART_MspInit+0xfc>)
 8002188:	2200      	movs	r2, #0
 800218a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800218c:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <HAL_UART_MspInit+0xfc>)
 800218e:	2200      	movs	r2, #0
 8002190:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_UART_MspInit+0xfc>)
 8002194:	2200      	movs	r2, #0
 8002196:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002198:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <HAL_UART_MspInit+0xfc>)
 800219a:	2200      	movs	r2, #0
 800219c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800219e:	4810      	ldr	r0, [pc, #64]	; (80021e0 <HAL_UART_MspInit+0xfc>)
 80021a0:	f000 fa76 	bl	8002690 <HAL_DMA_Init>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80021aa:	f7ff ff6b 	bl	8002084 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a0b      	ldr	r2, [pc, #44]	; (80021e0 <HAL_UART_MspInit+0xfc>)
 80021b2:	631a      	str	r2, [r3, #48]	; 0x30
 80021b4:	4a0a      	ldr	r2, [pc, #40]	; (80021e0 <HAL_UART_MspInit+0xfc>)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2100      	movs	r1, #0
 80021be:	2026      	movs	r0, #38	; 0x26
 80021c0:	f000 fa2f 	bl	8002622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021c4:	2026      	movs	r0, #38	; 0x26
 80021c6:	f000 fa48 	bl	800265a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021ca:	bf00      	nop
 80021cc:	3728      	adds	r7, #40	; 0x28
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40004400 	.word	0x40004400
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40020000 	.word	0x40020000
 80021e0:	200012b8 	.word	0x200012b8
 80021e4:	400260a0 	.word	0x400260a0

080021e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021fa:	e7fe      	b.n	80021fa <HardFault_Handler+0x4>

080021fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002200:	e7fe      	b.n	8002200 <MemManage_Handler+0x4>

08002202 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002206:	e7fe      	b.n	8002206 <BusFault_Handler+0x4>

08002208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800220c:	e7fe      	b.n	800220c <UsageFault_Handler+0x4>

0800220e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800223c:	f000 f8d4 	bl	80023e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002240:	bf00      	nop
 8002242:	bd80      	pop	{r7, pc}

08002244 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002248:	4802      	ldr	r0, [pc, #8]	; (8002254 <DMA1_Stream6_IRQHandler+0x10>)
 800224a:	f000 faf1 	bl	8002830 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	200012b8 	.word	0x200012b8

08002258 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800225c:	4802      	ldr	r0, [pc, #8]	; (8002268 <USART2_IRQHandler+0x10>)
 800225e:	f001 fc5b 	bl	8003b18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	2000132c 	.word	0x2000132c

0800226c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <_sbrk+0x50>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d102      	bne.n	8002282 <_sbrk+0x16>
		heap_end = &end;
 800227c:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <_sbrk+0x50>)
 800227e:	4a10      	ldr	r2, [pc, #64]	; (80022c0 <_sbrk+0x54>)
 8002280:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002282:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <_sbrk+0x50>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002288:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <_sbrk+0x50>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4413      	add	r3, r2
 8002290:	466a      	mov	r2, sp
 8002292:	4293      	cmp	r3, r2
 8002294:	d907      	bls.n	80022a6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002296:	f002 fa3b 	bl	8004710 <__errno>
 800229a:	4602      	mov	r2, r0
 800229c:	230c      	movs	r3, #12
 800229e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80022a0:	f04f 33ff 	mov.w	r3, #4294967295
 80022a4:	e006      	b.n	80022b4 <_sbrk+0x48>
	}

	heap_end += incr;
 80022a6:	4b05      	ldr	r3, [pc, #20]	; (80022bc <_sbrk+0x50>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4413      	add	r3, r2
 80022ae:	4a03      	ldr	r2, [pc, #12]	; (80022bc <_sbrk+0x50>)
 80022b0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80022b2:	68fb      	ldr	r3, [r7, #12]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	20001288 	.word	0x20001288
 80022c0:	20001380 	.word	0x20001380

080022c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022c8:	4b08      	ldr	r3, [pc, #32]	; (80022ec <SystemInit+0x28>)
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ce:	4a07      	ldr	r2, [pc, #28]	; (80022ec <SystemInit+0x28>)
 80022d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022d8:	4b04      	ldr	r3, [pc, #16]	; (80022ec <SystemInit+0x28>)
 80022da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022de:	609a      	str	r2, [r3, #8]
#endif
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002328 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80022f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80022f6:	e003      	b.n	8002300 <LoopCopyDataInit>

080022f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80022f8:	4b0c      	ldr	r3, [pc, #48]	; (800232c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80022fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80022fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80022fe:	3104      	adds	r1, #4

08002300 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002300:	480b      	ldr	r0, [pc, #44]	; (8002330 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002302:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002304:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002306:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002308:	d3f6      	bcc.n	80022f8 <CopyDataInit>
  ldr  r2, =_sbss
 800230a:	4a0b      	ldr	r2, [pc, #44]	; (8002338 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800230c:	e002      	b.n	8002314 <LoopFillZerobss>

0800230e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800230e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002310:	f842 3b04 	str.w	r3, [r2], #4

08002314 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002314:	4b09      	ldr	r3, [pc, #36]	; (800233c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002316:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002318:	d3f9      	bcc.n	800230e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800231a:	f7ff ffd3 	bl	80022c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800231e:	f002 f9fd 	bl	800471c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002322:	f7ff fd2d 	bl	8001d80 <main>
  bx  lr    
 8002326:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002328:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800232c:	08005168 	.word	0x08005168
  ldr  r0, =_sdata
 8002330:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002334:	200011a4 	.word	0x200011a4
  ldr  r2, =_sbss
 8002338:	200011a4 	.word	0x200011a4
  ldr  r3, = _ebss
 800233c:	2000137c 	.word	0x2000137c

08002340 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002340:	e7fe      	b.n	8002340 <ADC_IRQHandler>
	...

08002344 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002348:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <HAL_Init+0x40>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0d      	ldr	r2, [pc, #52]	; (8002384 <HAL_Init+0x40>)
 800234e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002352:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <HAL_Init+0x40>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a0a      	ldr	r2, [pc, #40]	; (8002384 <HAL_Init+0x40>)
 800235a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800235e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002360:	4b08      	ldr	r3, [pc, #32]	; (8002384 <HAL_Init+0x40>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a07      	ldr	r2, [pc, #28]	; (8002384 <HAL_Init+0x40>)
 8002366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800236c:	2003      	movs	r0, #3
 800236e:	f000 f94d 	bl	800260c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002372:	2000      	movs	r0, #0
 8002374:	f000 f808 	bl	8002388 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002378:	f7ff fe8c 	bl	8002094 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40023c00 	.word	0x40023c00

08002388 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002390:	4b12      	ldr	r3, [pc, #72]	; (80023dc <HAL_InitTick+0x54>)
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <HAL_InitTick+0x58>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	4619      	mov	r1, r3
 800239a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800239e:	fbb3 f3f1 	udiv	r3, r3, r1
 80023a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 f965 	bl	8002676 <HAL_SYSTICK_Config>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e00e      	b.n	80023d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b0f      	cmp	r3, #15
 80023ba:	d80a      	bhi.n	80023d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023bc:	2200      	movs	r2, #0
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	f04f 30ff 	mov.w	r0, #4294967295
 80023c4:	f000 f92d 	bl	8002622 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023c8:	4a06      	ldr	r2, [pc, #24]	; (80023e4 <HAL_InitTick+0x5c>)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
 80023d0:	e000      	b.n	80023d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20001134 	.word	0x20001134
 80023e0:	2000113c 	.word	0x2000113c
 80023e4:	20001138 	.word	0x20001138

080023e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023ec:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_IncTick+0x20>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	461a      	mov	r2, r3
 80023f2:	4b06      	ldr	r3, [pc, #24]	; (800240c <HAL_IncTick+0x24>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4413      	add	r3, r2
 80023f8:	4a04      	ldr	r2, [pc, #16]	; (800240c <HAL_IncTick+0x24>)
 80023fa:	6013      	str	r3, [r2, #0]
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	2000113c 	.word	0x2000113c
 800240c:	20001374 	.word	0x20001374

08002410 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  return uwTick;
 8002414:	4b03      	ldr	r3, [pc, #12]	; (8002424 <HAL_GetTick+0x14>)
 8002416:	681b      	ldr	r3, [r3, #0]
}
 8002418:	4618      	mov	r0, r3
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	20001374 	.word	0x20001374

08002428 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002430:	f7ff ffee 	bl	8002410 <HAL_GetTick>
 8002434:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002440:	d005      	beq.n	800244e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002442:	4b09      	ldr	r3, [pc, #36]	; (8002468 <HAL_Delay+0x40>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	461a      	mov	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4413      	add	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800244e:	bf00      	nop
 8002450:	f7ff ffde 	bl	8002410 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	429a      	cmp	r2, r3
 800245e:	d8f7      	bhi.n	8002450 <HAL_Delay+0x28>
  {
  }
}
 8002460:	bf00      	nop
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	2000113c 	.word	0x2000113c

0800246c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800247c:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002488:	4013      	ands	r3, r2
 800248a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002494:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800249c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800249e:	4a04      	ldr	r2, [pc, #16]	; (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	60d3      	str	r3, [r2, #12]
}
 80024a4:	bf00      	nop
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b8:	4b04      	ldr	r3, [pc, #16]	; (80024cc <__NVIC_GetPriorityGrouping+0x18>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	0a1b      	lsrs	r3, r3, #8
 80024be:	f003 0307 	and.w	r3, r3, #7
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	db0b      	blt.n	80024fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	f003 021f 	and.w	r2, r3, #31
 80024e8:	4907      	ldr	r1, [pc, #28]	; (8002508 <__NVIC_EnableIRQ+0x38>)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	095b      	lsrs	r3, r3, #5
 80024f0:	2001      	movs	r0, #1
 80024f2:	fa00 f202 	lsl.w	r2, r0, r2
 80024f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	e000e100 	.word	0xe000e100

0800250c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	6039      	str	r1, [r7, #0]
 8002516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251c:	2b00      	cmp	r3, #0
 800251e:	db0a      	blt.n	8002536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	b2da      	uxtb	r2, r3
 8002524:	490c      	ldr	r1, [pc, #48]	; (8002558 <__NVIC_SetPriority+0x4c>)
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	0112      	lsls	r2, r2, #4
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	440b      	add	r3, r1
 8002530:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002534:	e00a      	b.n	800254c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	b2da      	uxtb	r2, r3
 800253a:	4908      	ldr	r1, [pc, #32]	; (800255c <__NVIC_SetPriority+0x50>)
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	3b04      	subs	r3, #4
 8002544:	0112      	lsls	r2, r2, #4
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	440b      	add	r3, r1
 800254a:	761a      	strb	r2, [r3, #24]
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	e000e100 	.word	0xe000e100
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002560:	b480      	push	{r7}
 8002562:	b089      	sub	sp, #36	; 0x24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f1c3 0307 	rsb	r3, r3, #7
 800257a:	2b04      	cmp	r3, #4
 800257c:	bf28      	it	cs
 800257e:	2304      	movcs	r3, #4
 8002580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3304      	adds	r3, #4
 8002586:	2b06      	cmp	r3, #6
 8002588:	d902      	bls.n	8002590 <NVIC_EncodePriority+0x30>
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	3b03      	subs	r3, #3
 800258e:	e000      	b.n	8002592 <NVIC_EncodePriority+0x32>
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002594:	f04f 32ff 	mov.w	r2, #4294967295
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43da      	mvns	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	401a      	ands	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025a8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	fa01 f303 	lsl.w	r3, r1, r3
 80025b2:	43d9      	mvns	r1, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b8:	4313      	orrs	r3, r2
         );
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3724      	adds	r7, #36	; 0x24
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
	...

080025c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025d8:	d301      	bcc.n	80025de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025da:	2301      	movs	r3, #1
 80025dc:	e00f      	b.n	80025fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025de:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <SysTick_Config+0x40>)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025e6:	210f      	movs	r1, #15
 80025e8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ec:	f7ff ff8e 	bl	800250c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025f0:	4b05      	ldr	r3, [pc, #20]	; (8002608 <SysTick_Config+0x40>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025f6:	4b04      	ldr	r3, [pc, #16]	; (8002608 <SysTick_Config+0x40>)
 80025f8:	2207      	movs	r2, #7
 80025fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	e000e010 	.word	0xe000e010

0800260c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff ff29 	bl	800246c <__NVIC_SetPriorityGrouping>
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002622:	b580      	push	{r7, lr}
 8002624:	b086      	sub	sp, #24
 8002626:	af00      	add	r7, sp, #0
 8002628:	4603      	mov	r3, r0
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	607a      	str	r2, [r7, #4]
 800262e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002634:	f7ff ff3e 	bl	80024b4 <__NVIC_GetPriorityGrouping>
 8002638:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	68b9      	ldr	r1, [r7, #8]
 800263e:	6978      	ldr	r0, [r7, #20]
 8002640:	f7ff ff8e 	bl	8002560 <NVIC_EncodePriority>
 8002644:	4602      	mov	r2, r0
 8002646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800264a:	4611      	mov	r1, r2
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff ff5d 	bl	800250c <__NVIC_SetPriority>
}
 8002652:	bf00      	nop
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	4603      	mov	r3, r0
 8002662:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff31 	bl	80024d0 <__NVIC_EnableIRQ>
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff ffa2 	bl	80025c8 <SysTick_Config>
 8002684:	4603      	mov	r3, r0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800269c:	f7ff feb8 	bl	8002410 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e099      	b.n	80027e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0201 	bic.w	r2, r2, #1
 80026ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026cc:	e00f      	b.n	80026ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026ce:	f7ff fe9f 	bl	8002410 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b05      	cmp	r3, #5
 80026da:	d908      	bls.n	80026ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2220      	movs	r2, #32
 80026e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2203      	movs	r2, #3
 80026e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e078      	b.n	80027e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1e8      	bne.n	80026ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	4b38      	ldr	r3, [pc, #224]	; (80027e8 <HAL_DMA_Init+0x158>)
 8002708:	4013      	ands	r3, r2
 800270a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800271a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002726:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002732:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	4313      	orrs	r3, r2
 800273e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	2b04      	cmp	r3, #4
 8002746:	d107      	bne.n	8002758 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002750:	4313      	orrs	r3, r2
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	4313      	orrs	r3, r2
 8002756:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f023 0307 	bic.w	r3, r3, #7
 800276e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	4313      	orrs	r3, r2
 8002778:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	2b04      	cmp	r3, #4
 8002780:	d117      	bne.n	80027b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	4313      	orrs	r3, r2
 800278a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00e      	beq.n	80027b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 fa0b 	bl	8002bb0 <DMA_CheckFifoParam>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d008      	beq.n	80027b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2240      	movs	r2, #64	; 0x40
 80027a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80027ae:	2301      	movs	r3, #1
 80027b0:	e016      	b.n	80027e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f9c2 	bl	8002b44 <DMA_CalcBaseAndBitshift>
 80027c0:	4603      	mov	r3, r0
 80027c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c8:	223f      	movs	r2, #63	; 0x3f
 80027ca:	409a      	lsls	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	f010803f 	.word	0xf010803f

080027ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d004      	beq.n	800280a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2280      	movs	r2, #128	; 0x80
 8002804:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e00c      	b.n	8002824 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2205      	movs	r2, #5
 800280e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0201 	bic.w	r2, r2, #1
 8002820:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800283c:	4b92      	ldr	r3, [pc, #584]	; (8002a88 <HAL_DMA_IRQHandler+0x258>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a92      	ldr	r2, [pc, #584]	; (8002a8c <HAL_DMA_IRQHandler+0x25c>)
 8002842:	fba2 2303 	umull	r2, r3, r2, r3
 8002846:	0a9b      	lsrs	r3, r3, #10
 8002848:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285a:	2208      	movs	r2, #8
 800285c:	409a      	lsls	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	4013      	ands	r3, r2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d01a      	beq.n	800289c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	d013      	beq.n	800289c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0204 	bic.w	r2, r2, #4
 8002882:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002888:	2208      	movs	r2, #8
 800288a:	409a      	lsls	r2, r3
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002894:	f043 0201 	orr.w	r2, r3, #1
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a0:	2201      	movs	r2, #1
 80028a2:	409a      	lsls	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d012      	beq.n	80028d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00b      	beq.n	80028d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028be:	2201      	movs	r2, #1
 80028c0:	409a      	lsls	r2, r3
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ca:	f043 0202 	orr.w	r2, r3, #2
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d6:	2204      	movs	r2, #4
 80028d8:	409a      	lsls	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	4013      	ands	r3, r2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d012      	beq.n	8002908 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00b      	beq.n	8002908 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f4:	2204      	movs	r2, #4
 80028f6:	409a      	lsls	r2, r3
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002900:	f043 0204 	orr.w	r2, r3, #4
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290c:	2210      	movs	r2, #16
 800290e:	409a      	lsls	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4013      	ands	r3, r2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d043      	beq.n	80029a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	2b00      	cmp	r3, #0
 8002924:	d03c      	beq.n	80029a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292a:	2210      	movs	r2, #16
 800292c:	409a      	lsls	r2, r3
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d018      	beq.n	8002972 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d108      	bne.n	8002960 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	2b00      	cmp	r3, #0
 8002954:	d024      	beq.n	80029a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	4798      	blx	r3
 800295e:	e01f      	b.n	80029a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002964:	2b00      	cmp	r3, #0
 8002966:	d01b      	beq.n	80029a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	4798      	blx	r3
 8002970:	e016      	b.n	80029a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d107      	bne.n	8002990 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0208 	bic.w	r2, r2, #8
 800298e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	2b00      	cmp	r3, #0
 8002996:	d003      	beq.n	80029a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a4:	2220      	movs	r2, #32
 80029a6:	409a      	lsls	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4013      	ands	r3, r2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 808e 	beq.w	8002ace <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0310 	and.w	r3, r3, #16
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 8086 	beq.w	8002ace <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c6:	2220      	movs	r2, #32
 80029c8:	409a      	lsls	r2, r3
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b05      	cmp	r3, #5
 80029d8:	d136      	bne.n	8002a48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0216 	bic.w	r2, r2, #22
 80029e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	695a      	ldr	r2, [r3, #20]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d103      	bne.n	8002a0a <HAL_DMA_IRQHandler+0x1da>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d007      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0208 	bic.w	r2, r2, #8
 8002a18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1e:	223f      	movs	r2, #63	; 0x3f
 8002a20:	409a      	lsls	r2, r3
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d07d      	beq.n	8002b3a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	4798      	blx	r3
        }
        return;
 8002a46:	e078      	b.n	8002b3a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d01c      	beq.n	8002a90 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d108      	bne.n	8002a76 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d030      	beq.n	8002ace <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	4798      	blx	r3
 8002a74:	e02b      	b.n	8002ace <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d027      	beq.n	8002ace <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	4798      	blx	r3
 8002a86:	e022      	b.n	8002ace <HAL_DMA_IRQHandler+0x29e>
 8002a88:	20001134 	.word	0x20001134
 8002a8c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10f      	bne.n	8002abe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0210 	bic.w	r2, r2, #16
 8002aac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d032      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d022      	beq.n	8002b28 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2205      	movs	r2, #5
 8002ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 0201 	bic.w	r2, r2, #1
 8002af8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	3301      	adds	r3, #1
 8002afe:	60bb      	str	r3, [r7, #8]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d307      	bcc.n	8002b16 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1f2      	bne.n	8002afa <HAL_DMA_IRQHandler+0x2ca>
 8002b14:	e000      	b.n	8002b18 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002b16:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	4798      	blx	r3
 8002b38:	e000      	b.n	8002b3c <HAL_DMA_IRQHandler+0x30c>
        return;
 8002b3a:	bf00      	nop
    }
  }
}
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop

08002b44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	3b10      	subs	r3, #16
 8002b54:	4a14      	ldr	r2, [pc, #80]	; (8002ba8 <DMA_CalcBaseAndBitshift+0x64>)
 8002b56:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5a:	091b      	lsrs	r3, r3, #4
 8002b5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b5e:	4a13      	ldr	r2, [pc, #76]	; (8002bac <DMA_CalcBaseAndBitshift+0x68>)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4413      	add	r3, r2
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	461a      	mov	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d909      	bls.n	8002b86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b7a:	f023 0303 	bic.w	r3, r3, #3
 8002b7e:	1d1a      	adds	r2, r3, #4
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	659a      	str	r2, [r3, #88]	; 0x58
 8002b84:	e007      	b.n	8002b96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b8e:	f023 0303 	bic.w	r3, r3, #3
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	aaaaaaab 	.word	0xaaaaaaab
 8002bac:	0800511c 	.word	0x0800511c

08002bb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d11f      	bne.n	8002c0a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b03      	cmp	r3, #3
 8002bce:	d855      	bhi.n	8002c7c <DMA_CheckFifoParam+0xcc>
 8002bd0:	a201      	add	r2, pc, #4	; (adr r2, 8002bd8 <DMA_CheckFifoParam+0x28>)
 8002bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd6:	bf00      	nop
 8002bd8:	08002be9 	.word	0x08002be9
 8002bdc:	08002bfb 	.word	0x08002bfb
 8002be0:	08002be9 	.word	0x08002be9
 8002be4:	08002c7d 	.word	0x08002c7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d045      	beq.n	8002c80 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bf8:	e042      	b.n	8002c80 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c02:	d13f      	bne.n	8002c84 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c08:	e03c      	b.n	8002c84 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c12:	d121      	bne.n	8002c58 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	d836      	bhi.n	8002c88 <DMA_CheckFifoParam+0xd8>
 8002c1a:	a201      	add	r2, pc, #4	; (adr r2, 8002c20 <DMA_CheckFifoParam+0x70>)
 8002c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c20:	08002c31 	.word	0x08002c31
 8002c24:	08002c37 	.word	0x08002c37
 8002c28:	08002c31 	.word	0x08002c31
 8002c2c:	08002c49 	.word	0x08002c49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	73fb      	strb	r3, [r7, #15]
      break;
 8002c34:	e02f      	b.n	8002c96 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d024      	beq.n	8002c8c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c46:	e021      	b.n	8002c8c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c50:	d11e      	bne.n	8002c90 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c56:	e01b      	b.n	8002c90 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d902      	bls.n	8002c64 <DMA_CheckFifoParam+0xb4>
 8002c5e:	2b03      	cmp	r3, #3
 8002c60:	d003      	beq.n	8002c6a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c62:	e018      	b.n	8002c96 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	73fb      	strb	r3, [r7, #15]
      break;
 8002c68:	e015      	b.n	8002c96 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00e      	beq.n	8002c94 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	73fb      	strb	r3, [r7, #15]
      break;
 8002c7a:	e00b      	b.n	8002c94 <DMA_CheckFifoParam+0xe4>
      break;
 8002c7c:	bf00      	nop
 8002c7e:	e00a      	b.n	8002c96 <DMA_CheckFifoParam+0xe6>
      break;
 8002c80:	bf00      	nop
 8002c82:	e008      	b.n	8002c96 <DMA_CheckFifoParam+0xe6>
      break;
 8002c84:	bf00      	nop
 8002c86:	e006      	b.n	8002c96 <DMA_CheckFifoParam+0xe6>
      break;
 8002c88:	bf00      	nop
 8002c8a:	e004      	b.n	8002c96 <DMA_CheckFifoParam+0xe6>
      break;
 8002c8c:	bf00      	nop
 8002c8e:	e002      	b.n	8002c96 <DMA_CheckFifoParam+0xe6>
      break;   
 8002c90:	bf00      	nop
 8002c92:	e000      	b.n	8002c96 <DMA_CheckFifoParam+0xe6>
      break;
 8002c94:	bf00      	nop
    }
  } 
  
  return status; 
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b089      	sub	sp, #36	; 0x24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
 8002cbe:	e159      	b.n	8002f74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	f040 8148 	bne.w	8002f6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d00b      	beq.n	8002cfe <HAL_GPIO_Init+0x5a>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d007      	beq.n	8002cfe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cf2:	2b11      	cmp	r3, #17
 8002cf4:	d003      	beq.n	8002cfe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b12      	cmp	r3, #18
 8002cfc:	d130      	bne.n	8002d60 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	2203      	movs	r2, #3
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d34:	2201      	movs	r2, #1
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	091b      	lsrs	r3, r3, #4
 8002d4a:	f003 0201 	and.w	r2, r3, #1
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	2203      	movs	r2, #3
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	43db      	mvns	r3, r3
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4013      	ands	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d003      	beq.n	8002da0 <HAL_GPIO_Init+0xfc>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b12      	cmp	r3, #18
 8002d9e:	d123      	bne.n	8002de8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	08da      	lsrs	r2, r3, #3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3208      	adds	r2, #8
 8002da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	220f      	movs	r2, #15
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	08da      	lsrs	r2, r3, #3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3208      	adds	r2, #8
 8002de2:	69b9      	ldr	r1, [r7, #24]
 8002de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	2203      	movs	r2, #3
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f003 0203 	and.w	r2, r3, #3
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 80a2 	beq.w	8002f6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	4b56      	ldr	r3, [pc, #344]	; (8002f88 <HAL_GPIO_Init+0x2e4>)
 8002e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e32:	4a55      	ldr	r2, [pc, #340]	; (8002f88 <HAL_GPIO_Init+0x2e4>)
 8002e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e38:	6453      	str	r3, [r2, #68]	; 0x44
 8002e3a:	4b53      	ldr	r3, [pc, #332]	; (8002f88 <HAL_GPIO_Init+0x2e4>)
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e46:	4a51      	ldr	r2, [pc, #324]	; (8002f8c <HAL_GPIO_Init+0x2e8>)
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	089b      	lsrs	r3, r3, #2
 8002e4c:	3302      	adds	r3, #2
 8002e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	220f      	movs	r2, #15
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43db      	mvns	r3, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4013      	ands	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a48      	ldr	r2, [pc, #288]	; (8002f90 <HAL_GPIO_Init+0x2ec>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d019      	beq.n	8002ea6 <HAL_GPIO_Init+0x202>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a47      	ldr	r2, [pc, #284]	; (8002f94 <HAL_GPIO_Init+0x2f0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d013      	beq.n	8002ea2 <HAL_GPIO_Init+0x1fe>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a46      	ldr	r2, [pc, #280]	; (8002f98 <HAL_GPIO_Init+0x2f4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d00d      	beq.n	8002e9e <HAL_GPIO_Init+0x1fa>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a45      	ldr	r2, [pc, #276]	; (8002f9c <HAL_GPIO_Init+0x2f8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d007      	beq.n	8002e9a <HAL_GPIO_Init+0x1f6>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a44      	ldr	r2, [pc, #272]	; (8002fa0 <HAL_GPIO_Init+0x2fc>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d101      	bne.n	8002e96 <HAL_GPIO_Init+0x1f2>
 8002e92:	2304      	movs	r3, #4
 8002e94:	e008      	b.n	8002ea8 <HAL_GPIO_Init+0x204>
 8002e96:	2307      	movs	r3, #7
 8002e98:	e006      	b.n	8002ea8 <HAL_GPIO_Init+0x204>
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e004      	b.n	8002ea8 <HAL_GPIO_Init+0x204>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e002      	b.n	8002ea8 <HAL_GPIO_Init+0x204>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <HAL_GPIO_Init+0x204>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	69fa      	ldr	r2, [r7, #28]
 8002eaa:	f002 0203 	and.w	r2, r2, #3
 8002eae:	0092      	lsls	r2, r2, #2
 8002eb0:	4093      	lsls	r3, r2
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002eb8:	4934      	ldr	r1, [pc, #208]	; (8002f8c <HAL_GPIO_Init+0x2e8>)
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	089b      	lsrs	r3, r3, #2
 8002ebe:	3302      	adds	r3, #2
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ec6:	4b37      	ldr	r3, [pc, #220]	; (8002fa4 <HAL_GPIO_Init+0x300>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002eea:	4a2e      	ldr	r2, [pc, #184]	; (8002fa4 <HAL_GPIO_Init+0x300>)
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ef0:	4b2c      	ldr	r3, [pc, #176]	; (8002fa4 <HAL_GPIO_Init+0x300>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4013      	ands	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f14:	4a23      	ldr	r2, [pc, #140]	; (8002fa4 <HAL_GPIO_Init+0x300>)
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f1a:	4b22      	ldr	r3, [pc, #136]	; (8002fa4 <HAL_GPIO_Init+0x300>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	43db      	mvns	r3, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4013      	ands	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f3e:	4a19      	ldr	r2, [pc, #100]	; (8002fa4 <HAL_GPIO_Init+0x300>)
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f44:	4b17      	ldr	r3, [pc, #92]	; (8002fa4 <HAL_GPIO_Init+0x300>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4013      	ands	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f68:	4a0e      	ldr	r2, [pc, #56]	; (8002fa4 <HAL_GPIO_Init+0x300>)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	3301      	adds	r3, #1
 8002f72:	61fb      	str	r3, [r7, #28]
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	2b0f      	cmp	r3, #15
 8002f78:	f67f aea2 	bls.w	8002cc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f7c:	bf00      	nop
 8002f7e:	3724      	adds	r7, #36	; 0x24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	40013800 	.word	0x40013800
 8002f90:	40020000 	.word	0x40020000
 8002f94:	40020400 	.word	0x40020400
 8002f98:	40020800 	.word	0x40020800
 8002f9c:	40020c00 	.word	0x40020c00
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	40013c00 	.word	0x40013c00

08002fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	807b      	strh	r3, [r7, #2]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fb8:	787b      	ldrb	r3, [r7, #1]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fbe:	887a      	ldrh	r2, [r7, #2]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fc4:	e003      	b.n	8002fce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fc6:	887b      	ldrh	r3, [r7, #2]
 8002fc8:	041a      	lsls	r2, r3, #16
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	619a      	str	r2, [r3, #24]
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
	...

08002fdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e25b      	b.n	80034a6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d075      	beq.n	80030e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ffa:	4ba3      	ldr	r3, [pc, #652]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
 8003002:	2b04      	cmp	r3, #4
 8003004:	d00c      	beq.n	8003020 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003006:	4ba0      	ldr	r3, [pc, #640]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800300e:	2b08      	cmp	r3, #8
 8003010:	d112      	bne.n	8003038 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003012:	4b9d      	ldr	r3, [pc, #628]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800301a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800301e:	d10b      	bne.n	8003038 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003020:	4b99      	ldr	r3, [pc, #612]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d05b      	beq.n	80030e4 <HAL_RCC_OscConfig+0x108>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d157      	bne.n	80030e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e236      	b.n	80034a6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003040:	d106      	bne.n	8003050 <HAL_RCC_OscConfig+0x74>
 8003042:	4b91      	ldr	r3, [pc, #580]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a90      	ldr	r2, [pc, #576]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 8003048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	e01d      	b.n	800308c <HAL_RCC_OscConfig+0xb0>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003058:	d10c      	bne.n	8003074 <HAL_RCC_OscConfig+0x98>
 800305a:	4b8b      	ldr	r3, [pc, #556]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a8a      	ldr	r2, [pc, #552]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 8003060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	4b88      	ldr	r3, [pc, #544]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a87      	ldr	r2, [pc, #540]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 800306c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	e00b      	b.n	800308c <HAL_RCC_OscConfig+0xb0>
 8003074:	4b84      	ldr	r3, [pc, #528]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a83      	ldr	r2, [pc, #524]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 800307a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800307e:	6013      	str	r3, [r2, #0]
 8003080:	4b81      	ldr	r3, [pc, #516]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a80      	ldr	r2, [pc, #512]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 8003086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800308a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d013      	beq.n	80030bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003094:	f7ff f9bc 	bl	8002410 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800309c:	f7ff f9b8 	bl	8002410 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b64      	cmp	r3, #100	; 0x64
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e1fb      	b.n	80034a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ae:	4b76      	ldr	r3, [pc, #472]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0f0      	beq.n	800309c <HAL_RCC_OscConfig+0xc0>
 80030ba:	e014      	b.n	80030e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030bc:	f7ff f9a8 	bl	8002410 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030c4:	f7ff f9a4 	bl	8002410 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b64      	cmp	r3, #100	; 0x64
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e1e7      	b.n	80034a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030d6:	4b6c      	ldr	r3, [pc, #432]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0xe8>
 80030e2:	e000      	b.n	80030e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d063      	beq.n	80031ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030f2:	4b65      	ldr	r3, [pc, #404]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 030c 	and.w	r3, r3, #12
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00b      	beq.n	8003116 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030fe:	4b62      	ldr	r3, [pc, #392]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003106:	2b08      	cmp	r3, #8
 8003108:	d11c      	bne.n	8003144 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800310a:	4b5f      	ldr	r3, [pc, #380]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d116      	bne.n	8003144 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003116:	4b5c      	ldr	r3, [pc, #368]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d005      	beq.n	800312e <HAL_RCC_OscConfig+0x152>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d001      	beq.n	800312e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e1bb      	b.n	80034a6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800312e:	4b56      	ldr	r3, [pc, #344]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4952      	ldr	r1, [pc, #328]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 800313e:	4313      	orrs	r3, r2
 8003140:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003142:	e03a      	b.n	80031ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d020      	beq.n	800318e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800314c:	4b4f      	ldr	r3, [pc, #316]	; (800328c <HAL_RCC_OscConfig+0x2b0>)
 800314e:	2201      	movs	r2, #1
 8003150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003152:	f7ff f95d 	bl	8002410 <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003158:	e008      	b.n	800316c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800315a:	f7ff f959 	bl	8002410 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e19c      	b.n	80034a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316c:	4b46      	ldr	r3, [pc, #280]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0f0      	beq.n	800315a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003178:	4b43      	ldr	r3, [pc, #268]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	4940      	ldr	r1, [pc, #256]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 8003188:	4313      	orrs	r3, r2
 800318a:	600b      	str	r3, [r1, #0]
 800318c:	e015      	b.n	80031ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800318e:	4b3f      	ldr	r3, [pc, #252]	; (800328c <HAL_RCC_OscConfig+0x2b0>)
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003194:	f7ff f93c 	bl	8002410 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800319c:	f7ff f938 	bl	8002410 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e17b      	b.n	80034a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ae:	4b36      	ldr	r3, [pc, #216]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f0      	bne.n	800319c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d030      	beq.n	8003228 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d016      	beq.n	80031fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ce:	4b30      	ldr	r3, [pc, #192]	; (8003290 <HAL_RCC_OscConfig+0x2b4>)
 80031d0:	2201      	movs	r2, #1
 80031d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d4:	f7ff f91c 	bl	8002410 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031dc:	f7ff f918 	bl	8002410 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e15b      	b.n	80034a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ee:	4b26      	ldr	r3, [pc, #152]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 80031f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f0      	beq.n	80031dc <HAL_RCC_OscConfig+0x200>
 80031fa:	e015      	b.n	8003228 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031fc:	4b24      	ldr	r3, [pc, #144]	; (8003290 <HAL_RCC_OscConfig+0x2b4>)
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003202:	f7ff f905 	bl	8002410 <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800320a:	f7ff f901 	bl	8002410 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e144      	b.n	80034a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800321c:	4b1a      	ldr	r3, [pc, #104]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 800321e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1f0      	bne.n	800320a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 80a0 	beq.w	8003376 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003236:	2300      	movs	r3, #0
 8003238:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800323a:	4b13      	ldr	r3, [pc, #76]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10f      	bne.n	8003266 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003246:	2300      	movs	r3, #0
 8003248:	60bb      	str	r3, [r7, #8]
 800324a:	4b0f      	ldr	r3, [pc, #60]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	4a0e      	ldr	r2, [pc, #56]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 8003250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003254:	6413      	str	r3, [r2, #64]	; 0x40
 8003256:	4b0c      	ldr	r3, [pc, #48]	; (8003288 <HAL_RCC_OscConfig+0x2ac>)
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325e:	60bb      	str	r3, [r7, #8]
 8003260:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003262:	2301      	movs	r3, #1
 8003264:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003266:	4b0b      	ldr	r3, [pc, #44]	; (8003294 <HAL_RCC_OscConfig+0x2b8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326e:	2b00      	cmp	r3, #0
 8003270:	d121      	bne.n	80032b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003272:	4b08      	ldr	r3, [pc, #32]	; (8003294 <HAL_RCC_OscConfig+0x2b8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a07      	ldr	r2, [pc, #28]	; (8003294 <HAL_RCC_OscConfig+0x2b8>)
 8003278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800327c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800327e:	f7ff f8c7 	bl	8002410 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003284:	e011      	b.n	80032aa <HAL_RCC_OscConfig+0x2ce>
 8003286:	bf00      	nop
 8003288:	40023800 	.word	0x40023800
 800328c:	42470000 	.word	0x42470000
 8003290:	42470e80 	.word	0x42470e80
 8003294:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003298:	f7ff f8ba 	bl	8002410 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e0fd      	b.n	80034a6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032aa:	4b81      	ldr	r3, [pc, #516]	; (80034b0 <HAL_RCC_OscConfig+0x4d4>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d106      	bne.n	80032cc <HAL_RCC_OscConfig+0x2f0>
 80032be:	4b7d      	ldr	r3, [pc, #500]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 80032c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c2:	4a7c      	ldr	r2, [pc, #496]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 80032c4:	f043 0301 	orr.w	r3, r3, #1
 80032c8:	6713      	str	r3, [r2, #112]	; 0x70
 80032ca:	e01c      	b.n	8003306 <HAL_RCC_OscConfig+0x32a>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	2b05      	cmp	r3, #5
 80032d2:	d10c      	bne.n	80032ee <HAL_RCC_OscConfig+0x312>
 80032d4:	4b77      	ldr	r3, [pc, #476]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 80032d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d8:	4a76      	ldr	r2, [pc, #472]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 80032da:	f043 0304 	orr.w	r3, r3, #4
 80032de:	6713      	str	r3, [r2, #112]	; 0x70
 80032e0:	4b74      	ldr	r3, [pc, #464]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 80032e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e4:	4a73      	ldr	r2, [pc, #460]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	6713      	str	r3, [r2, #112]	; 0x70
 80032ec:	e00b      	b.n	8003306 <HAL_RCC_OscConfig+0x32a>
 80032ee:	4b71      	ldr	r3, [pc, #452]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 80032f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f2:	4a70      	ldr	r2, [pc, #448]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 80032f4:	f023 0301 	bic.w	r3, r3, #1
 80032f8:	6713      	str	r3, [r2, #112]	; 0x70
 80032fa:	4b6e      	ldr	r3, [pc, #440]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 80032fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fe:	4a6d      	ldr	r2, [pc, #436]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 8003300:	f023 0304 	bic.w	r3, r3, #4
 8003304:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d015      	beq.n	800333a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330e:	f7ff f87f 	bl	8002410 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003314:	e00a      	b.n	800332c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003316:	f7ff f87b 	bl	8002410 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	f241 3288 	movw	r2, #5000	; 0x1388
 8003324:	4293      	cmp	r3, r2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e0bc      	b.n	80034a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800332c:	4b61      	ldr	r3, [pc, #388]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 800332e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0ee      	beq.n	8003316 <HAL_RCC_OscConfig+0x33a>
 8003338:	e014      	b.n	8003364 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800333a:	f7ff f869 	bl	8002410 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003340:	e00a      	b.n	8003358 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003342:	f7ff f865 	bl	8002410 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003350:	4293      	cmp	r3, r2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e0a6      	b.n	80034a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003358:	4b56      	ldr	r3, [pc, #344]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 800335a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1ee      	bne.n	8003342 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003364:	7dfb      	ldrb	r3, [r7, #23]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d105      	bne.n	8003376 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800336a:	4b52      	ldr	r3, [pc, #328]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	4a51      	ldr	r2, [pc, #324]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 8003370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003374:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 8092 	beq.w	80034a4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003380:	4b4c      	ldr	r3, [pc, #304]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 030c 	and.w	r3, r3, #12
 8003388:	2b08      	cmp	r3, #8
 800338a:	d05c      	beq.n	8003446 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	2b02      	cmp	r3, #2
 8003392:	d141      	bne.n	8003418 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003394:	4b48      	ldr	r3, [pc, #288]	; (80034b8 <HAL_RCC_OscConfig+0x4dc>)
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339a:	f7ff f839 	bl	8002410 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a2:	f7ff f835 	bl	8002410 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e078      	b.n	80034a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b4:	4b3f      	ldr	r3, [pc, #252]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1f0      	bne.n	80033a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	69da      	ldr	r2, [r3, #28]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	431a      	orrs	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ce:	019b      	lsls	r3, r3, #6
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d6:	085b      	lsrs	r3, r3, #1
 80033d8:	3b01      	subs	r3, #1
 80033da:	041b      	lsls	r3, r3, #16
 80033dc:	431a      	orrs	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	061b      	lsls	r3, r3, #24
 80033e4:	4933      	ldr	r1, [pc, #204]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033ea:	4b33      	ldr	r3, [pc, #204]	; (80034b8 <HAL_RCC_OscConfig+0x4dc>)
 80033ec:	2201      	movs	r2, #1
 80033ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f0:	f7ff f80e 	bl	8002410 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f8:	f7ff f80a 	bl	8002410 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e04d      	b.n	80034a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800340a:	4b2a      	ldr	r3, [pc, #168]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0f0      	beq.n	80033f8 <HAL_RCC_OscConfig+0x41c>
 8003416:	e045      	b.n	80034a4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003418:	4b27      	ldr	r3, [pc, #156]	; (80034b8 <HAL_RCC_OscConfig+0x4dc>)
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341e:	f7fe fff7 	bl	8002410 <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003424:	e008      	b.n	8003438 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003426:	f7fe fff3 	bl	8002410 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e036      	b.n	80034a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003438:	4b1e      	ldr	r3, [pc, #120]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1f0      	bne.n	8003426 <HAL_RCC_OscConfig+0x44a>
 8003444:	e02e      	b.n	80034a4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d101      	bne.n	8003452 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e029      	b.n	80034a6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003452:	4b18      	ldr	r3, [pc, #96]	; (80034b4 <HAL_RCC_OscConfig+0x4d8>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	429a      	cmp	r2, r3
 8003464:	d11c      	bne.n	80034a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003470:	429a      	cmp	r2, r3
 8003472:	d115      	bne.n	80034a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800347a:	4013      	ands	r3, r2
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003480:	4293      	cmp	r3, r2
 8003482:	d10d      	bne.n	80034a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800348e:	429a      	cmp	r2, r3
 8003490:	d106      	bne.n	80034a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800349c:	429a      	cmp	r2, r3
 800349e:	d001      	beq.n	80034a4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e000      	b.n	80034a6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3718      	adds	r7, #24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	40007000 	.word	0x40007000
 80034b4:	40023800 	.word	0x40023800
 80034b8:	42470060 	.word	0x42470060

080034bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e0cc      	b.n	800366a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034d0:	4b68      	ldr	r3, [pc, #416]	; (8003674 <HAL_RCC_ClockConfig+0x1b8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 030f 	and.w	r3, r3, #15
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d90c      	bls.n	80034f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034de:	4b65      	ldr	r3, [pc, #404]	; (8003674 <HAL_RCC_ClockConfig+0x1b8>)
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e6:	4b63      	ldr	r3, [pc, #396]	; (8003674 <HAL_RCC_ClockConfig+0x1b8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d001      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0b8      	b.n	800366a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d020      	beq.n	8003546 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	d005      	beq.n	800351c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003510:	4b59      	ldr	r3, [pc, #356]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	4a58      	ldr	r2, [pc, #352]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800351a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0308 	and.w	r3, r3, #8
 8003524:	2b00      	cmp	r3, #0
 8003526:	d005      	beq.n	8003534 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003528:	4b53      	ldr	r3, [pc, #332]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	4a52      	ldr	r2, [pc, #328]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003532:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003534:	4b50      	ldr	r3, [pc, #320]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	494d      	ldr	r1, [pc, #308]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	4313      	orrs	r3, r2
 8003544:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d044      	beq.n	80035dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d107      	bne.n	800356a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355a:	4b47      	ldr	r3, [pc, #284]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d119      	bne.n	800359a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e07f      	b.n	800366a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b02      	cmp	r3, #2
 8003570:	d003      	beq.n	800357a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003576:	2b03      	cmp	r3, #3
 8003578:	d107      	bne.n	800358a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800357a:	4b3f      	ldr	r3, [pc, #252]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d109      	bne.n	800359a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e06f      	b.n	800366a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800358a:	4b3b      	ldr	r3, [pc, #236]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e067      	b.n	800366a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800359a:	4b37      	ldr	r3, [pc, #220]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f023 0203 	bic.w	r2, r3, #3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	4934      	ldr	r1, [pc, #208]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035ac:	f7fe ff30 	bl	8002410 <HAL_GetTick>
 80035b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b2:	e00a      	b.n	80035ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b4:	f7fe ff2c 	bl	8002410 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e04f      	b.n	800366a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ca:	4b2b      	ldr	r3, [pc, #172]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 020c 	and.w	r2, r3, #12
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	429a      	cmp	r2, r3
 80035da:	d1eb      	bne.n	80035b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035dc:	4b25      	ldr	r3, [pc, #148]	; (8003674 <HAL_RCC_ClockConfig+0x1b8>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 030f 	and.w	r3, r3, #15
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d20c      	bcs.n	8003604 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ea:	4b22      	ldr	r3, [pc, #136]	; (8003674 <HAL_RCC_ClockConfig+0x1b8>)
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f2:	4b20      	ldr	r3, [pc, #128]	; (8003674 <HAL_RCC_ClockConfig+0x1b8>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d001      	beq.n	8003604 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e032      	b.n	800366a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d008      	beq.n	8003622 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003610:	4b19      	ldr	r3, [pc, #100]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	4916      	ldr	r1, [pc, #88]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	4313      	orrs	r3, r2
 8003620:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0308 	and.w	r3, r3, #8
 800362a:	2b00      	cmp	r3, #0
 800362c:	d009      	beq.n	8003642 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800362e:	4b12      	ldr	r3, [pc, #72]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	490e      	ldr	r1, [pc, #56]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	4313      	orrs	r3, r2
 8003640:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003642:	f000 f821 	bl	8003688 <HAL_RCC_GetSysClockFreq>
 8003646:	4601      	mov	r1, r0
 8003648:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	091b      	lsrs	r3, r3, #4
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	4a0a      	ldr	r2, [pc, #40]	; (800367c <HAL_RCC_ClockConfig+0x1c0>)
 8003654:	5cd3      	ldrb	r3, [r2, r3]
 8003656:	fa21 f303 	lsr.w	r3, r1, r3
 800365a:	4a09      	ldr	r2, [pc, #36]	; (8003680 <HAL_RCC_ClockConfig+0x1c4>)
 800365c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800365e:	4b09      	ldr	r3, [pc, #36]	; (8003684 <HAL_RCC_ClockConfig+0x1c8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f7fe fe90 	bl	8002388 <HAL_InitTick>

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	40023c00 	.word	0x40023c00
 8003678:	40023800 	.word	0x40023800
 800367c:	08005104 	.word	0x08005104
 8003680:	20001134 	.word	0x20001134
 8003684:	20001138 	.word	0x20001138

08003688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	607b      	str	r3, [r7, #4]
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	2300      	movs	r3, #0
 8003698:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800369a:	2300      	movs	r3, #0
 800369c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800369e:	4b63      	ldr	r3, [pc, #396]	; (800382c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 030c 	and.w	r3, r3, #12
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d007      	beq.n	80036ba <HAL_RCC_GetSysClockFreq+0x32>
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d008      	beq.n	80036c0 <HAL_RCC_GetSysClockFreq+0x38>
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f040 80b4 	bne.w	800381c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036b4:	4b5e      	ldr	r3, [pc, #376]	; (8003830 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80036b6:	60bb      	str	r3, [r7, #8]
       break;
 80036b8:	e0b3      	b.n	8003822 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036ba:	4b5e      	ldr	r3, [pc, #376]	; (8003834 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80036bc:	60bb      	str	r3, [r7, #8]
      break;
 80036be:	e0b0      	b.n	8003822 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036c0:	4b5a      	ldr	r3, [pc, #360]	; (800382c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036ca:	4b58      	ldr	r3, [pc, #352]	; (800382c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d04a      	beq.n	800376c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036d6:	4b55      	ldr	r3, [pc, #340]	; (800382c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	099b      	lsrs	r3, r3, #6
 80036dc:	f04f 0400 	mov.w	r4, #0
 80036e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036e4:	f04f 0200 	mov.w	r2, #0
 80036e8:	ea03 0501 	and.w	r5, r3, r1
 80036ec:	ea04 0602 	and.w	r6, r4, r2
 80036f0:	4629      	mov	r1, r5
 80036f2:	4632      	mov	r2, r6
 80036f4:	f04f 0300 	mov.w	r3, #0
 80036f8:	f04f 0400 	mov.w	r4, #0
 80036fc:	0154      	lsls	r4, r2, #5
 80036fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003702:	014b      	lsls	r3, r1, #5
 8003704:	4619      	mov	r1, r3
 8003706:	4622      	mov	r2, r4
 8003708:	1b49      	subs	r1, r1, r5
 800370a:	eb62 0206 	sbc.w	r2, r2, r6
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	f04f 0400 	mov.w	r4, #0
 8003716:	0194      	lsls	r4, r2, #6
 8003718:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800371c:	018b      	lsls	r3, r1, #6
 800371e:	1a5b      	subs	r3, r3, r1
 8003720:	eb64 0402 	sbc.w	r4, r4, r2
 8003724:	f04f 0100 	mov.w	r1, #0
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	00e2      	lsls	r2, r4, #3
 800372e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003732:	00d9      	lsls	r1, r3, #3
 8003734:	460b      	mov	r3, r1
 8003736:	4614      	mov	r4, r2
 8003738:	195b      	adds	r3, r3, r5
 800373a:	eb44 0406 	adc.w	r4, r4, r6
 800373e:	f04f 0100 	mov.w	r1, #0
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	0262      	lsls	r2, r4, #9
 8003748:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800374c:	0259      	lsls	r1, r3, #9
 800374e:	460b      	mov	r3, r1
 8003750:	4614      	mov	r4, r2
 8003752:	4618      	mov	r0, r3
 8003754:	4621      	mov	r1, r4
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f04f 0400 	mov.w	r4, #0
 800375c:	461a      	mov	r2, r3
 800375e:	4623      	mov	r3, r4
 8003760:	f7fc fd8e 	bl	8000280 <__aeabi_uldivmod>
 8003764:	4603      	mov	r3, r0
 8003766:	460c      	mov	r4, r1
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	e049      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800376c:	4b2f      	ldr	r3, [pc, #188]	; (800382c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	099b      	lsrs	r3, r3, #6
 8003772:	f04f 0400 	mov.w	r4, #0
 8003776:	f240 11ff 	movw	r1, #511	; 0x1ff
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	ea03 0501 	and.w	r5, r3, r1
 8003782:	ea04 0602 	and.w	r6, r4, r2
 8003786:	4629      	mov	r1, r5
 8003788:	4632      	mov	r2, r6
 800378a:	f04f 0300 	mov.w	r3, #0
 800378e:	f04f 0400 	mov.w	r4, #0
 8003792:	0154      	lsls	r4, r2, #5
 8003794:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003798:	014b      	lsls	r3, r1, #5
 800379a:	4619      	mov	r1, r3
 800379c:	4622      	mov	r2, r4
 800379e:	1b49      	subs	r1, r1, r5
 80037a0:	eb62 0206 	sbc.w	r2, r2, r6
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	f04f 0400 	mov.w	r4, #0
 80037ac:	0194      	lsls	r4, r2, #6
 80037ae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037b2:	018b      	lsls	r3, r1, #6
 80037b4:	1a5b      	subs	r3, r3, r1
 80037b6:	eb64 0402 	sbc.w	r4, r4, r2
 80037ba:	f04f 0100 	mov.w	r1, #0
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	00e2      	lsls	r2, r4, #3
 80037c4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037c8:	00d9      	lsls	r1, r3, #3
 80037ca:	460b      	mov	r3, r1
 80037cc:	4614      	mov	r4, r2
 80037ce:	195b      	adds	r3, r3, r5
 80037d0:	eb44 0406 	adc.w	r4, r4, r6
 80037d4:	f04f 0100 	mov.w	r1, #0
 80037d8:	f04f 0200 	mov.w	r2, #0
 80037dc:	02a2      	lsls	r2, r4, #10
 80037de:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80037e2:	0299      	lsls	r1, r3, #10
 80037e4:	460b      	mov	r3, r1
 80037e6:	4614      	mov	r4, r2
 80037e8:	4618      	mov	r0, r3
 80037ea:	4621      	mov	r1, r4
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f04f 0400 	mov.w	r4, #0
 80037f2:	461a      	mov	r2, r3
 80037f4:	4623      	mov	r3, r4
 80037f6:	f7fc fd43 	bl	8000280 <__aeabi_uldivmod>
 80037fa:	4603      	mov	r3, r0
 80037fc:	460c      	mov	r4, r1
 80037fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003800:	4b0a      	ldr	r3, [pc, #40]	; (800382c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	0c1b      	lsrs	r3, r3, #16
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	3301      	adds	r3, #1
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	fbb2 f3f3 	udiv	r3, r2, r3
 8003818:	60bb      	str	r3, [r7, #8]
      break;
 800381a:	e002      	b.n	8003822 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800381c:	4b04      	ldr	r3, [pc, #16]	; (8003830 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800381e:	60bb      	str	r3, [r7, #8]
      break;
 8003820:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003822:	68bb      	ldr	r3, [r7, #8]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800382c:	40023800 	.word	0x40023800
 8003830:	00f42400 	.word	0x00f42400
 8003834:	007a1200 	.word	0x007a1200

08003838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800383c:	4b03      	ldr	r3, [pc, #12]	; (800384c <HAL_RCC_GetHCLKFreq+0x14>)
 800383e:	681b      	ldr	r3, [r3, #0]
}
 8003840:	4618      	mov	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	20001134 	.word	0x20001134

08003850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003854:	f7ff fff0 	bl	8003838 <HAL_RCC_GetHCLKFreq>
 8003858:	4601      	mov	r1, r0
 800385a:	4b05      	ldr	r3, [pc, #20]	; (8003870 <HAL_RCC_GetPCLK1Freq+0x20>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	0a9b      	lsrs	r3, r3, #10
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	4a03      	ldr	r2, [pc, #12]	; (8003874 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003866:	5cd3      	ldrb	r3, [r2, r3]
 8003868:	fa21 f303 	lsr.w	r3, r1, r3
}
 800386c:	4618      	mov	r0, r3
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40023800 	.word	0x40023800
 8003874:	08005114 	.word	0x08005114

08003878 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800387c:	f7ff ffdc 	bl	8003838 <HAL_RCC_GetHCLKFreq>
 8003880:	4601      	mov	r1, r0
 8003882:	4b05      	ldr	r3, [pc, #20]	; (8003898 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	0b5b      	lsrs	r3, r3, #13
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	4a03      	ldr	r2, [pc, #12]	; (800389c <HAL_RCC_GetPCLK2Freq+0x24>)
 800388e:	5cd3      	ldrb	r3, [r2, r3]
 8003890:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003894:	4618      	mov	r0, r3
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40023800 	.word	0x40023800
 800389c:	08005114 	.word	0x08005114

080038a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e03f      	b.n	8003932 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d106      	bne.n	80038cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7fe fc0c 	bl	80020e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2224      	movs	r2, #36	; 0x24
 80038d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 fb97 	bl	8004018 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	691a      	ldr	r2, [r3, #16]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695a      	ldr	r2, [r3, #20]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003908:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68da      	ldr	r2, [r3, #12]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003918:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b088      	sub	sp, #32
 800393e:	af02      	add	r7, sp, #8
 8003940:	60f8      	str	r0, [r7, #12]
 8003942:	60b9      	str	r1, [r7, #8]
 8003944:	603b      	str	r3, [r7, #0]
 8003946:	4613      	mov	r3, r2
 8003948:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800394a:	2300      	movs	r3, #0
 800394c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b20      	cmp	r3, #32
 8003958:	f040 8083 	bne.w	8003a62 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <HAL_UART_Transmit+0x2e>
 8003962:	88fb      	ldrh	r3, [r7, #6]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e07b      	b.n	8003a64 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003972:	2b01      	cmp	r3, #1
 8003974:	d101      	bne.n	800397a <HAL_UART_Transmit+0x40>
 8003976:	2302      	movs	r3, #2
 8003978:	e074      	b.n	8003a64 <HAL_UART_Transmit+0x12a>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2221      	movs	r2, #33	; 0x21
 800398c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003990:	f7fe fd3e 	bl	8002410 <HAL_GetTick>
 8003994:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	88fa      	ldrh	r2, [r7, #6]
 800399a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	88fa      	ldrh	r2, [r7, #6]
 80039a0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80039aa:	e042      	b.n	8003a32 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	3b01      	subs	r3, #1
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c2:	d122      	bne.n	8003a0a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	2200      	movs	r2, #0
 80039cc:	2180      	movs	r1, #128	; 0x80
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 f9b6 	bl	8003d40 <UART_WaitOnFlagUntilTimeout>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e042      	b.n	8003a64 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	461a      	mov	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039f0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d103      	bne.n	8003a02 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	3302      	adds	r3, #2
 80039fe:	60bb      	str	r3, [r7, #8]
 8003a00:	e017      	b.n	8003a32 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	3301      	adds	r3, #1
 8003a06:	60bb      	str	r3, [r7, #8]
 8003a08:	e013      	b.n	8003a32 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2200      	movs	r2, #0
 8003a12:	2180      	movs	r1, #128	; 0x80
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 f993 	bl	8003d40 <UART_WaitOnFlagUntilTimeout>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e01f      	b.n	8003a64 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	60ba      	str	r2, [r7, #8]
 8003a2a:	781a      	ldrb	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1b7      	bne.n	80039ac <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	2200      	movs	r2, #0
 8003a44:	2140      	movs	r1, #64	; 0x40
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 f97a 	bl	8003d40 <UART_WaitOnFlagUntilTimeout>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e006      	b.n	8003a64 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	e000      	b.n	8003a64 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003a62:	2302      	movs	r3, #2
  }
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	4613      	mov	r3, r2
 8003a78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b20      	cmp	r3, #32
 8003a84:	d140      	bne.n	8003b08 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <HAL_UART_Receive_IT+0x26>
 8003a8c:	88fb      	ldrh	r3, [r7, #6]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e039      	b.n	8003b0a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d101      	bne.n	8003aa4 <HAL_UART_Receive_IT+0x38>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	e032      	b.n	8003b0a <HAL_UART_Receive_IT+0x9e>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	88fa      	ldrh	r2, [r7, #6]
 8003ab6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	88fa      	ldrh	r2, [r7, #6]
 8003abc:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2222      	movs	r2, #34	; 0x22
 8003ac8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ae2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	695a      	ldr	r2, [r3, #20]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0201 	orr.w	r2, r2, #1
 8003af2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0220 	orr.w	r2, r2, #32
 8003b02:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003b04:	2300      	movs	r3, #0
 8003b06:	e000      	b.n	8003b0a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003b08:	2302      	movs	r3, #2
  }
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
	...

08003b18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b088      	sub	sp, #32
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10d      	bne.n	8003b6a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	f003 0320 	and.w	r3, r3, #32
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d008      	beq.n	8003b6a <HAL_UART_IRQHandler+0x52>
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	f003 0320 	and.w	r3, r3, #32
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f9d6 	bl	8003f14 <UART_Receive_IT>
      return;
 8003b68:	e0d1      	b.n	8003d0e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 80b0 	beq.w	8003cd2 <HAL_UART_IRQHandler+0x1ba>
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d105      	bne.n	8003b88 <HAL_UART_IRQHandler+0x70>
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 80a5 	beq.w	8003cd2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00a      	beq.n	8003ba8 <HAL_UART_IRQHandler+0x90>
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba0:	f043 0201 	orr.w	r2, r3, #1
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	f003 0304 	and.w	r3, r3, #4
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <HAL_UART_IRQHandler+0xb0>
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d005      	beq.n	8003bc8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc0:	f043 0202 	orr.w	r2, r3, #2
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <HAL_UART_IRQHandler+0xd0>
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d005      	beq.n	8003be8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be0:	f043 0204 	orr.w	r2, r3, #4
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f003 0308 	and.w	r3, r3, #8
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00f      	beq.n	8003c12 <HAL_UART_IRQHandler+0xfa>
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	f003 0320 	and.w	r3, r3, #32
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d104      	bne.n	8003c06 <HAL_UART_IRQHandler+0xee>
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d005      	beq.n	8003c12 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0a:	f043 0208 	orr.w	r2, r3, #8
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d078      	beq.n	8003d0c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	f003 0320 	and.w	r3, r3, #32
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d007      	beq.n	8003c34 <HAL_UART_IRQHandler+0x11c>
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	f003 0320 	and.w	r3, r3, #32
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f970 	bl	8003f14 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3e:	2b40      	cmp	r3, #64	; 0x40
 8003c40:	bf0c      	ite	eq
 8003c42:	2301      	moveq	r3, #1
 8003c44:	2300      	movne	r3, #0
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4e:	f003 0308 	and.w	r3, r3, #8
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d102      	bne.n	8003c5c <HAL_UART_IRQHandler+0x144>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d031      	beq.n	8003cc0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f8b9 	bl	8003dd4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6c:	2b40      	cmp	r3, #64	; 0x40
 8003c6e:	d123      	bne.n	8003cb8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	695a      	ldr	r2, [r3, #20]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c7e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d013      	beq.n	8003cb0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c8c:	4a21      	ldr	r2, [pc, #132]	; (8003d14 <HAL_UART_IRQHandler+0x1fc>)
 8003c8e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7fe fda9 	bl	80027ec <HAL_DMA_Abort_IT>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d016      	beq.n	8003cce <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003caa:	4610      	mov	r0, r2
 8003cac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cae:	e00e      	b.n	8003cce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 f83b 	bl	8003d2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb6:	e00a      	b.n	8003cce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 f837 	bl	8003d2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cbe:	e006      	b.n	8003cce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 f833 	bl	8003d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003ccc:	e01e      	b.n	8003d0c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cce:	bf00      	nop
    return;
 8003cd0:	e01c      	b.n	8003d0c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_UART_IRQHandler+0x1d6>
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f8a6 	bl	8003e38 <UART_Transmit_IT>
    return;
 8003cec:	e00f      	b.n	8003d0e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <HAL_UART_IRQHandler+0x1f6>
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d005      	beq.n	8003d0e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f8ee 	bl	8003ee4 <UART_EndTransmit_IT>
    return;
 8003d08:	bf00      	nop
 8003d0a:	e000      	b.n	8003d0e <HAL_UART_IRQHandler+0x1f6>
    return;
 8003d0c:	bf00      	nop
  }
}
 8003d0e:	3720      	adds	r7, #32
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	08003e11 	.word	0x08003e11

08003d18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	603b      	str	r3, [r7, #0]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d50:	e02c      	b.n	8003dac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d58:	d028      	beq.n	8003dac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d007      	beq.n	8003d70 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d60:	f7fe fb56 	bl	8002410 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d21d      	bcs.n	8003dac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d7e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695a      	ldr	r2, [r3, #20]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 0201 	bic.w	r2, r2, #1
 8003d8e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e00f      	b.n	8003dcc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	4013      	ands	r3, r2
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	bf0c      	ite	eq
 8003dbc:	2301      	moveq	r3, #1
 8003dbe:	2300      	movne	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	79fb      	ldrb	r3, [r7, #7]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d0c3      	beq.n	8003d52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003dea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695a      	ldr	r2, [r3, #20]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 0201 	bic.w	r2, r2, #1
 8003dfa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f7ff ff7e 	bl	8003d2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e30:	bf00      	nop
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b21      	cmp	r3, #33	; 0x21
 8003e4a:	d144      	bne.n	8003ed6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e54:	d11a      	bne.n	8003e8c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	461a      	mov	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e6a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d105      	bne.n	8003e80 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	1c9a      	adds	r2, r3, #2
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	621a      	str	r2, [r3, #32]
 8003e7e:	e00e      	b.n	8003e9e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	1c5a      	adds	r2, r3, #1
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	621a      	str	r2, [r3, #32]
 8003e8a:	e008      	b.n	8003e9e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	1c59      	adds	r1, r3, #1
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6211      	str	r1, [r2, #32]
 8003e96:	781a      	ldrb	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	4619      	mov	r1, r3
 8003eac:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10f      	bne.n	8003ed2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ec0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68da      	ldr	r2, [r3, #12]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ed0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	e000      	b.n	8003ed8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003ed6:	2302      	movs	r3, #2
  }
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003efa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7ff ff07 	bl	8003d18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b22      	cmp	r3, #34	; 0x22
 8003f26:	d171      	bne.n	800400c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f30:	d123      	bne.n	8003f7a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f36:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10e      	bne.n	8003f5e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f56:	1c9a      	adds	r2, r3, #2
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	629a      	str	r2, [r3, #40]	; 0x28
 8003f5c:	e029      	b.n	8003fb2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	629a      	str	r2, [r3, #40]	; 0x28
 8003f78:	e01b      	b.n	8003fb2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10a      	bne.n	8003f98 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6858      	ldr	r0, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8c:	1c59      	adds	r1, r3, #1
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6291      	str	r1, [r2, #40]	; 0x28
 8003f92:	b2c2      	uxtb	r2, r0
 8003f94:	701a      	strb	r2, [r3, #0]
 8003f96:	e00c      	b.n	8003fb2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa4:	1c58      	adds	r0, r3, #1
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	6288      	str	r0, [r1, #40]	; 0x28
 8003faa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d120      	bne.n	8004008 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0220 	bic.w	r2, r2, #32
 8003fd4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fe4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	695a      	ldr	r2, [r3, #20]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0201 	bic.w	r2, r2, #1
 8003ff4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fd feac 	bl	8001d5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004004:	2300      	movs	r3, #0
 8004006:	e002      	b.n	800400e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004008:	2300      	movs	r3, #0
 800400a:	e000      	b.n	800400e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800400c:	2302      	movs	r3, #2
  }
}
 800400e:	4618      	mov	r0, r3
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
	...

08004018 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800401c:	b085      	sub	sp, #20
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	431a      	orrs	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	4313      	orrs	r3, r2
 800404e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800405a:	f023 030c 	bic.w	r3, r3, #12
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6812      	ldr	r2, [r2, #0]
 8004062:	68f9      	ldr	r1, [r7, #12]
 8004064:	430b      	orrs	r3, r1
 8004066:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699a      	ldr	r2, [r3, #24]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004086:	f040 818b 	bne.w	80043a0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4ac1      	ldr	r2, [pc, #772]	; (8004394 <UART_SetConfig+0x37c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d005      	beq.n	80040a0 <UART_SetConfig+0x88>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4abf      	ldr	r2, [pc, #764]	; (8004398 <UART_SetConfig+0x380>)
 800409a:	4293      	cmp	r3, r2
 800409c:	f040 80bd 	bne.w	800421a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040a0:	f7ff fbea 	bl	8003878 <HAL_RCC_GetPCLK2Freq>
 80040a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	461d      	mov	r5, r3
 80040aa:	f04f 0600 	mov.w	r6, #0
 80040ae:	46a8      	mov	r8, r5
 80040b0:	46b1      	mov	r9, r6
 80040b2:	eb18 0308 	adds.w	r3, r8, r8
 80040b6:	eb49 0409 	adc.w	r4, r9, r9
 80040ba:	4698      	mov	r8, r3
 80040bc:	46a1      	mov	r9, r4
 80040be:	eb18 0805 	adds.w	r8, r8, r5
 80040c2:	eb49 0906 	adc.w	r9, r9, r6
 80040c6:	f04f 0100 	mov.w	r1, #0
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80040d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040da:	4688      	mov	r8, r1
 80040dc:	4691      	mov	r9, r2
 80040de:	eb18 0005 	adds.w	r0, r8, r5
 80040e2:	eb49 0106 	adc.w	r1, r9, r6
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	461d      	mov	r5, r3
 80040ec:	f04f 0600 	mov.w	r6, #0
 80040f0:	196b      	adds	r3, r5, r5
 80040f2:	eb46 0406 	adc.w	r4, r6, r6
 80040f6:	461a      	mov	r2, r3
 80040f8:	4623      	mov	r3, r4
 80040fa:	f7fc f8c1 	bl	8000280 <__aeabi_uldivmod>
 80040fe:	4603      	mov	r3, r0
 8004100:	460c      	mov	r4, r1
 8004102:	461a      	mov	r2, r3
 8004104:	4ba5      	ldr	r3, [pc, #660]	; (800439c <UART_SetConfig+0x384>)
 8004106:	fba3 2302 	umull	r2, r3, r3, r2
 800410a:	095b      	lsrs	r3, r3, #5
 800410c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	461d      	mov	r5, r3
 8004114:	f04f 0600 	mov.w	r6, #0
 8004118:	46a9      	mov	r9, r5
 800411a:	46b2      	mov	sl, r6
 800411c:	eb19 0309 	adds.w	r3, r9, r9
 8004120:	eb4a 040a 	adc.w	r4, sl, sl
 8004124:	4699      	mov	r9, r3
 8004126:	46a2      	mov	sl, r4
 8004128:	eb19 0905 	adds.w	r9, r9, r5
 800412c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004130:	f04f 0100 	mov.w	r1, #0
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800413c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004140:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004144:	4689      	mov	r9, r1
 8004146:	4692      	mov	sl, r2
 8004148:	eb19 0005 	adds.w	r0, r9, r5
 800414c:	eb4a 0106 	adc.w	r1, sl, r6
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	461d      	mov	r5, r3
 8004156:	f04f 0600 	mov.w	r6, #0
 800415a:	196b      	adds	r3, r5, r5
 800415c:	eb46 0406 	adc.w	r4, r6, r6
 8004160:	461a      	mov	r2, r3
 8004162:	4623      	mov	r3, r4
 8004164:	f7fc f88c 	bl	8000280 <__aeabi_uldivmod>
 8004168:	4603      	mov	r3, r0
 800416a:	460c      	mov	r4, r1
 800416c:	461a      	mov	r2, r3
 800416e:	4b8b      	ldr	r3, [pc, #556]	; (800439c <UART_SetConfig+0x384>)
 8004170:	fba3 1302 	umull	r1, r3, r3, r2
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	2164      	movs	r1, #100	; 0x64
 8004178:	fb01 f303 	mul.w	r3, r1, r3
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	3332      	adds	r3, #50	; 0x32
 8004182:	4a86      	ldr	r2, [pc, #536]	; (800439c <UART_SetConfig+0x384>)
 8004184:	fba2 2303 	umull	r2, r3, r2, r3
 8004188:	095b      	lsrs	r3, r3, #5
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004190:	4498      	add	r8, r3
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	461d      	mov	r5, r3
 8004196:	f04f 0600 	mov.w	r6, #0
 800419a:	46a9      	mov	r9, r5
 800419c:	46b2      	mov	sl, r6
 800419e:	eb19 0309 	adds.w	r3, r9, r9
 80041a2:	eb4a 040a 	adc.w	r4, sl, sl
 80041a6:	4699      	mov	r9, r3
 80041a8:	46a2      	mov	sl, r4
 80041aa:	eb19 0905 	adds.w	r9, r9, r5
 80041ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80041b2:	f04f 0100 	mov.w	r1, #0
 80041b6:	f04f 0200 	mov.w	r2, #0
 80041ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041c6:	4689      	mov	r9, r1
 80041c8:	4692      	mov	sl, r2
 80041ca:	eb19 0005 	adds.w	r0, r9, r5
 80041ce:	eb4a 0106 	adc.w	r1, sl, r6
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	461d      	mov	r5, r3
 80041d8:	f04f 0600 	mov.w	r6, #0
 80041dc:	196b      	adds	r3, r5, r5
 80041de:	eb46 0406 	adc.w	r4, r6, r6
 80041e2:	461a      	mov	r2, r3
 80041e4:	4623      	mov	r3, r4
 80041e6:	f7fc f84b 	bl	8000280 <__aeabi_uldivmod>
 80041ea:	4603      	mov	r3, r0
 80041ec:	460c      	mov	r4, r1
 80041ee:	461a      	mov	r2, r3
 80041f0:	4b6a      	ldr	r3, [pc, #424]	; (800439c <UART_SetConfig+0x384>)
 80041f2:	fba3 1302 	umull	r1, r3, r3, r2
 80041f6:	095b      	lsrs	r3, r3, #5
 80041f8:	2164      	movs	r1, #100	; 0x64
 80041fa:	fb01 f303 	mul.w	r3, r1, r3
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	3332      	adds	r3, #50	; 0x32
 8004204:	4a65      	ldr	r2, [pc, #404]	; (800439c <UART_SetConfig+0x384>)
 8004206:	fba2 2303 	umull	r2, r3, r2, r3
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	f003 0207 	and.w	r2, r3, #7
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4442      	add	r2, r8
 8004216:	609a      	str	r2, [r3, #8]
 8004218:	e26f      	b.n	80046fa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800421a:	f7ff fb19 	bl	8003850 <HAL_RCC_GetPCLK1Freq>
 800421e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	461d      	mov	r5, r3
 8004224:	f04f 0600 	mov.w	r6, #0
 8004228:	46a8      	mov	r8, r5
 800422a:	46b1      	mov	r9, r6
 800422c:	eb18 0308 	adds.w	r3, r8, r8
 8004230:	eb49 0409 	adc.w	r4, r9, r9
 8004234:	4698      	mov	r8, r3
 8004236:	46a1      	mov	r9, r4
 8004238:	eb18 0805 	adds.w	r8, r8, r5
 800423c:	eb49 0906 	adc.w	r9, r9, r6
 8004240:	f04f 0100 	mov.w	r1, #0
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800424c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004250:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004254:	4688      	mov	r8, r1
 8004256:	4691      	mov	r9, r2
 8004258:	eb18 0005 	adds.w	r0, r8, r5
 800425c:	eb49 0106 	adc.w	r1, r9, r6
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	461d      	mov	r5, r3
 8004266:	f04f 0600 	mov.w	r6, #0
 800426a:	196b      	adds	r3, r5, r5
 800426c:	eb46 0406 	adc.w	r4, r6, r6
 8004270:	461a      	mov	r2, r3
 8004272:	4623      	mov	r3, r4
 8004274:	f7fc f804 	bl	8000280 <__aeabi_uldivmod>
 8004278:	4603      	mov	r3, r0
 800427a:	460c      	mov	r4, r1
 800427c:	461a      	mov	r2, r3
 800427e:	4b47      	ldr	r3, [pc, #284]	; (800439c <UART_SetConfig+0x384>)
 8004280:	fba3 2302 	umull	r2, r3, r3, r2
 8004284:	095b      	lsrs	r3, r3, #5
 8004286:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	461d      	mov	r5, r3
 800428e:	f04f 0600 	mov.w	r6, #0
 8004292:	46a9      	mov	r9, r5
 8004294:	46b2      	mov	sl, r6
 8004296:	eb19 0309 	adds.w	r3, r9, r9
 800429a:	eb4a 040a 	adc.w	r4, sl, sl
 800429e:	4699      	mov	r9, r3
 80042a0:	46a2      	mov	sl, r4
 80042a2:	eb19 0905 	adds.w	r9, r9, r5
 80042a6:	eb4a 0a06 	adc.w	sl, sl, r6
 80042aa:	f04f 0100 	mov.w	r1, #0
 80042ae:	f04f 0200 	mov.w	r2, #0
 80042b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042be:	4689      	mov	r9, r1
 80042c0:	4692      	mov	sl, r2
 80042c2:	eb19 0005 	adds.w	r0, r9, r5
 80042c6:	eb4a 0106 	adc.w	r1, sl, r6
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	461d      	mov	r5, r3
 80042d0:	f04f 0600 	mov.w	r6, #0
 80042d4:	196b      	adds	r3, r5, r5
 80042d6:	eb46 0406 	adc.w	r4, r6, r6
 80042da:	461a      	mov	r2, r3
 80042dc:	4623      	mov	r3, r4
 80042de:	f7fb ffcf 	bl	8000280 <__aeabi_uldivmod>
 80042e2:	4603      	mov	r3, r0
 80042e4:	460c      	mov	r4, r1
 80042e6:	461a      	mov	r2, r3
 80042e8:	4b2c      	ldr	r3, [pc, #176]	; (800439c <UART_SetConfig+0x384>)
 80042ea:	fba3 1302 	umull	r1, r3, r3, r2
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	2164      	movs	r1, #100	; 0x64
 80042f2:	fb01 f303 	mul.w	r3, r1, r3
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	3332      	adds	r3, #50	; 0x32
 80042fc:	4a27      	ldr	r2, [pc, #156]	; (800439c <UART_SetConfig+0x384>)
 80042fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004302:	095b      	lsrs	r3, r3, #5
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800430a:	4498      	add	r8, r3
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	461d      	mov	r5, r3
 8004310:	f04f 0600 	mov.w	r6, #0
 8004314:	46a9      	mov	r9, r5
 8004316:	46b2      	mov	sl, r6
 8004318:	eb19 0309 	adds.w	r3, r9, r9
 800431c:	eb4a 040a 	adc.w	r4, sl, sl
 8004320:	4699      	mov	r9, r3
 8004322:	46a2      	mov	sl, r4
 8004324:	eb19 0905 	adds.w	r9, r9, r5
 8004328:	eb4a 0a06 	adc.w	sl, sl, r6
 800432c:	f04f 0100 	mov.w	r1, #0
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004338:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800433c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004340:	4689      	mov	r9, r1
 8004342:	4692      	mov	sl, r2
 8004344:	eb19 0005 	adds.w	r0, r9, r5
 8004348:	eb4a 0106 	adc.w	r1, sl, r6
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	461d      	mov	r5, r3
 8004352:	f04f 0600 	mov.w	r6, #0
 8004356:	196b      	adds	r3, r5, r5
 8004358:	eb46 0406 	adc.w	r4, r6, r6
 800435c:	461a      	mov	r2, r3
 800435e:	4623      	mov	r3, r4
 8004360:	f7fb ff8e 	bl	8000280 <__aeabi_uldivmod>
 8004364:	4603      	mov	r3, r0
 8004366:	460c      	mov	r4, r1
 8004368:	461a      	mov	r2, r3
 800436a:	4b0c      	ldr	r3, [pc, #48]	; (800439c <UART_SetConfig+0x384>)
 800436c:	fba3 1302 	umull	r1, r3, r3, r2
 8004370:	095b      	lsrs	r3, r3, #5
 8004372:	2164      	movs	r1, #100	; 0x64
 8004374:	fb01 f303 	mul.w	r3, r1, r3
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	00db      	lsls	r3, r3, #3
 800437c:	3332      	adds	r3, #50	; 0x32
 800437e:	4a07      	ldr	r2, [pc, #28]	; (800439c <UART_SetConfig+0x384>)
 8004380:	fba2 2303 	umull	r2, r3, r2, r3
 8004384:	095b      	lsrs	r3, r3, #5
 8004386:	f003 0207 	and.w	r2, r3, #7
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4442      	add	r2, r8
 8004390:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004392:	e1b2      	b.n	80046fa <UART_SetConfig+0x6e2>
 8004394:	40011000 	.word	0x40011000
 8004398:	40011400 	.word	0x40011400
 800439c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4ad7      	ldr	r2, [pc, #860]	; (8004704 <UART_SetConfig+0x6ec>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d005      	beq.n	80043b6 <UART_SetConfig+0x39e>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4ad6      	ldr	r2, [pc, #856]	; (8004708 <UART_SetConfig+0x6f0>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	f040 80d1 	bne.w	8004558 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80043b6:	f7ff fa5f 	bl	8003878 <HAL_RCC_GetPCLK2Freq>
 80043ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	469a      	mov	sl, r3
 80043c0:	f04f 0b00 	mov.w	fp, #0
 80043c4:	46d0      	mov	r8, sl
 80043c6:	46d9      	mov	r9, fp
 80043c8:	eb18 0308 	adds.w	r3, r8, r8
 80043cc:	eb49 0409 	adc.w	r4, r9, r9
 80043d0:	4698      	mov	r8, r3
 80043d2:	46a1      	mov	r9, r4
 80043d4:	eb18 080a 	adds.w	r8, r8, sl
 80043d8:	eb49 090b 	adc.w	r9, r9, fp
 80043dc:	f04f 0100 	mov.w	r1, #0
 80043e0:	f04f 0200 	mov.w	r2, #0
 80043e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80043e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80043ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80043f0:	4688      	mov	r8, r1
 80043f2:	4691      	mov	r9, r2
 80043f4:	eb1a 0508 	adds.w	r5, sl, r8
 80043f8:	eb4b 0609 	adc.w	r6, fp, r9
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	4619      	mov	r1, r3
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	f04f 0300 	mov.w	r3, #0
 800440a:	f04f 0400 	mov.w	r4, #0
 800440e:	0094      	lsls	r4, r2, #2
 8004410:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004414:	008b      	lsls	r3, r1, #2
 8004416:	461a      	mov	r2, r3
 8004418:	4623      	mov	r3, r4
 800441a:	4628      	mov	r0, r5
 800441c:	4631      	mov	r1, r6
 800441e:	f7fb ff2f 	bl	8000280 <__aeabi_uldivmod>
 8004422:	4603      	mov	r3, r0
 8004424:	460c      	mov	r4, r1
 8004426:	461a      	mov	r2, r3
 8004428:	4bb8      	ldr	r3, [pc, #736]	; (800470c <UART_SetConfig+0x6f4>)
 800442a:	fba3 2302 	umull	r2, r3, r3, r2
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	469b      	mov	fp, r3
 8004438:	f04f 0c00 	mov.w	ip, #0
 800443c:	46d9      	mov	r9, fp
 800443e:	46e2      	mov	sl, ip
 8004440:	eb19 0309 	adds.w	r3, r9, r9
 8004444:	eb4a 040a 	adc.w	r4, sl, sl
 8004448:	4699      	mov	r9, r3
 800444a:	46a2      	mov	sl, r4
 800444c:	eb19 090b 	adds.w	r9, r9, fp
 8004450:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004454:	f04f 0100 	mov.w	r1, #0
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004460:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004464:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004468:	4689      	mov	r9, r1
 800446a:	4692      	mov	sl, r2
 800446c:	eb1b 0509 	adds.w	r5, fp, r9
 8004470:	eb4c 060a 	adc.w	r6, ip, sl
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	4619      	mov	r1, r3
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	f04f 0300 	mov.w	r3, #0
 8004482:	f04f 0400 	mov.w	r4, #0
 8004486:	0094      	lsls	r4, r2, #2
 8004488:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800448c:	008b      	lsls	r3, r1, #2
 800448e:	461a      	mov	r2, r3
 8004490:	4623      	mov	r3, r4
 8004492:	4628      	mov	r0, r5
 8004494:	4631      	mov	r1, r6
 8004496:	f7fb fef3 	bl	8000280 <__aeabi_uldivmod>
 800449a:	4603      	mov	r3, r0
 800449c:	460c      	mov	r4, r1
 800449e:	461a      	mov	r2, r3
 80044a0:	4b9a      	ldr	r3, [pc, #616]	; (800470c <UART_SetConfig+0x6f4>)
 80044a2:	fba3 1302 	umull	r1, r3, r3, r2
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	2164      	movs	r1, #100	; 0x64
 80044aa:	fb01 f303 	mul.w	r3, r1, r3
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	011b      	lsls	r3, r3, #4
 80044b2:	3332      	adds	r3, #50	; 0x32
 80044b4:	4a95      	ldr	r2, [pc, #596]	; (800470c <UART_SetConfig+0x6f4>)
 80044b6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ba:	095b      	lsrs	r3, r3, #5
 80044bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044c0:	4498      	add	r8, r3
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	469b      	mov	fp, r3
 80044c6:	f04f 0c00 	mov.w	ip, #0
 80044ca:	46d9      	mov	r9, fp
 80044cc:	46e2      	mov	sl, ip
 80044ce:	eb19 0309 	adds.w	r3, r9, r9
 80044d2:	eb4a 040a 	adc.w	r4, sl, sl
 80044d6:	4699      	mov	r9, r3
 80044d8:	46a2      	mov	sl, r4
 80044da:	eb19 090b 	adds.w	r9, r9, fp
 80044de:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044e2:	f04f 0100 	mov.w	r1, #0
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044f6:	4689      	mov	r9, r1
 80044f8:	4692      	mov	sl, r2
 80044fa:	eb1b 0509 	adds.w	r5, fp, r9
 80044fe:	eb4c 060a 	adc.w	r6, ip, sl
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	4619      	mov	r1, r3
 8004508:	f04f 0200 	mov.w	r2, #0
 800450c:	f04f 0300 	mov.w	r3, #0
 8004510:	f04f 0400 	mov.w	r4, #0
 8004514:	0094      	lsls	r4, r2, #2
 8004516:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800451a:	008b      	lsls	r3, r1, #2
 800451c:	461a      	mov	r2, r3
 800451e:	4623      	mov	r3, r4
 8004520:	4628      	mov	r0, r5
 8004522:	4631      	mov	r1, r6
 8004524:	f7fb feac 	bl	8000280 <__aeabi_uldivmod>
 8004528:	4603      	mov	r3, r0
 800452a:	460c      	mov	r4, r1
 800452c:	461a      	mov	r2, r3
 800452e:	4b77      	ldr	r3, [pc, #476]	; (800470c <UART_SetConfig+0x6f4>)
 8004530:	fba3 1302 	umull	r1, r3, r3, r2
 8004534:	095b      	lsrs	r3, r3, #5
 8004536:	2164      	movs	r1, #100	; 0x64
 8004538:	fb01 f303 	mul.w	r3, r1, r3
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	011b      	lsls	r3, r3, #4
 8004540:	3332      	adds	r3, #50	; 0x32
 8004542:	4a72      	ldr	r2, [pc, #456]	; (800470c <UART_SetConfig+0x6f4>)
 8004544:	fba2 2303 	umull	r2, r3, r2, r3
 8004548:	095b      	lsrs	r3, r3, #5
 800454a:	f003 020f 	and.w	r2, r3, #15
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4442      	add	r2, r8
 8004554:	609a      	str	r2, [r3, #8]
 8004556:	e0d0      	b.n	80046fa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004558:	f7ff f97a 	bl	8003850 <HAL_RCC_GetPCLK1Freq>
 800455c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	469a      	mov	sl, r3
 8004562:	f04f 0b00 	mov.w	fp, #0
 8004566:	46d0      	mov	r8, sl
 8004568:	46d9      	mov	r9, fp
 800456a:	eb18 0308 	adds.w	r3, r8, r8
 800456e:	eb49 0409 	adc.w	r4, r9, r9
 8004572:	4698      	mov	r8, r3
 8004574:	46a1      	mov	r9, r4
 8004576:	eb18 080a 	adds.w	r8, r8, sl
 800457a:	eb49 090b 	adc.w	r9, r9, fp
 800457e:	f04f 0100 	mov.w	r1, #0
 8004582:	f04f 0200 	mov.w	r2, #0
 8004586:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800458a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800458e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004592:	4688      	mov	r8, r1
 8004594:	4691      	mov	r9, r2
 8004596:	eb1a 0508 	adds.w	r5, sl, r8
 800459a:	eb4b 0609 	adc.w	r6, fp, r9
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	4619      	mov	r1, r3
 80045a4:	f04f 0200 	mov.w	r2, #0
 80045a8:	f04f 0300 	mov.w	r3, #0
 80045ac:	f04f 0400 	mov.w	r4, #0
 80045b0:	0094      	lsls	r4, r2, #2
 80045b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045b6:	008b      	lsls	r3, r1, #2
 80045b8:	461a      	mov	r2, r3
 80045ba:	4623      	mov	r3, r4
 80045bc:	4628      	mov	r0, r5
 80045be:	4631      	mov	r1, r6
 80045c0:	f7fb fe5e 	bl	8000280 <__aeabi_uldivmod>
 80045c4:	4603      	mov	r3, r0
 80045c6:	460c      	mov	r4, r1
 80045c8:	461a      	mov	r2, r3
 80045ca:	4b50      	ldr	r3, [pc, #320]	; (800470c <UART_SetConfig+0x6f4>)
 80045cc:	fba3 2302 	umull	r2, r3, r3, r2
 80045d0:	095b      	lsrs	r3, r3, #5
 80045d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	469b      	mov	fp, r3
 80045da:	f04f 0c00 	mov.w	ip, #0
 80045de:	46d9      	mov	r9, fp
 80045e0:	46e2      	mov	sl, ip
 80045e2:	eb19 0309 	adds.w	r3, r9, r9
 80045e6:	eb4a 040a 	adc.w	r4, sl, sl
 80045ea:	4699      	mov	r9, r3
 80045ec:	46a2      	mov	sl, r4
 80045ee:	eb19 090b 	adds.w	r9, r9, fp
 80045f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80045f6:	f04f 0100 	mov.w	r1, #0
 80045fa:	f04f 0200 	mov.w	r2, #0
 80045fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004602:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004606:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800460a:	4689      	mov	r9, r1
 800460c:	4692      	mov	sl, r2
 800460e:	eb1b 0509 	adds.w	r5, fp, r9
 8004612:	eb4c 060a 	adc.w	r6, ip, sl
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	4619      	mov	r1, r3
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	f04f 0300 	mov.w	r3, #0
 8004624:	f04f 0400 	mov.w	r4, #0
 8004628:	0094      	lsls	r4, r2, #2
 800462a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800462e:	008b      	lsls	r3, r1, #2
 8004630:	461a      	mov	r2, r3
 8004632:	4623      	mov	r3, r4
 8004634:	4628      	mov	r0, r5
 8004636:	4631      	mov	r1, r6
 8004638:	f7fb fe22 	bl	8000280 <__aeabi_uldivmod>
 800463c:	4603      	mov	r3, r0
 800463e:	460c      	mov	r4, r1
 8004640:	461a      	mov	r2, r3
 8004642:	4b32      	ldr	r3, [pc, #200]	; (800470c <UART_SetConfig+0x6f4>)
 8004644:	fba3 1302 	umull	r1, r3, r3, r2
 8004648:	095b      	lsrs	r3, r3, #5
 800464a:	2164      	movs	r1, #100	; 0x64
 800464c:	fb01 f303 	mul.w	r3, r1, r3
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	011b      	lsls	r3, r3, #4
 8004654:	3332      	adds	r3, #50	; 0x32
 8004656:	4a2d      	ldr	r2, [pc, #180]	; (800470c <UART_SetConfig+0x6f4>)
 8004658:	fba2 2303 	umull	r2, r3, r2, r3
 800465c:	095b      	lsrs	r3, r3, #5
 800465e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004662:	4498      	add	r8, r3
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	469b      	mov	fp, r3
 8004668:	f04f 0c00 	mov.w	ip, #0
 800466c:	46d9      	mov	r9, fp
 800466e:	46e2      	mov	sl, ip
 8004670:	eb19 0309 	adds.w	r3, r9, r9
 8004674:	eb4a 040a 	adc.w	r4, sl, sl
 8004678:	4699      	mov	r9, r3
 800467a:	46a2      	mov	sl, r4
 800467c:	eb19 090b 	adds.w	r9, r9, fp
 8004680:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004684:	f04f 0100 	mov.w	r1, #0
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004690:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004694:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004698:	4689      	mov	r9, r1
 800469a:	4692      	mov	sl, r2
 800469c:	eb1b 0509 	adds.w	r5, fp, r9
 80046a0:	eb4c 060a 	adc.w	r6, ip, sl
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	4619      	mov	r1, r3
 80046aa:	f04f 0200 	mov.w	r2, #0
 80046ae:	f04f 0300 	mov.w	r3, #0
 80046b2:	f04f 0400 	mov.w	r4, #0
 80046b6:	0094      	lsls	r4, r2, #2
 80046b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046bc:	008b      	lsls	r3, r1, #2
 80046be:	461a      	mov	r2, r3
 80046c0:	4623      	mov	r3, r4
 80046c2:	4628      	mov	r0, r5
 80046c4:	4631      	mov	r1, r6
 80046c6:	f7fb fddb 	bl	8000280 <__aeabi_uldivmod>
 80046ca:	4603      	mov	r3, r0
 80046cc:	460c      	mov	r4, r1
 80046ce:	461a      	mov	r2, r3
 80046d0:	4b0e      	ldr	r3, [pc, #56]	; (800470c <UART_SetConfig+0x6f4>)
 80046d2:	fba3 1302 	umull	r1, r3, r3, r2
 80046d6:	095b      	lsrs	r3, r3, #5
 80046d8:	2164      	movs	r1, #100	; 0x64
 80046da:	fb01 f303 	mul.w	r3, r1, r3
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	3332      	adds	r3, #50	; 0x32
 80046e4:	4a09      	ldr	r2, [pc, #36]	; (800470c <UART_SetConfig+0x6f4>)
 80046e6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	f003 020f 	and.w	r2, r3, #15
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4442      	add	r2, r8
 80046f6:	609a      	str	r2, [r3, #8]
}
 80046f8:	e7ff      	b.n	80046fa <UART_SetConfig+0x6e2>
 80046fa:	bf00      	nop
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004704:	40011000 	.word	0x40011000
 8004708:	40011400 	.word	0x40011400
 800470c:	51eb851f 	.word	0x51eb851f

08004710 <__errno>:
 8004710:	4b01      	ldr	r3, [pc, #4]	; (8004718 <__errno+0x8>)
 8004712:	6818      	ldr	r0, [r3, #0]
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	20001140 	.word	0x20001140

0800471c <__libc_init_array>:
 800471c:	b570      	push	{r4, r5, r6, lr}
 800471e:	4e0d      	ldr	r6, [pc, #52]	; (8004754 <__libc_init_array+0x38>)
 8004720:	4c0d      	ldr	r4, [pc, #52]	; (8004758 <__libc_init_array+0x3c>)
 8004722:	1ba4      	subs	r4, r4, r6
 8004724:	10a4      	asrs	r4, r4, #2
 8004726:	2500      	movs	r5, #0
 8004728:	42a5      	cmp	r5, r4
 800472a:	d109      	bne.n	8004740 <__libc_init_array+0x24>
 800472c:	4e0b      	ldr	r6, [pc, #44]	; (800475c <__libc_init_array+0x40>)
 800472e:	4c0c      	ldr	r4, [pc, #48]	; (8004760 <__libc_init_array+0x44>)
 8004730:	f000 fcba 	bl	80050a8 <_init>
 8004734:	1ba4      	subs	r4, r4, r6
 8004736:	10a4      	asrs	r4, r4, #2
 8004738:	2500      	movs	r5, #0
 800473a:	42a5      	cmp	r5, r4
 800473c:	d105      	bne.n	800474a <__libc_init_array+0x2e>
 800473e:	bd70      	pop	{r4, r5, r6, pc}
 8004740:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004744:	4798      	blx	r3
 8004746:	3501      	adds	r5, #1
 8004748:	e7ee      	b.n	8004728 <__libc_init_array+0xc>
 800474a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800474e:	4798      	blx	r3
 8004750:	3501      	adds	r5, #1
 8004752:	e7f2      	b.n	800473a <__libc_init_array+0x1e>
 8004754:	08005160 	.word	0x08005160
 8004758:	08005160 	.word	0x08005160
 800475c:	08005160 	.word	0x08005160
 8004760:	08005164 	.word	0x08005164

08004764 <memset>:
 8004764:	4402      	add	r2, r0
 8004766:	4603      	mov	r3, r0
 8004768:	4293      	cmp	r3, r2
 800476a:	d100      	bne.n	800476e <memset+0xa>
 800476c:	4770      	bx	lr
 800476e:	f803 1b01 	strb.w	r1, [r3], #1
 8004772:	e7f9      	b.n	8004768 <memset+0x4>

08004774 <srand>:
 8004774:	b538      	push	{r3, r4, r5, lr}
 8004776:	4b0d      	ldr	r3, [pc, #52]	; (80047ac <srand+0x38>)
 8004778:	681c      	ldr	r4, [r3, #0]
 800477a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800477c:	4605      	mov	r5, r0
 800477e:	b97b      	cbnz	r3, 80047a0 <srand+0x2c>
 8004780:	2018      	movs	r0, #24
 8004782:	f000 f89b 	bl	80048bc <malloc>
 8004786:	4a0a      	ldr	r2, [pc, #40]	; (80047b0 <srand+0x3c>)
 8004788:	4b0a      	ldr	r3, [pc, #40]	; (80047b4 <srand+0x40>)
 800478a:	63a0      	str	r0, [r4, #56]	; 0x38
 800478c:	e9c0 2300 	strd	r2, r3, [r0]
 8004790:	4b09      	ldr	r3, [pc, #36]	; (80047b8 <srand+0x44>)
 8004792:	6083      	str	r3, [r0, #8]
 8004794:	230b      	movs	r3, #11
 8004796:	8183      	strh	r3, [r0, #12]
 8004798:	2201      	movs	r2, #1
 800479a:	2300      	movs	r3, #0
 800479c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80047a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80047a2:	2200      	movs	r2, #0
 80047a4:	611d      	str	r5, [r3, #16]
 80047a6:	615a      	str	r2, [r3, #20]
 80047a8:	bd38      	pop	{r3, r4, r5, pc}
 80047aa:	bf00      	nop
 80047ac:	20001140 	.word	0x20001140
 80047b0:	abcd330e 	.word	0xabcd330e
 80047b4:	e66d1234 	.word	0xe66d1234
 80047b8:	0005deec 	.word	0x0005deec

080047bc <rand>:
 80047bc:	b538      	push	{r3, r4, r5, lr}
 80047be:	4b13      	ldr	r3, [pc, #76]	; (800480c <rand+0x50>)
 80047c0:	681c      	ldr	r4, [r3, #0]
 80047c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80047c4:	b97b      	cbnz	r3, 80047e6 <rand+0x2a>
 80047c6:	2018      	movs	r0, #24
 80047c8:	f000 f878 	bl	80048bc <malloc>
 80047cc:	4a10      	ldr	r2, [pc, #64]	; (8004810 <rand+0x54>)
 80047ce:	4b11      	ldr	r3, [pc, #68]	; (8004814 <rand+0x58>)
 80047d0:	63a0      	str	r0, [r4, #56]	; 0x38
 80047d2:	e9c0 2300 	strd	r2, r3, [r0]
 80047d6:	4b10      	ldr	r3, [pc, #64]	; (8004818 <rand+0x5c>)
 80047d8:	6083      	str	r3, [r0, #8]
 80047da:	230b      	movs	r3, #11
 80047dc:	8183      	strh	r3, [r0, #12]
 80047de:	2201      	movs	r2, #1
 80047e0:	2300      	movs	r3, #0
 80047e2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80047e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80047e8:	480c      	ldr	r0, [pc, #48]	; (800481c <rand+0x60>)
 80047ea:	690a      	ldr	r2, [r1, #16]
 80047ec:	694b      	ldr	r3, [r1, #20]
 80047ee:	4c0c      	ldr	r4, [pc, #48]	; (8004820 <rand+0x64>)
 80047f0:	4350      	muls	r0, r2
 80047f2:	fb04 0003 	mla	r0, r4, r3, r0
 80047f6:	fba2 2304 	umull	r2, r3, r2, r4
 80047fa:	4403      	add	r3, r0
 80047fc:	1c54      	adds	r4, r2, #1
 80047fe:	f143 0500 	adc.w	r5, r3, #0
 8004802:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8004806:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800480a:	bd38      	pop	{r3, r4, r5, pc}
 800480c:	20001140 	.word	0x20001140
 8004810:	abcd330e 	.word	0xabcd330e
 8004814:	e66d1234 	.word	0xe66d1234
 8004818:	0005deec 	.word	0x0005deec
 800481c:	5851f42d 	.word	0x5851f42d
 8004820:	4c957f2d 	.word	0x4c957f2d

08004824 <siprintf>:
 8004824:	b40e      	push	{r1, r2, r3}
 8004826:	b500      	push	{lr}
 8004828:	b09c      	sub	sp, #112	; 0x70
 800482a:	ab1d      	add	r3, sp, #116	; 0x74
 800482c:	9002      	str	r0, [sp, #8]
 800482e:	9006      	str	r0, [sp, #24]
 8004830:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004834:	4809      	ldr	r0, [pc, #36]	; (800485c <siprintf+0x38>)
 8004836:	9107      	str	r1, [sp, #28]
 8004838:	9104      	str	r1, [sp, #16]
 800483a:	4909      	ldr	r1, [pc, #36]	; (8004860 <siprintf+0x3c>)
 800483c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004840:	9105      	str	r1, [sp, #20]
 8004842:	6800      	ldr	r0, [r0, #0]
 8004844:	9301      	str	r3, [sp, #4]
 8004846:	a902      	add	r1, sp, #8
 8004848:	f000 f942 	bl	8004ad0 <_svfiprintf_r>
 800484c:	9b02      	ldr	r3, [sp, #8]
 800484e:	2200      	movs	r2, #0
 8004850:	701a      	strb	r2, [r3, #0]
 8004852:	b01c      	add	sp, #112	; 0x70
 8004854:	f85d eb04 	ldr.w	lr, [sp], #4
 8004858:	b003      	add	sp, #12
 800485a:	4770      	bx	lr
 800485c:	20001140 	.word	0x20001140
 8004860:	ffff0208 	.word	0xffff0208

08004864 <time>:
 8004864:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004866:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <time+0x30>)
 8004868:	4604      	mov	r4, r0
 800486a:	2200      	movs	r2, #0
 800486c:	4669      	mov	r1, sp
 800486e:	6818      	ldr	r0, [r3, #0]
 8004870:	f000 f812 	bl	8004898 <_gettimeofday_r>
 8004874:	2800      	cmp	r0, #0
 8004876:	da05      	bge.n	8004884 <time+0x20>
 8004878:	f04f 32ff 	mov.w	r2, #4294967295
 800487c:	f04f 33ff 	mov.w	r3, #4294967295
 8004880:	e9cd 2300 	strd	r2, r3, [sp]
 8004884:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004888:	b10c      	cbz	r4, 800488e <time+0x2a>
 800488a:	e9c4 0100 	strd	r0, r1, [r4]
 800488e:	b004      	add	sp, #16
 8004890:	bd10      	pop	{r4, pc}
 8004892:	bf00      	nop
 8004894:	20001140 	.word	0x20001140

08004898 <_gettimeofday_r>:
 8004898:	b538      	push	{r3, r4, r5, lr}
 800489a:	4c07      	ldr	r4, [pc, #28]	; (80048b8 <_gettimeofday_r+0x20>)
 800489c:	2300      	movs	r3, #0
 800489e:	4605      	mov	r5, r0
 80048a0:	4608      	mov	r0, r1
 80048a2:	4611      	mov	r1, r2
 80048a4:	6023      	str	r3, [r4, #0]
 80048a6:	f000 fbf7 	bl	8005098 <_gettimeofday>
 80048aa:	1c43      	adds	r3, r0, #1
 80048ac:	d102      	bne.n	80048b4 <_gettimeofday_r+0x1c>
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	b103      	cbz	r3, 80048b4 <_gettimeofday_r+0x1c>
 80048b2:	602b      	str	r3, [r5, #0]
 80048b4:	bd38      	pop	{r3, r4, r5, pc}
 80048b6:	bf00      	nop
 80048b8:	20001378 	.word	0x20001378

080048bc <malloc>:
 80048bc:	4b02      	ldr	r3, [pc, #8]	; (80048c8 <malloc+0xc>)
 80048be:	4601      	mov	r1, r0
 80048c0:	6818      	ldr	r0, [r3, #0]
 80048c2:	f000 b851 	b.w	8004968 <_malloc_r>
 80048c6:	bf00      	nop
 80048c8:	20001140 	.word	0x20001140

080048cc <_free_r>:
 80048cc:	b538      	push	{r3, r4, r5, lr}
 80048ce:	4605      	mov	r5, r0
 80048d0:	2900      	cmp	r1, #0
 80048d2:	d045      	beq.n	8004960 <_free_r+0x94>
 80048d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048d8:	1f0c      	subs	r4, r1, #4
 80048da:	2b00      	cmp	r3, #0
 80048dc:	bfb8      	it	lt
 80048de:	18e4      	addlt	r4, r4, r3
 80048e0:	f000 fbaa 	bl	8005038 <__malloc_lock>
 80048e4:	4a1f      	ldr	r2, [pc, #124]	; (8004964 <_free_r+0x98>)
 80048e6:	6813      	ldr	r3, [r2, #0]
 80048e8:	4610      	mov	r0, r2
 80048ea:	b933      	cbnz	r3, 80048fa <_free_r+0x2e>
 80048ec:	6063      	str	r3, [r4, #4]
 80048ee:	6014      	str	r4, [r2, #0]
 80048f0:	4628      	mov	r0, r5
 80048f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048f6:	f000 bba0 	b.w	800503a <__malloc_unlock>
 80048fa:	42a3      	cmp	r3, r4
 80048fc:	d90c      	bls.n	8004918 <_free_r+0x4c>
 80048fe:	6821      	ldr	r1, [r4, #0]
 8004900:	1862      	adds	r2, r4, r1
 8004902:	4293      	cmp	r3, r2
 8004904:	bf04      	itt	eq
 8004906:	681a      	ldreq	r2, [r3, #0]
 8004908:	685b      	ldreq	r3, [r3, #4]
 800490a:	6063      	str	r3, [r4, #4]
 800490c:	bf04      	itt	eq
 800490e:	1852      	addeq	r2, r2, r1
 8004910:	6022      	streq	r2, [r4, #0]
 8004912:	6004      	str	r4, [r0, #0]
 8004914:	e7ec      	b.n	80048f0 <_free_r+0x24>
 8004916:	4613      	mov	r3, r2
 8004918:	685a      	ldr	r2, [r3, #4]
 800491a:	b10a      	cbz	r2, 8004920 <_free_r+0x54>
 800491c:	42a2      	cmp	r2, r4
 800491e:	d9fa      	bls.n	8004916 <_free_r+0x4a>
 8004920:	6819      	ldr	r1, [r3, #0]
 8004922:	1858      	adds	r0, r3, r1
 8004924:	42a0      	cmp	r0, r4
 8004926:	d10b      	bne.n	8004940 <_free_r+0x74>
 8004928:	6820      	ldr	r0, [r4, #0]
 800492a:	4401      	add	r1, r0
 800492c:	1858      	adds	r0, r3, r1
 800492e:	4282      	cmp	r2, r0
 8004930:	6019      	str	r1, [r3, #0]
 8004932:	d1dd      	bne.n	80048f0 <_free_r+0x24>
 8004934:	6810      	ldr	r0, [r2, #0]
 8004936:	6852      	ldr	r2, [r2, #4]
 8004938:	605a      	str	r2, [r3, #4]
 800493a:	4401      	add	r1, r0
 800493c:	6019      	str	r1, [r3, #0]
 800493e:	e7d7      	b.n	80048f0 <_free_r+0x24>
 8004940:	d902      	bls.n	8004948 <_free_r+0x7c>
 8004942:	230c      	movs	r3, #12
 8004944:	602b      	str	r3, [r5, #0]
 8004946:	e7d3      	b.n	80048f0 <_free_r+0x24>
 8004948:	6820      	ldr	r0, [r4, #0]
 800494a:	1821      	adds	r1, r4, r0
 800494c:	428a      	cmp	r2, r1
 800494e:	bf04      	itt	eq
 8004950:	6811      	ldreq	r1, [r2, #0]
 8004952:	6852      	ldreq	r2, [r2, #4]
 8004954:	6062      	str	r2, [r4, #4]
 8004956:	bf04      	itt	eq
 8004958:	1809      	addeq	r1, r1, r0
 800495a:	6021      	streq	r1, [r4, #0]
 800495c:	605c      	str	r4, [r3, #4]
 800495e:	e7c7      	b.n	80048f0 <_free_r+0x24>
 8004960:	bd38      	pop	{r3, r4, r5, pc}
 8004962:	bf00      	nop
 8004964:	2000128c 	.word	0x2000128c

08004968 <_malloc_r>:
 8004968:	b570      	push	{r4, r5, r6, lr}
 800496a:	1ccd      	adds	r5, r1, #3
 800496c:	f025 0503 	bic.w	r5, r5, #3
 8004970:	3508      	adds	r5, #8
 8004972:	2d0c      	cmp	r5, #12
 8004974:	bf38      	it	cc
 8004976:	250c      	movcc	r5, #12
 8004978:	2d00      	cmp	r5, #0
 800497a:	4606      	mov	r6, r0
 800497c:	db01      	blt.n	8004982 <_malloc_r+0x1a>
 800497e:	42a9      	cmp	r1, r5
 8004980:	d903      	bls.n	800498a <_malloc_r+0x22>
 8004982:	230c      	movs	r3, #12
 8004984:	6033      	str	r3, [r6, #0]
 8004986:	2000      	movs	r0, #0
 8004988:	bd70      	pop	{r4, r5, r6, pc}
 800498a:	f000 fb55 	bl	8005038 <__malloc_lock>
 800498e:	4a21      	ldr	r2, [pc, #132]	; (8004a14 <_malloc_r+0xac>)
 8004990:	6814      	ldr	r4, [r2, #0]
 8004992:	4621      	mov	r1, r4
 8004994:	b991      	cbnz	r1, 80049bc <_malloc_r+0x54>
 8004996:	4c20      	ldr	r4, [pc, #128]	; (8004a18 <_malloc_r+0xb0>)
 8004998:	6823      	ldr	r3, [r4, #0]
 800499a:	b91b      	cbnz	r3, 80049a4 <_malloc_r+0x3c>
 800499c:	4630      	mov	r0, r6
 800499e:	f000 fb17 	bl	8004fd0 <_sbrk_r>
 80049a2:	6020      	str	r0, [r4, #0]
 80049a4:	4629      	mov	r1, r5
 80049a6:	4630      	mov	r0, r6
 80049a8:	f000 fb12 	bl	8004fd0 <_sbrk_r>
 80049ac:	1c43      	adds	r3, r0, #1
 80049ae:	d124      	bne.n	80049fa <_malloc_r+0x92>
 80049b0:	230c      	movs	r3, #12
 80049b2:	6033      	str	r3, [r6, #0]
 80049b4:	4630      	mov	r0, r6
 80049b6:	f000 fb40 	bl	800503a <__malloc_unlock>
 80049ba:	e7e4      	b.n	8004986 <_malloc_r+0x1e>
 80049bc:	680b      	ldr	r3, [r1, #0]
 80049be:	1b5b      	subs	r3, r3, r5
 80049c0:	d418      	bmi.n	80049f4 <_malloc_r+0x8c>
 80049c2:	2b0b      	cmp	r3, #11
 80049c4:	d90f      	bls.n	80049e6 <_malloc_r+0x7e>
 80049c6:	600b      	str	r3, [r1, #0]
 80049c8:	50cd      	str	r5, [r1, r3]
 80049ca:	18cc      	adds	r4, r1, r3
 80049cc:	4630      	mov	r0, r6
 80049ce:	f000 fb34 	bl	800503a <__malloc_unlock>
 80049d2:	f104 000b 	add.w	r0, r4, #11
 80049d6:	1d23      	adds	r3, r4, #4
 80049d8:	f020 0007 	bic.w	r0, r0, #7
 80049dc:	1ac3      	subs	r3, r0, r3
 80049de:	d0d3      	beq.n	8004988 <_malloc_r+0x20>
 80049e0:	425a      	negs	r2, r3
 80049e2:	50e2      	str	r2, [r4, r3]
 80049e4:	e7d0      	b.n	8004988 <_malloc_r+0x20>
 80049e6:	428c      	cmp	r4, r1
 80049e8:	684b      	ldr	r3, [r1, #4]
 80049ea:	bf16      	itet	ne
 80049ec:	6063      	strne	r3, [r4, #4]
 80049ee:	6013      	streq	r3, [r2, #0]
 80049f0:	460c      	movne	r4, r1
 80049f2:	e7eb      	b.n	80049cc <_malloc_r+0x64>
 80049f4:	460c      	mov	r4, r1
 80049f6:	6849      	ldr	r1, [r1, #4]
 80049f8:	e7cc      	b.n	8004994 <_malloc_r+0x2c>
 80049fa:	1cc4      	adds	r4, r0, #3
 80049fc:	f024 0403 	bic.w	r4, r4, #3
 8004a00:	42a0      	cmp	r0, r4
 8004a02:	d005      	beq.n	8004a10 <_malloc_r+0xa8>
 8004a04:	1a21      	subs	r1, r4, r0
 8004a06:	4630      	mov	r0, r6
 8004a08:	f000 fae2 	bl	8004fd0 <_sbrk_r>
 8004a0c:	3001      	adds	r0, #1
 8004a0e:	d0cf      	beq.n	80049b0 <_malloc_r+0x48>
 8004a10:	6025      	str	r5, [r4, #0]
 8004a12:	e7db      	b.n	80049cc <_malloc_r+0x64>
 8004a14:	2000128c 	.word	0x2000128c
 8004a18:	20001290 	.word	0x20001290

08004a1c <__ssputs_r>:
 8004a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a20:	688e      	ldr	r6, [r1, #8]
 8004a22:	429e      	cmp	r6, r3
 8004a24:	4682      	mov	sl, r0
 8004a26:	460c      	mov	r4, r1
 8004a28:	4690      	mov	r8, r2
 8004a2a:	4699      	mov	r9, r3
 8004a2c:	d837      	bhi.n	8004a9e <__ssputs_r+0x82>
 8004a2e:	898a      	ldrh	r2, [r1, #12]
 8004a30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a34:	d031      	beq.n	8004a9a <__ssputs_r+0x7e>
 8004a36:	6825      	ldr	r5, [r4, #0]
 8004a38:	6909      	ldr	r1, [r1, #16]
 8004a3a:	1a6f      	subs	r7, r5, r1
 8004a3c:	6965      	ldr	r5, [r4, #20]
 8004a3e:	2302      	movs	r3, #2
 8004a40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a44:	fb95 f5f3 	sdiv	r5, r5, r3
 8004a48:	f109 0301 	add.w	r3, r9, #1
 8004a4c:	443b      	add	r3, r7
 8004a4e:	429d      	cmp	r5, r3
 8004a50:	bf38      	it	cc
 8004a52:	461d      	movcc	r5, r3
 8004a54:	0553      	lsls	r3, r2, #21
 8004a56:	d530      	bpl.n	8004aba <__ssputs_r+0x9e>
 8004a58:	4629      	mov	r1, r5
 8004a5a:	f7ff ff85 	bl	8004968 <_malloc_r>
 8004a5e:	4606      	mov	r6, r0
 8004a60:	b950      	cbnz	r0, 8004a78 <__ssputs_r+0x5c>
 8004a62:	230c      	movs	r3, #12
 8004a64:	f8ca 3000 	str.w	r3, [sl]
 8004a68:	89a3      	ldrh	r3, [r4, #12]
 8004a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a6e:	81a3      	strh	r3, [r4, #12]
 8004a70:	f04f 30ff 	mov.w	r0, #4294967295
 8004a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a78:	463a      	mov	r2, r7
 8004a7a:	6921      	ldr	r1, [r4, #16]
 8004a7c:	f000 fab8 	bl	8004ff0 <memcpy>
 8004a80:	89a3      	ldrh	r3, [r4, #12]
 8004a82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a8a:	81a3      	strh	r3, [r4, #12]
 8004a8c:	6126      	str	r6, [r4, #16]
 8004a8e:	6165      	str	r5, [r4, #20]
 8004a90:	443e      	add	r6, r7
 8004a92:	1bed      	subs	r5, r5, r7
 8004a94:	6026      	str	r6, [r4, #0]
 8004a96:	60a5      	str	r5, [r4, #8]
 8004a98:	464e      	mov	r6, r9
 8004a9a:	454e      	cmp	r6, r9
 8004a9c:	d900      	bls.n	8004aa0 <__ssputs_r+0x84>
 8004a9e:	464e      	mov	r6, r9
 8004aa0:	4632      	mov	r2, r6
 8004aa2:	4641      	mov	r1, r8
 8004aa4:	6820      	ldr	r0, [r4, #0]
 8004aa6:	f000 faae 	bl	8005006 <memmove>
 8004aaa:	68a3      	ldr	r3, [r4, #8]
 8004aac:	1b9b      	subs	r3, r3, r6
 8004aae:	60a3      	str	r3, [r4, #8]
 8004ab0:	6823      	ldr	r3, [r4, #0]
 8004ab2:	441e      	add	r6, r3
 8004ab4:	6026      	str	r6, [r4, #0]
 8004ab6:	2000      	movs	r0, #0
 8004ab8:	e7dc      	b.n	8004a74 <__ssputs_r+0x58>
 8004aba:	462a      	mov	r2, r5
 8004abc:	f000 fabe 	bl	800503c <_realloc_r>
 8004ac0:	4606      	mov	r6, r0
 8004ac2:	2800      	cmp	r0, #0
 8004ac4:	d1e2      	bne.n	8004a8c <__ssputs_r+0x70>
 8004ac6:	6921      	ldr	r1, [r4, #16]
 8004ac8:	4650      	mov	r0, sl
 8004aca:	f7ff feff 	bl	80048cc <_free_r>
 8004ace:	e7c8      	b.n	8004a62 <__ssputs_r+0x46>

08004ad0 <_svfiprintf_r>:
 8004ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ad4:	461d      	mov	r5, r3
 8004ad6:	898b      	ldrh	r3, [r1, #12]
 8004ad8:	061f      	lsls	r7, r3, #24
 8004ada:	b09d      	sub	sp, #116	; 0x74
 8004adc:	4680      	mov	r8, r0
 8004ade:	460c      	mov	r4, r1
 8004ae0:	4616      	mov	r6, r2
 8004ae2:	d50f      	bpl.n	8004b04 <_svfiprintf_r+0x34>
 8004ae4:	690b      	ldr	r3, [r1, #16]
 8004ae6:	b96b      	cbnz	r3, 8004b04 <_svfiprintf_r+0x34>
 8004ae8:	2140      	movs	r1, #64	; 0x40
 8004aea:	f7ff ff3d 	bl	8004968 <_malloc_r>
 8004aee:	6020      	str	r0, [r4, #0]
 8004af0:	6120      	str	r0, [r4, #16]
 8004af2:	b928      	cbnz	r0, 8004b00 <_svfiprintf_r+0x30>
 8004af4:	230c      	movs	r3, #12
 8004af6:	f8c8 3000 	str.w	r3, [r8]
 8004afa:	f04f 30ff 	mov.w	r0, #4294967295
 8004afe:	e0c8      	b.n	8004c92 <_svfiprintf_r+0x1c2>
 8004b00:	2340      	movs	r3, #64	; 0x40
 8004b02:	6163      	str	r3, [r4, #20]
 8004b04:	2300      	movs	r3, #0
 8004b06:	9309      	str	r3, [sp, #36]	; 0x24
 8004b08:	2320      	movs	r3, #32
 8004b0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b0e:	2330      	movs	r3, #48	; 0x30
 8004b10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b14:	9503      	str	r5, [sp, #12]
 8004b16:	f04f 0b01 	mov.w	fp, #1
 8004b1a:	4637      	mov	r7, r6
 8004b1c:	463d      	mov	r5, r7
 8004b1e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004b22:	b10b      	cbz	r3, 8004b28 <_svfiprintf_r+0x58>
 8004b24:	2b25      	cmp	r3, #37	; 0x25
 8004b26:	d13e      	bne.n	8004ba6 <_svfiprintf_r+0xd6>
 8004b28:	ebb7 0a06 	subs.w	sl, r7, r6
 8004b2c:	d00b      	beq.n	8004b46 <_svfiprintf_r+0x76>
 8004b2e:	4653      	mov	r3, sl
 8004b30:	4632      	mov	r2, r6
 8004b32:	4621      	mov	r1, r4
 8004b34:	4640      	mov	r0, r8
 8004b36:	f7ff ff71 	bl	8004a1c <__ssputs_r>
 8004b3a:	3001      	adds	r0, #1
 8004b3c:	f000 80a4 	beq.w	8004c88 <_svfiprintf_r+0x1b8>
 8004b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b42:	4453      	add	r3, sl
 8004b44:	9309      	str	r3, [sp, #36]	; 0x24
 8004b46:	783b      	ldrb	r3, [r7, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 809d 	beq.w	8004c88 <_svfiprintf_r+0x1b8>
 8004b4e:	2300      	movs	r3, #0
 8004b50:	f04f 32ff 	mov.w	r2, #4294967295
 8004b54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b58:	9304      	str	r3, [sp, #16]
 8004b5a:	9307      	str	r3, [sp, #28]
 8004b5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b60:	931a      	str	r3, [sp, #104]	; 0x68
 8004b62:	462f      	mov	r7, r5
 8004b64:	2205      	movs	r2, #5
 8004b66:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004b6a:	4850      	ldr	r0, [pc, #320]	; (8004cac <_svfiprintf_r+0x1dc>)
 8004b6c:	f7fb fb38 	bl	80001e0 <memchr>
 8004b70:	9b04      	ldr	r3, [sp, #16]
 8004b72:	b9d0      	cbnz	r0, 8004baa <_svfiprintf_r+0xda>
 8004b74:	06d9      	lsls	r1, r3, #27
 8004b76:	bf44      	itt	mi
 8004b78:	2220      	movmi	r2, #32
 8004b7a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004b7e:	071a      	lsls	r2, r3, #28
 8004b80:	bf44      	itt	mi
 8004b82:	222b      	movmi	r2, #43	; 0x2b
 8004b84:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004b88:	782a      	ldrb	r2, [r5, #0]
 8004b8a:	2a2a      	cmp	r2, #42	; 0x2a
 8004b8c:	d015      	beq.n	8004bba <_svfiprintf_r+0xea>
 8004b8e:	9a07      	ldr	r2, [sp, #28]
 8004b90:	462f      	mov	r7, r5
 8004b92:	2000      	movs	r0, #0
 8004b94:	250a      	movs	r5, #10
 8004b96:	4639      	mov	r1, r7
 8004b98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b9c:	3b30      	subs	r3, #48	; 0x30
 8004b9e:	2b09      	cmp	r3, #9
 8004ba0:	d94d      	bls.n	8004c3e <_svfiprintf_r+0x16e>
 8004ba2:	b1b8      	cbz	r0, 8004bd4 <_svfiprintf_r+0x104>
 8004ba4:	e00f      	b.n	8004bc6 <_svfiprintf_r+0xf6>
 8004ba6:	462f      	mov	r7, r5
 8004ba8:	e7b8      	b.n	8004b1c <_svfiprintf_r+0x4c>
 8004baa:	4a40      	ldr	r2, [pc, #256]	; (8004cac <_svfiprintf_r+0x1dc>)
 8004bac:	1a80      	subs	r0, r0, r2
 8004bae:	fa0b f000 	lsl.w	r0, fp, r0
 8004bb2:	4318      	orrs	r0, r3
 8004bb4:	9004      	str	r0, [sp, #16]
 8004bb6:	463d      	mov	r5, r7
 8004bb8:	e7d3      	b.n	8004b62 <_svfiprintf_r+0x92>
 8004bba:	9a03      	ldr	r2, [sp, #12]
 8004bbc:	1d11      	adds	r1, r2, #4
 8004bbe:	6812      	ldr	r2, [r2, #0]
 8004bc0:	9103      	str	r1, [sp, #12]
 8004bc2:	2a00      	cmp	r2, #0
 8004bc4:	db01      	blt.n	8004bca <_svfiprintf_r+0xfa>
 8004bc6:	9207      	str	r2, [sp, #28]
 8004bc8:	e004      	b.n	8004bd4 <_svfiprintf_r+0x104>
 8004bca:	4252      	negs	r2, r2
 8004bcc:	f043 0302 	orr.w	r3, r3, #2
 8004bd0:	9207      	str	r2, [sp, #28]
 8004bd2:	9304      	str	r3, [sp, #16]
 8004bd4:	783b      	ldrb	r3, [r7, #0]
 8004bd6:	2b2e      	cmp	r3, #46	; 0x2e
 8004bd8:	d10c      	bne.n	8004bf4 <_svfiprintf_r+0x124>
 8004bda:	787b      	ldrb	r3, [r7, #1]
 8004bdc:	2b2a      	cmp	r3, #42	; 0x2a
 8004bde:	d133      	bne.n	8004c48 <_svfiprintf_r+0x178>
 8004be0:	9b03      	ldr	r3, [sp, #12]
 8004be2:	1d1a      	adds	r2, r3, #4
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	9203      	str	r2, [sp, #12]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	bfb8      	it	lt
 8004bec:	f04f 33ff 	movlt.w	r3, #4294967295
 8004bf0:	3702      	adds	r7, #2
 8004bf2:	9305      	str	r3, [sp, #20]
 8004bf4:	4d2e      	ldr	r5, [pc, #184]	; (8004cb0 <_svfiprintf_r+0x1e0>)
 8004bf6:	7839      	ldrb	r1, [r7, #0]
 8004bf8:	2203      	movs	r2, #3
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	f7fb faf0 	bl	80001e0 <memchr>
 8004c00:	b138      	cbz	r0, 8004c12 <_svfiprintf_r+0x142>
 8004c02:	2340      	movs	r3, #64	; 0x40
 8004c04:	1b40      	subs	r0, r0, r5
 8004c06:	fa03 f000 	lsl.w	r0, r3, r0
 8004c0a:	9b04      	ldr	r3, [sp, #16]
 8004c0c:	4303      	orrs	r3, r0
 8004c0e:	3701      	adds	r7, #1
 8004c10:	9304      	str	r3, [sp, #16]
 8004c12:	7839      	ldrb	r1, [r7, #0]
 8004c14:	4827      	ldr	r0, [pc, #156]	; (8004cb4 <_svfiprintf_r+0x1e4>)
 8004c16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c1a:	2206      	movs	r2, #6
 8004c1c:	1c7e      	adds	r6, r7, #1
 8004c1e:	f7fb fadf 	bl	80001e0 <memchr>
 8004c22:	2800      	cmp	r0, #0
 8004c24:	d038      	beq.n	8004c98 <_svfiprintf_r+0x1c8>
 8004c26:	4b24      	ldr	r3, [pc, #144]	; (8004cb8 <_svfiprintf_r+0x1e8>)
 8004c28:	bb13      	cbnz	r3, 8004c70 <_svfiprintf_r+0x1a0>
 8004c2a:	9b03      	ldr	r3, [sp, #12]
 8004c2c:	3307      	adds	r3, #7
 8004c2e:	f023 0307 	bic.w	r3, r3, #7
 8004c32:	3308      	adds	r3, #8
 8004c34:	9303      	str	r3, [sp, #12]
 8004c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c38:	444b      	add	r3, r9
 8004c3a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c3c:	e76d      	b.n	8004b1a <_svfiprintf_r+0x4a>
 8004c3e:	fb05 3202 	mla	r2, r5, r2, r3
 8004c42:	2001      	movs	r0, #1
 8004c44:	460f      	mov	r7, r1
 8004c46:	e7a6      	b.n	8004b96 <_svfiprintf_r+0xc6>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	3701      	adds	r7, #1
 8004c4c:	9305      	str	r3, [sp, #20]
 8004c4e:	4619      	mov	r1, r3
 8004c50:	250a      	movs	r5, #10
 8004c52:	4638      	mov	r0, r7
 8004c54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c58:	3a30      	subs	r2, #48	; 0x30
 8004c5a:	2a09      	cmp	r2, #9
 8004c5c:	d903      	bls.n	8004c66 <_svfiprintf_r+0x196>
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0c8      	beq.n	8004bf4 <_svfiprintf_r+0x124>
 8004c62:	9105      	str	r1, [sp, #20]
 8004c64:	e7c6      	b.n	8004bf4 <_svfiprintf_r+0x124>
 8004c66:	fb05 2101 	mla	r1, r5, r1, r2
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	4607      	mov	r7, r0
 8004c6e:	e7f0      	b.n	8004c52 <_svfiprintf_r+0x182>
 8004c70:	ab03      	add	r3, sp, #12
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	4622      	mov	r2, r4
 8004c76:	4b11      	ldr	r3, [pc, #68]	; (8004cbc <_svfiprintf_r+0x1ec>)
 8004c78:	a904      	add	r1, sp, #16
 8004c7a:	4640      	mov	r0, r8
 8004c7c:	f3af 8000 	nop.w
 8004c80:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004c84:	4681      	mov	r9, r0
 8004c86:	d1d6      	bne.n	8004c36 <_svfiprintf_r+0x166>
 8004c88:	89a3      	ldrh	r3, [r4, #12]
 8004c8a:	065b      	lsls	r3, r3, #25
 8004c8c:	f53f af35 	bmi.w	8004afa <_svfiprintf_r+0x2a>
 8004c90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c92:	b01d      	add	sp, #116	; 0x74
 8004c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c98:	ab03      	add	r3, sp, #12
 8004c9a:	9300      	str	r3, [sp, #0]
 8004c9c:	4622      	mov	r2, r4
 8004c9e:	4b07      	ldr	r3, [pc, #28]	; (8004cbc <_svfiprintf_r+0x1ec>)
 8004ca0:	a904      	add	r1, sp, #16
 8004ca2:	4640      	mov	r0, r8
 8004ca4:	f000 f882 	bl	8004dac <_printf_i>
 8004ca8:	e7ea      	b.n	8004c80 <_svfiprintf_r+0x1b0>
 8004caa:	bf00      	nop
 8004cac:	08005124 	.word	0x08005124
 8004cb0:	0800512a 	.word	0x0800512a
 8004cb4:	0800512e 	.word	0x0800512e
 8004cb8:	00000000 	.word	0x00000000
 8004cbc:	08004a1d 	.word	0x08004a1d

08004cc0 <_printf_common>:
 8004cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cc4:	4691      	mov	r9, r2
 8004cc6:	461f      	mov	r7, r3
 8004cc8:	688a      	ldr	r2, [r1, #8]
 8004cca:	690b      	ldr	r3, [r1, #16]
 8004ccc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	bfb8      	it	lt
 8004cd4:	4613      	movlt	r3, r2
 8004cd6:	f8c9 3000 	str.w	r3, [r9]
 8004cda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cde:	4606      	mov	r6, r0
 8004ce0:	460c      	mov	r4, r1
 8004ce2:	b112      	cbz	r2, 8004cea <_printf_common+0x2a>
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	f8c9 3000 	str.w	r3, [r9]
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	0699      	lsls	r1, r3, #26
 8004cee:	bf42      	ittt	mi
 8004cf0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004cf4:	3302      	addmi	r3, #2
 8004cf6:	f8c9 3000 	strmi.w	r3, [r9]
 8004cfa:	6825      	ldr	r5, [r4, #0]
 8004cfc:	f015 0506 	ands.w	r5, r5, #6
 8004d00:	d107      	bne.n	8004d12 <_printf_common+0x52>
 8004d02:	f104 0a19 	add.w	sl, r4, #25
 8004d06:	68e3      	ldr	r3, [r4, #12]
 8004d08:	f8d9 2000 	ldr.w	r2, [r9]
 8004d0c:	1a9b      	subs	r3, r3, r2
 8004d0e:	42ab      	cmp	r3, r5
 8004d10:	dc28      	bgt.n	8004d64 <_printf_common+0xa4>
 8004d12:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004d16:	6822      	ldr	r2, [r4, #0]
 8004d18:	3300      	adds	r3, #0
 8004d1a:	bf18      	it	ne
 8004d1c:	2301      	movne	r3, #1
 8004d1e:	0692      	lsls	r2, r2, #26
 8004d20:	d42d      	bmi.n	8004d7e <_printf_common+0xbe>
 8004d22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d26:	4639      	mov	r1, r7
 8004d28:	4630      	mov	r0, r6
 8004d2a:	47c0      	blx	r8
 8004d2c:	3001      	adds	r0, #1
 8004d2e:	d020      	beq.n	8004d72 <_printf_common+0xb2>
 8004d30:	6823      	ldr	r3, [r4, #0]
 8004d32:	68e5      	ldr	r5, [r4, #12]
 8004d34:	f8d9 2000 	ldr.w	r2, [r9]
 8004d38:	f003 0306 	and.w	r3, r3, #6
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	bf08      	it	eq
 8004d40:	1aad      	subeq	r5, r5, r2
 8004d42:	68a3      	ldr	r3, [r4, #8]
 8004d44:	6922      	ldr	r2, [r4, #16]
 8004d46:	bf0c      	ite	eq
 8004d48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d4c:	2500      	movne	r5, #0
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	bfc4      	itt	gt
 8004d52:	1a9b      	subgt	r3, r3, r2
 8004d54:	18ed      	addgt	r5, r5, r3
 8004d56:	f04f 0900 	mov.w	r9, #0
 8004d5a:	341a      	adds	r4, #26
 8004d5c:	454d      	cmp	r5, r9
 8004d5e:	d11a      	bne.n	8004d96 <_printf_common+0xd6>
 8004d60:	2000      	movs	r0, #0
 8004d62:	e008      	b.n	8004d76 <_printf_common+0xb6>
 8004d64:	2301      	movs	r3, #1
 8004d66:	4652      	mov	r2, sl
 8004d68:	4639      	mov	r1, r7
 8004d6a:	4630      	mov	r0, r6
 8004d6c:	47c0      	blx	r8
 8004d6e:	3001      	adds	r0, #1
 8004d70:	d103      	bne.n	8004d7a <_printf_common+0xba>
 8004d72:	f04f 30ff 	mov.w	r0, #4294967295
 8004d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d7a:	3501      	adds	r5, #1
 8004d7c:	e7c3      	b.n	8004d06 <_printf_common+0x46>
 8004d7e:	18e1      	adds	r1, r4, r3
 8004d80:	1c5a      	adds	r2, r3, #1
 8004d82:	2030      	movs	r0, #48	; 0x30
 8004d84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d88:	4422      	add	r2, r4
 8004d8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d92:	3302      	adds	r3, #2
 8004d94:	e7c5      	b.n	8004d22 <_printf_common+0x62>
 8004d96:	2301      	movs	r3, #1
 8004d98:	4622      	mov	r2, r4
 8004d9a:	4639      	mov	r1, r7
 8004d9c:	4630      	mov	r0, r6
 8004d9e:	47c0      	blx	r8
 8004da0:	3001      	adds	r0, #1
 8004da2:	d0e6      	beq.n	8004d72 <_printf_common+0xb2>
 8004da4:	f109 0901 	add.w	r9, r9, #1
 8004da8:	e7d8      	b.n	8004d5c <_printf_common+0x9c>
	...

08004dac <_printf_i>:
 8004dac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004db0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004db4:	460c      	mov	r4, r1
 8004db6:	7e09      	ldrb	r1, [r1, #24]
 8004db8:	b085      	sub	sp, #20
 8004dba:	296e      	cmp	r1, #110	; 0x6e
 8004dbc:	4617      	mov	r7, r2
 8004dbe:	4606      	mov	r6, r0
 8004dc0:	4698      	mov	r8, r3
 8004dc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004dc4:	f000 80b3 	beq.w	8004f2e <_printf_i+0x182>
 8004dc8:	d822      	bhi.n	8004e10 <_printf_i+0x64>
 8004dca:	2963      	cmp	r1, #99	; 0x63
 8004dcc:	d036      	beq.n	8004e3c <_printf_i+0x90>
 8004dce:	d80a      	bhi.n	8004de6 <_printf_i+0x3a>
 8004dd0:	2900      	cmp	r1, #0
 8004dd2:	f000 80b9 	beq.w	8004f48 <_printf_i+0x19c>
 8004dd6:	2958      	cmp	r1, #88	; 0x58
 8004dd8:	f000 8083 	beq.w	8004ee2 <_printf_i+0x136>
 8004ddc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004de0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004de4:	e032      	b.n	8004e4c <_printf_i+0xa0>
 8004de6:	2964      	cmp	r1, #100	; 0x64
 8004de8:	d001      	beq.n	8004dee <_printf_i+0x42>
 8004dea:	2969      	cmp	r1, #105	; 0x69
 8004dec:	d1f6      	bne.n	8004ddc <_printf_i+0x30>
 8004dee:	6820      	ldr	r0, [r4, #0]
 8004df0:	6813      	ldr	r3, [r2, #0]
 8004df2:	0605      	lsls	r5, r0, #24
 8004df4:	f103 0104 	add.w	r1, r3, #4
 8004df8:	d52a      	bpl.n	8004e50 <_printf_i+0xa4>
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6011      	str	r1, [r2, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	da03      	bge.n	8004e0a <_printf_i+0x5e>
 8004e02:	222d      	movs	r2, #45	; 0x2d
 8004e04:	425b      	negs	r3, r3
 8004e06:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004e0a:	486f      	ldr	r0, [pc, #444]	; (8004fc8 <_printf_i+0x21c>)
 8004e0c:	220a      	movs	r2, #10
 8004e0e:	e039      	b.n	8004e84 <_printf_i+0xd8>
 8004e10:	2973      	cmp	r1, #115	; 0x73
 8004e12:	f000 809d 	beq.w	8004f50 <_printf_i+0x1a4>
 8004e16:	d808      	bhi.n	8004e2a <_printf_i+0x7e>
 8004e18:	296f      	cmp	r1, #111	; 0x6f
 8004e1a:	d020      	beq.n	8004e5e <_printf_i+0xb2>
 8004e1c:	2970      	cmp	r1, #112	; 0x70
 8004e1e:	d1dd      	bne.n	8004ddc <_printf_i+0x30>
 8004e20:	6823      	ldr	r3, [r4, #0]
 8004e22:	f043 0320 	orr.w	r3, r3, #32
 8004e26:	6023      	str	r3, [r4, #0]
 8004e28:	e003      	b.n	8004e32 <_printf_i+0x86>
 8004e2a:	2975      	cmp	r1, #117	; 0x75
 8004e2c:	d017      	beq.n	8004e5e <_printf_i+0xb2>
 8004e2e:	2978      	cmp	r1, #120	; 0x78
 8004e30:	d1d4      	bne.n	8004ddc <_printf_i+0x30>
 8004e32:	2378      	movs	r3, #120	; 0x78
 8004e34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e38:	4864      	ldr	r0, [pc, #400]	; (8004fcc <_printf_i+0x220>)
 8004e3a:	e055      	b.n	8004ee8 <_printf_i+0x13c>
 8004e3c:	6813      	ldr	r3, [r2, #0]
 8004e3e:	1d19      	adds	r1, r3, #4
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	6011      	str	r1, [r2, #0]
 8004e44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e08c      	b.n	8004f6a <_printf_i+0x1be>
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6011      	str	r1, [r2, #0]
 8004e54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e58:	bf18      	it	ne
 8004e5a:	b21b      	sxthne	r3, r3
 8004e5c:	e7cf      	b.n	8004dfe <_printf_i+0x52>
 8004e5e:	6813      	ldr	r3, [r2, #0]
 8004e60:	6825      	ldr	r5, [r4, #0]
 8004e62:	1d18      	adds	r0, r3, #4
 8004e64:	6010      	str	r0, [r2, #0]
 8004e66:	0628      	lsls	r0, r5, #24
 8004e68:	d501      	bpl.n	8004e6e <_printf_i+0xc2>
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	e002      	b.n	8004e74 <_printf_i+0xc8>
 8004e6e:	0668      	lsls	r0, r5, #25
 8004e70:	d5fb      	bpl.n	8004e6a <_printf_i+0xbe>
 8004e72:	881b      	ldrh	r3, [r3, #0]
 8004e74:	4854      	ldr	r0, [pc, #336]	; (8004fc8 <_printf_i+0x21c>)
 8004e76:	296f      	cmp	r1, #111	; 0x6f
 8004e78:	bf14      	ite	ne
 8004e7a:	220a      	movne	r2, #10
 8004e7c:	2208      	moveq	r2, #8
 8004e7e:	2100      	movs	r1, #0
 8004e80:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e84:	6865      	ldr	r5, [r4, #4]
 8004e86:	60a5      	str	r5, [r4, #8]
 8004e88:	2d00      	cmp	r5, #0
 8004e8a:	f2c0 8095 	blt.w	8004fb8 <_printf_i+0x20c>
 8004e8e:	6821      	ldr	r1, [r4, #0]
 8004e90:	f021 0104 	bic.w	r1, r1, #4
 8004e94:	6021      	str	r1, [r4, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d13d      	bne.n	8004f16 <_printf_i+0x16a>
 8004e9a:	2d00      	cmp	r5, #0
 8004e9c:	f040 808e 	bne.w	8004fbc <_printf_i+0x210>
 8004ea0:	4665      	mov	r5, ip
 8004ea2:	2a08      	cmp	r2, #8
 8004ea4:	d10b      	bne.n	8004ebe <_printf_i+0x112>
 8004ea6:	6823      	ldr	r3, [r4, #0]
 8004ea8:	07db      	lsls	r3, r3, #31
 8004eaa:	d508      	bpl.n	8004ebe <_printf_i+0x112>
 8004eac:	6923      	ldr	r3, [r4, #16]
 8004eae:	6862      	ldr	r2, [r4, #4]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	bfde      	ittt	le
 8004eb4:	2330      	movle	r3, #48	; 0x30
 8004eb6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004eba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ebe:	ebac 0305 	sub.w	r3, ip, r5
 8004ec2:	6123      	str	r3, [r4, #16]
 8004ec4:	f8cd 8000 	str.w	r8, [sp]
 8004ec8:	463b      	mov	r3, r7
 8004eca:	aa03      	add	r2, sp, #12
 8004ecc:	4621      	mov	r1, r4
 8004ece:	4630      	mov	r0, r6
 8004ed0:	f7ff fef6 	bl	8004cc0 <_printf_common>
 8004ed4:	3001      	adds	r0, #1
 8004ed6:	d14d      	bne.n	8004f74 <_printf_i+0x1c8>
 8004ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8004edc:	b005      	add	sp, #20
 8004ede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ee2:	4839      	ldr	r0, [pc, #228]	; (8004fc8 <_printf_i+0x21c>)
 8004ee4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004ee8:	6813      	ldr	r3, [r2, #0]
 8004eea:	6821      	ldr	r1, [r4, #0]
 8004eec:	1d1d      	adds	r5, r3, #4
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6015      	str	r5, [r2, #0]
 8004ef2:	060a      	lsls	r2, r1, #24
 8004ef4:	d50b      	bpl.n	8004f0e <_printf_i+0x162>
 8004ef6:	07ca      	lsls	r2, r1, #31
 8004ef8:	bf44      	itt	mi
 8004efa:	f041 0120 	orrmi.w	r1, r1, #32
 8004efe:	6021      	strmi	r1, [r4, #0]
 8004f00:	b91b      	cbnz	r3, 8004f0a <_printf_i+0x15e>
 8004f02:	6822      	ldr	r2, [r4, #0]
 8004f04:	f022 0220 	bic.w	r2, r2, #32
 8004f08:	6022      	str	r2, [r4, #0]
 8004f0a:	2210      	movs	r2, #16
 8004f0c:	e7b7      	b.n	8004e7e <_printf_i+0xd2>
 8004f0e:	064d      	lsls	r5, r1, #25
 8004f10:	bf48      	it	mi
 8004f12:	b29b      	uxthmi	r3, r3
 8004f14:	e7ef      	b.n	8004ef6 <_printf_i+0x14a>
 8004f16:	4665      	mov	r5, ip
 8004f18:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f1c:	fb02 3311 	mls	r3, r2, r1, r3
 8004f20:	5cc3      	ldrb	r3, [r0, r3]
 8004f22:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004f26:	460b      	mov	r3, r1
 8004f28:	2900      	cmp	r1, #0
 8004f2a:	d1f5      	bne.n	8004f18 <_printf_i+0x16c>
 8004f2c:	e7b9      	b.n	8004ea2 <_printf_i+0xf6>
 8004f2e:	6813      	ldr	r3, [r2, #0]
 8004f30:	6825      	ldr	r5, [r4, #0]
 8004f32:	6961      	ldr	r1, [r4, #20]
 8004f34:	1d18      	adds	r0, r3, #4
 8004f36:	6010      	str	r0, [r2, #0]
 8004f38:	0628      	lsls	r0, r5, #24
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	d501      	bpl.n	8004f42 <_printf_i+0x196>
 8004f3e:	6019      	str	r1, [r3, #0]
 8004f40:	e002      	b.n	8004f48 <_printf_i+0x19c>
 8004f42:	066a      	lsls	r2, r5, #25
 8004f44:	d5fb      	bpl.n	8004f3e <_printf_i+0x192>
 8004f46:	8019      	strh	r1, [r3, #0]
 8004f48:	2300      	movs	r3, #0
 8004f4a:	6123      	str	r3, [r4, #16]
 8004f4c:	4665      	mov	r5, ip
 8004f4e:	e7b9      	b.n	8004ec4 <_printf_i+0x118>
 8004f50:	6813      	ldr	r3, [r2, #0]
 8004f52:	1d19      	adds	r1, r3, #4
 8004f54:	6011      	str	r1, [r2, #0]
 8004f56:	681d      	ldr	r5, [r3, #0]
 8004f58:	6862      	ldr	r2, [r4, #4]
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	f7fb f93f 	bl	80001e0 <memchr>
 8004f62:	b108      	cbz	r0, 8004f68 <_printf_i+0x1bc>
 8004f64:	1b40      	subs	r0, r0, r5
 8004f66:	6060      	str	r0, [r4, #4]
 8004f68:	6863      	ldr	r3, [r4, #4]
 8004f6a:	6123      	str	r3, [r4, #16]
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f72:	e7a7      	b.n	8004ec4 <_printf_i+0x118>
 8004f74:	6923      	ldr	r3, [r4, #16]
 8004f76:	462a      	mov	r2, r5
 8004f78:	4639      	mov	r1, r7
 8004f7a:	4630      	mov	r0, r6
 8004f7c:	47c0      	blx	r8
 8004f7e:	3001      	adds	r0, #1
 8004f80:	d0aa      	beq.n	8004ed8 <_printf_i+0x12c>
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	079b      	lsls	r3, r3, #30
 8004f86:	d413      	bmi.n	8004fb0 <_printf_i+0x204>
 8004f88:	68e0      	ldr	r0, [r4, #12]
 8004f8a:	9b03      	ldr	r3, [sp, #12]
 8004f8c:	4298      	cmp	r0, r3
 8004f8e:	bfb8      	it	lt
 8004f90:	4618      	movlt	r0, r3
 8004f92:	e7a3      	b.n	8004edc <_printf_i+0x130>
 8004f94:	2301      	movs	r3, #1
 8004f96:	464a      	mov	r2, r9
 8004f98:	4639      	mov	r1, r7
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	47c0      	blx	r8
 8004f9e:	3001      	adds	r0, #1
 8004fa0:	d09a      	beq.n	8004ed8 <_printf_i+0x12c>
 8004fa2:	3501      	adds	r5, #1
 8004fa4:	68e3      	ldr	r3, [r4, #12]
 8004fa6:	9a03      	ldr	r2, [sp, #12]
 8004fa8:	1a9b      	subs	r3, r3, r2
 8004faa:	42ab      	cmp	r3, r5
 8004fac:	dcf2      	bgt.n	8004f94 <_printf_i+0x1e8>
 8004fae:	e7eb      	b.n	8004f88 <_printf_i+0x1dc>
 8004fb0:	2500      	movs	r5, #0
 8004fb2:	f104 0919 	add.w	r9, r4, #25
 8004fb6:	e7f5      	b.n	8004fa4 <_printf_i+0x1f8>
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1ac      	bne.n	8004f16 <_printf_i+0x16a>
 8004fbc:	7803      	ldrb	r3, [r0, #0]
 8004fbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fc2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fc6:	e76c      	b.n	8004ea2 <_printf_i+0xf6>
 8004fc8:	08005135 	.word	0x08005135
 8004fcc:	08005146 	.word	0x08005146

08004fd0 <_sbrk_r>:
 8004fd0:	b538      	push	{r3, r4, r5, lr}
 8004fd2:	4c06      	ldr	r4, [pc, #24]	; (8004fec <_sbrk_r+0x1c>)
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	4605      	mov	r5, r0
 8004fd8:	4608      	mov	r0, r1
 8004fda:	6023      	str	r3, [r4, #0]
 8004fdc:	f7fd f946 	bl	800226c <_sbrk>
 8004fe0:	1c43      	adds	r3, r0, #1
 8004fe2:	d102      	bne.n	8004fea <_sbrk_r+0x1a>
 8004fe4:	6823      	ldr	r3, [r4, #0]
 8004fe6:	b103      	cbz	r3, 8004fea <_sbrk_r+0x1a>
 8004fe8:	602b      	str	r3, [r5, #0]
 8004fea:	bd38      	pop	{r3, r4, r5, pc}
 8004fec:	20001378 	.word	0x20001378

08004ff0 <memcpy>:
 8004ff0:	b510      	push	{r4, lr}
 8004ff2:	1e43      	subs	r3, r0, #1
 8004ff4:	440a      	add	r2, r1
 8004ff6:	4291      	cmp	r1, r2
 8004ff8:	d100      	bne.n	8004ffc <memcpy+0xc>
 8004ffa:	bd10      	pop	{r4, pc}
 8004ffc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005000:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005004:	e7f7      	b.n	8004ff6 <memcpy+0x6>

08005006 <memmove>:
 8005006:	4288      	cmp	r0, r1
 8005008:	b510      	push	{r4, lr}
 800500a:	eb01 0302 	add.w	r3, r1, r2
 800500e:	d807      	bhi.n	8005020 <memmove+0x1a>
 8005010:	1e42      	subs	r2, r0, #1
 8005012:	4299      	cmp	r1, r3
 8005014:	d00a      	beq.n	800502c <memmove+0x26>
 8005016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800501a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800501e:	e7f8      	b.n	8005012 <memmove+0xc>
 8005020:	4283      	cmp	r3, r0
 8005022:	d9f5      	bls.n	8005010 <memmove+0xa>
 8005024:	1881      	adds	r1, r0, r2
 8005026:	1ad2      	subs	r2, r2, r3
 8005028:	42d3      	cmn	r3, r2
 800502a:	d100      	bne.n	800502e <memmove+0x28>
 800502c:	bd10      	pop	{r4, pc}
 800502e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005032:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005036:	e7f7      	b.n	8005028 <memmove+0x22>

08005038 <__malloc_lock>:
 8005038:	4770      	bx	lr

0800503a <__malloc_unlock>:
 800503a:	4770      	bx	lr

0800503c <_realloc_r>:
 800503c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800503e:	4607      	mov	r7, r0
 8005040:	4614      	mov	r4, r2
 8005042:	460e      	mov	r6, r1
 8005044:	b921      	cbnz	r1, 8005050 <_realloc_r+0x14>
 8005046:	4611      	mov	r1, r2
 8005048:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800504c:	f7ff bc8c 	b.w	8004968 <_malloc_r>
 8005050:	b922      	cbnz	r2, 800505c <_realloc_r+0x20>
 8005052:	f7ff fc3b 	bl	80048cc <_free_r>
 8005056:	4625      	mov	r5, r4
 8005058:	4628      	mov	r0, r5
 800505a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800505c:	f000 f814 	bl	8005088 <_malloc_usable_size_r>
 8005060:	42a0      	cmp	r0, r4
 8005062:	d20f      	bcs.n	8005084 <_realloc_r+0x48>
 8005064:	4621      	mov	r1, r4
 8005066:	4638      	mov	r0, r7
 8005068:	f7ff fc7e 	bl	8004968 <_malloc_r>
 800506c:	4605      	mov	r5, r0
 800506e:	2800      	cmp	r0, #0
 8005070:	d0f2      	beq.n	8005058 <_realloc_r+0x1c>
 8005072:	4631      	mov	r1, r6
 8005074:	4622      	mov	r2, r4
 8005076:	f7ff ffbb 	bl	8004ff0 <memcpy>
 800507a:	4631      	mov	r1, r6
 800507c:	4638      	mov	r0, r7
 800507e:	f7ff fc25 	bl	80048cc <_free_r>
 8005082:	e7e9      	b.n	8005058 <_realloc_r+0x1c>
 8005084:	4635      	mov	r5, r6
 8005086:	e7e7      	b.n	8005058 <_realloc_r+0x1c>

08005088 <_malloc_usable_size_r>:
 8005088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800508c:	1f18      	subs	r0, r3, #4
 800508e:	2b00      	cmp	r3, #0
 8005090:	bfbc      	itt	lt
 8005092:	580b      	ldrlt	r3, [r1, r0]
 8005094:	18c0      	addlt	r0, r0, r3
 8005096:	4770      	bx	lr

08005098 <_gettimeofday>:
 8005098:	4b02      	ldr	r3, [pc, #8]	; (80050a4 <_gettimeofday+0xc>)
 800509a:	2258      	movs	r2, #88	; 0x58
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	f04f 30ff 	mov.w	r0, #4294967295
 80050a2:	4770      	bx	lr
 80050a4:	20001378 	.word	0x20001378

080050a8 <_init>:
 80050a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050aa:	bf00      	nop
 80050ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ae:	bc08      	pop	{r3}
 80050b0:	469e      	mov	lr, r3
 80050b2:	4770      	bx	lr

080050b4 <_fini>:
 80050b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b6:	bf00      	nop
 80050b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ba:	bc08      	pop	{r3}
 80050bc:	469e      	mov	lr, r3
 80050be:	4770      	bx	lr
